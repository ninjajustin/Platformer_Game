{"ast":null,"code":"/***\n * Convenience class for specifying and dealing with some precision issues.\n */\nexport class Precision {\n  /**\n   * Returns true if the number is smaller than or equal to epsilon\n   *\n   * @param a the number being evaluated\n   * @param epsilon\n   * @returns\n   */\n  static isTiny(a) {\n    let epsilon = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1e-6;\n    return Math.abs(a) <= epsilon;\n  }\n  /**\n   * Returns the number if it is greater than or equal to epsilon, otherwise\n   * returns signed epsilon.\n   *\n   * Values smaller than epsilon are clamped to be epsilon.\n   *\n   * @param a the number being evaluated\n   * @param epsilon\n   * @returns\n   */\n  static ClampAbsAboveEpsilon(a) {\n    let epsilon = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1e-6;\n    if (!(Math.abs(a) < epsilon)) {\n      return a;\n    } else {\n      return a >= 0 ? epsilon : -epsilon;\n    }\n  }\n\n  /**\n   * Returns true if a minus b is less than epsilon\n   *\n   * @param a\n   * @param b\n   * @returns\n   */\n  static PEQ(a, b) {\n    return Math.abs(a - b) < this.epsilon;\n  }\n\n  /**\n   * Returns the number if it is greater than or equal to epsilon, otherwise\n   * returns signed epsilon.\n   *\n   * Values smaller than epsilon are clamped to be epsilon.\n   *\n   * @param a the number being evaluated\n   * @param epsilon\n   * @returns\n   */\n  static signedTiny(a, epsilon) {\n    const tinyValue = epsilon ? epsilon : Precision.epsilon;\n    if (!(Math.abs(a) < tinyValue)) {\n      return a;\n    } else {\n      return a >= 0 ? tinyValue : -tinyValue;\n    }\n  }\n\n  /**\n   * Returns the integer if it is greater than or equal to 1, otherwise returns\n   * positive or negative 1.\n   *\n   * Values smaller than 1 are clamped to be 1.\n   *\n   * @param a the number evaluated\n   * @returns\n   */\n  static signedTinyInt(a) {\n    if (Math.abs(a) < 1) {\n      if (a < 0) {\n        return -1;\n      } else {\n        return 1;\n      }\n    } else {\n      return a;\n    }\n  }\n}\nPrecision.epsilon = 1e-6;\nPrecision.SMALLEST = 2 * Number.MIN_VALUE;\nPrecision.VECTOR_TEST_PRECISION = 1e-6;\nPrecision.TinyRotation = 0.00001;","map":{"version":3,"names":["Precision","isTiny","a","epsilon","Math","abs","ClampAbsAboveEpsilon","PEQ","b","signedTiny","tinyValue","signedTinyInt","SMALLEST","Number","MIN_VALUE","VECTOR_TEST_PRECISION","TinyRotation"],"sources":["/Users/home/Desktop/cs4620-final-project/src/anigraph/math/Precision.ts"],"sourcesContent":["/***\n * Convenience class for specifying and dealing with some precision issues.\n */\nexport class Precision {\n  static epsilon: number = 1e-6;\n  static SMALLEST: number = 2 * Number.MIN_VALUE;\n  static VECTOR_TEST_PRECISION: number = 1e-6;\n  /**\n   * Returns true if the number is smaller than or equal to epsilon\n   *\n   * @param a the number being evaluated\n   * @param epsilon\n   * @returns\n   */\n  static isTiny(a: number, epsilon: number = 1e-6) {\n    return Math.abs(a) <= epsilon;\n  }\n\n  static TinyRotation: number = 0.00001;\n\n  /**\n   * Returns the number if it is greater than or equal to epsilon, otherwise\n   * returns signed epsilon.\n   *\n   * Values smaller than epsilon are clamped to be epsilon.\n   *\n   * @param a the number being evaluated\n   * @param epsilon\n   * @returns\n   */\n  static ClampAbsAboveEpsilon(a: number, epsilon: number = 1e-6) {\n    if (!(Math.abs(a) < epsilon)) {\n      return a;\n    } else {\n      return a >= 0 ? epsilon : -epsilon;\n    }\n  }\n\n  /**\n   * Returns true if a minus b is less than epsilon\n   *\n   * @param a\n   * @param b\n   * @returns\n   */\n  static PEQ(a: number, b: number) {\n    return Math.abs(a - b) < this.epsilon;\n  }\n\n  /**\n   * Returns the number if it is greater than or equal to epsilon, otherwise\n   * returns signed epsilon.\n   *\n   * Values smaller than epsilon are clamped to be epsilon.\n   *\n   * @param a the number being evaluated\n   * @param epsilon\n   * @returns\n   */\n  static signedTiny(a: number, epsilon?: number) {\n    const tinyValue = epsilon ? epsilon : Precision.epsilon;\n    if (!(Math.abs(a) < tinyValue)) {\n      return a;\n    } else {\n      return a >= 0 ? tinyValue : -tinyValue;\n    }\n  }\n\n  /**\n   * Returns the integer if it is greater than or equal to 1, otherwise returns\n   * positive or negative 1.\n   *\n   * Values smaller than 1 are clamped to be 1.\n   *\n   * @param a the number evaluated\n   * @returns\n   */\n  static signedTinyInt(a: number) {\n    if (Math.abs(a) < 1) {\n      if (a < 0) {\n        return -1;\n      } else {\n        return 1;\n      }\n    } else {\n      return a;\n    }\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA,OAAO,MAAMA,SAAS,CAAC;EAIrB;AACF;AACA;AACA;AACA;AACA;AACA;EACE,OAAOC,MAAM,CAACC,CAAS,EAA0B;IAAA,IAAxBC,OAAe,uEAAG,IAAI;IAC7C,OAAOC,IAAI,CAACC,GAAG,CAACH,CAAC,CAAC,IAAIC,OAAO;EAC/B;EAIA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOG,oBAAoB,CAACJ,CAAS,EAA0B;IAAA,IAAxBC,OAAe,uEAAG,IAAI;IAC3D,IAAI,EAAEC,IAAI,CAACC,GAAG,CAACH,CAAC,CAAC,GAAGC,OAAO,CAAC,EAAE;MAC5B,OAAOD,CAAC;IACV,CAAC,MAAM;MACL,OAAOA,CAAC,IAAI,CAAC,GAAGC,OAAO,GAAG,CAACA,OAAO;IACpC;EACF;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACE,OAAOI,GAAG,CAACL,CAAS,EAAEM,CAAS,EAAE;IAC/B,OAAOJ,IAAI,CAACC,GAAG,CAACH,CAAC,GAAGM,CAAC,CAAC,GAAG,IAAI,CAACL,OAAO;EACvC;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOM,UAAU,CAACP,CAAS,EAAEC,OAAgB,EAAE;IAC7C,MAAMO,SAAS,GAAGP,OAAO,GAAGA,OAAO,GAAGH,SAAS,CAACG,OAAO;IACvD,IAAI,EAAEC,IAAI,CAACC,GAAG,CAACH,CAAC,CAAC,GAAGQ,SAAS,CAAC,EAAE;MAC9B,OAAOR,CAAC;IACV,CAAC,MAAM;MACL,OAAOA,CAAC,IAAI,CAAC,GAAGQ,SAAS,GAAG,CAACA,SAAS;IACxC;EACF;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOC,aAAa,CAACT,CAAS,EAAE;IAC9B,IAAIE,IAAI,CAACC,GAAG,CAACH,CAAC,CAAC,GAAG,CAAC,EAAE;MACnB,IAAIA,CAAC,GAAG,CAAC,EAAE;QACT,OAAO,CAAC,CAAC;MACX,CAAC,MAAM;QACL,OAAO,CAAC;MACV;IACF,CAAC,MAAM;MACL,OAAOA,CAAC;IACV;EACF;AACF;AArFaF,SAAS,CACbG,OAAO,GAAW,IAAI;AADlBH,SAAS,CAEbY,QAAQ,GAAW,CAAC,GAAGC,MAAM,CAACC,SAAS;AAFnCd,SAAS,CAGbe,qBAAqB,GAAW,IAAI;AAHhCf,SAAS,CAebgB,YAAY,GAAW,OAAO"},"metadata":{},"sourceType":"module"}