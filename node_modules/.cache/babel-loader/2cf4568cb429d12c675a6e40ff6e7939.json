{"ast":null,"code":"/**\n * Base class for views in the Anigraph MVC scheme.\n * The primary responsibility for each view subclass is to specify how a model translates into Three.js rendering calls. The view itself should hold Three.js objects and make them available to controllers for specifying interactions.\n * Views should always be initialize\n */\nimport * as THREE from \"three\";\nimport { ANodeModel } from \"../nodeModel\";\nimport { AView } from \"../../base\";\nimport { Mat3 } from \"../../math\";\nimport { AMaterial } from \"../../rendering\";\nimport { AObject3DModelWrapper } from \"../../geometry\";\nimport { ALoadedElement } from \"../../rendering/loaded/ALoadedElement\";\nexport let BASIC_VIEW_SUBSCRIPTIONS;\n(function (BASIC_VIEW_SUBSCRIPTIONS) {\n  BASIC_VIEW_SUBSCRIPTIONS[\"MODEL_STATE_LISTENER\"] = \"VIEW_MODEL_STATE_LISTENER\";\n  BASIC_VIEW_SUBSCRIPTIONS[\"MODEL_RELEASE_LISTENER\"] = \"VIEW_MODEL_RELEASE_LISTENER\";\n  BASIC_VIEW_SUBSCRIPTIONS[\"MODEL_GEOMETRY_LISTENER\"] = \"VIEW_MODEL_GEOMETRY_LISTENER\";\n  BASIC_VIEW_SUBSCRIPTIONS[\"MODEL_PARENT_CHANGED\"] = \"MODEL_PARENT_CHANGED\";\n  BASIC_VIEW_SUBSCRIPTIONS[\"MODEL_VISIBLE\"] = \"MODEL_VISIBLE\";\n})(BASIC_VIEW_SUBSCRIPTIONS || (BASIC_VIEW_SUBSCRIPTIONS = {}));\nvar ANODEVIEW_MATERIAL_EVENTS;\n/**\n * Base View Class\n */\n(function (ANODEVIEW_MATERIAL_EVENTS) {\n  ANODEVIEW_MATERIAL_EVENTS[\"UPDATE\"] = \"AVIEW_MATERIAL_UPDATE\";\n  ANODEVIEW_MATERIAL_EVENTS[\"CHANGE\"] = \"AVIEW_MATERIAL_CHANGE\";\n  ANODEVIEW_MATERIAL_EVENTS[\"COLOR\"] = \"AVIEW_MATERIAL_COLOR\";\n})(ANODEVIEW_MATERIAL_EVENTS || (ANODEVIEW_MATERIAL_EVENTS = {}));\nexport class _ANodeView extends AView {\n  constructor() {\n    super(...arguments);\n    this._model = void 0;\n    this._threejs = void 0;\n  }\n  get model() {\n    return this._model;\n  }\n  get controller() {\n    return this._controller;\n  }\n  setModelListeners() {\n    const self = this;\n    this.unsubscribe(BASIC_VIEW_SUBSCRIPTIONS.MODEL_RELEASE_LISTENER, false);\n    this.subscribe(this.model.addEventListener(ANodeModel.AModelEvents.RELEASE, () => {\n      self.dispose();\n    }));\n    this.unsubscribe(BASIC_VIEW_SUBSCRIPTIONS.MODEL_STATE_LISTENER, false);\n    this.subscribe(this.model.addStateListener(() => {\n      self.update();\n    }));\n    this.unsubscribe(BASIC_VIEW_SUBSCRIPTIONS.MODEL_GEOMETRY_LISTENER, false);\n    this.subscribe(this.model.addGeometryListener(() => {\n      self.update();\n    }));\n    // this.subscribe(this.model.addTransformListener(()=>{self.updateTransform();}))\n\n    this.unsubscribe(BASIC_VIEW_SUBSCRIPTIONS.MODEL_PARENT_CHANGED, false);\n    this.subscribe(this.model.addNewParentListener((newParent, oldParent) => {\n      if (self.threejs.parent !== undefined) {\n        self.threejs.removeFromParent();\n      }\n      if (newParent !== undefined) {\n        self.controller.getViewListForModel(newParent)[0].threejs.add(self.threejs);\n      }\n    }));\n    this.unsubscribe(BASIC_VIEW_SUBSCRIPTIONS.MODEL_VISIBLE, false);\n    this.subscribe(this.model.addVisibilityListener(() => {\n      self.threejs.visible = this.model.visible;\n    }), BASIC_VIEW_SUBSCRIPTIONS.MODEL_VISIBLE);\n  }\n\n  /**\n   * The three.js object for this view. Should be a subclass of THREE.Object3D\n   * @type {THREE.Object3D}\n   */\n\n  get threejs() {\n    return this._threejs;\n  }\n\n  /**\n   * This gets called by the ASceneController in createViewForNodeModel(nodeModel: ANodeModel)\n   * @param model\n   */\n  setModel(model) {\n    this._model = model;\n    this._initializeThreeJSObject();\n    this._threejs.matrixAutoUpdate = false;\n    this.init();\n    this.setModelListeners();\n  }\n  get modelID() {\n    return this.model.uid;\n  }\n  release() {\n    this.dispose();\n    super.release();\n  }\n}\nexport class ANodeView extends _ANodeView {\n  constructor() {\n    super(...arguments);\n    this._loadedElements = {};\n    this.graphics = {};\n  }\n  _initializeThreeJSObject() {\n    this._threejs = new THREE.Group();\n  }\n  get threejs() {\n    return this._threejs;\n  }\n  initLoadedObjects() {\n    const self = this;\n    for (let mname in this.model.geometry.members) {\n      let m = this.model.geometry.members[mname];\n      if (m instanceof AObject3DModelWrapper) {\n        let obj = new ALoadedElement(m);\n        if (this.model.material) {\n          obj.setMaterial(this.model.material.threejs);\n        } else {\n          obj.setMaterial(new THREE.MeshBasicMaterial());\n        }\n        this.addLoadedElement(obj);\n      }\n    }\n  }\n  addLoadedElement(element) {\n    this.addGraphic(element);\n    this._loadedElements[element.uid] = element;\n  }\n\n  //##################//--Graphic Objects--\\\\##################\n  //<editor-fold desc=\"Graphic Objects\">\n\n  /*\n  ToDo: should write docs for this\n   */\n\n  addGraphic(graphic) {\n    this.registerGraphic(graphic);\n    this.threejs.add(graphic.threejs);\n  }\n  disposeGraphic(graphic) {\n    this._removeGraphic(graphic);\n    graphic.dispose();\n  }\n  registerGraphic(graphic) {\n    this.graphics[graphic.uid] = graphic;\n  }\n  _removeGraphic(graphic) {\n    this.threejs.remove(graphic.threejs);\n    delete this.graphics[graphic.uid];\n  }\n  moveGraphicToBack(graphic) {\n    this._removeGraphic(graphic);\n    this.addGraphic(graphic);\n    // addGraphicToRoot(graphic);\n  }\n\n  getGraphicList() {\n    return Object.values(this.graphics);\n  }\n  mapOverGraphics(fn) {\n    return this.getGraphicList().map(fn);\n  }\n  disposeGraphics() {\n    let graphicKeys = Object.keys(this.graphics);\n    for (let e of graphicKeys) {\n      let graphic = this.graphics[e];\n      this._removeGraphic(graphic);\n      graphic.dispose();\n    }\n  }\n  dispose() {\n    this.disposeGraphics();\n    this.threejs.removeFromParent();\n  }\n\n  //</editor-fold>\n  //##################\\\\--Graphic Objects--//##################\n\n  setTransform(transform) {\n    transform.getMatrix().assignTo(this.threejs.matrix);\n  }\n\n  // updateTransform() {\n  //     this.setTransform(this.model.transform)\n  // }\n\n  setModelListeners() {\n    super.setModelListeners();\n    this._initMaterialListener();\n  }\n  _initMaterialListener() {\n    const self = this;\n    this.addMaterialUpdateCallback(function () {\n      self.onMaterialUpdate(...arguments);\n    }, AMaterial.Events.UPDATE);\n    this.addMaterialChangeCallback(() => {\n      self.onMaterialChange();\n    }, AMaterial.Events.CHANGE);\n\n    // this.addModelColorCallback((...args:any[])=>{\n    //         self.onModelColorChange();\n    //     },\n    //     \"Material Color Change\")\n  }\n\n  onMaterialUpdate() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    const self = this;\n    this.mapOverGraphics(element => {\n      element.onMaterialUpdate(self.model.material, ...args);\n    });\n  }\n  onMaterialChange() {\n    const self = this;\n    this.mapOverGraphics(element => {\n      element.onMaterialChange(self.model.material);\n    });\n  }\n\n  // onModelColorChange(){\n  //     const self = this;\n  //     this.mapOverGraphics((element:AGraphicObject)=>{\n  //         if('setColor' in element){\n  //             element.setColor(self.model.color);\n  //         }\n  //     })\n  // }\n\n  addMaterialUpdateCallback(callback, handle) {\n    const self = this;\n    this.subscribe(self.model.addMaterialUpdateListener(() => {\n      callback();\n    }), handle);\n  }\n  addMaterialChangeCallback(callback, handle) {\n    const self = this;\n    this.subscribe(self.model.addMaterialChangeListener(() => {\n      callback();\n    }), handle);\n  }\n\n  // addModelColorCallback(callback:(self?:AObject)=>void, handle?:string){\n  //     const self = this;\n  //     this.subscribe(\n  //         self.model.addColorListener( ()=>{\n  //             callback();\n  //         }),\n  //         handle\n  //     );\n  // }\n}\nANodeView.MaterialUpdates = ANODEVIEW_MATERIAL_EVENTS;\nexport class ANodeView2D extends ANodeView {\n  setTransform(transform) {\n    if (transform instanceof Mat3) {\n      transform.Mat4From2DH().assignTo(this.threejs.matrix);\n    } else {\n      transform.getMatrix().assignTo(this.threejs.matrix);\n    }\n  }\n}","map":{"version":3,"names":["THREE","ANodeModel","AView","Mat3","AMaterial","AObject3DModelWrapper","ALoadedElement","BASIC_VIEW_SUBSCRIPTIONS","ANODEVIEW_MATERIAL_EVENTS","_ANodeView","_model","_threejs","model","controller","_controller","setModelListeners","self","unsubscribe","MODEL_RELEASE_LISTENER","subscribe","addEventListener","AModelEvents","RELEASE","dispose","MODEL_STATE_LISTENER","addStateListener","update","MODEL_GEOMETRY_LISTENER","addGeometryListener","MODEL_PARENT_CHANGED","addNewParentListener","newParent","oldParent","threejs","parent","undefined","removeFromParent","getViewListForModel","add","MODEL_VISIBLE","addVisibilityListener","visible","setModel","_initializeThreeJSObject","matrixAutoUpdate","init","modelID","uid","release","ANodeView","_loadedElements","graphics","Group","initLoadedObjects","mname","geometry","members","m","obj","material","setMaterial","MeshBasicMaterial","addLoadedElement","element","addGraphic","graphic","registerGraphic","disposeGraphic","_removeGraphic","remove","moveGraphicToBack","getGraphicList","Object","values","mapOverGraphics","fn","map","disposeGraphics","graphicKeys","keys","e","setTransform","transform","getMatrix","assignTo","matrix","_initMaterialListener","addMaterialUpdateCallback","onMaterialUpdate","Events","UPDATE","addMaterialChangeCallback","onMaterialChange","CHANGE","args","callback","handle","addMaterialUpdateListener","addMaterialChangeListener","MaterialUpdates","ANodeView2D","Mat4From2DH"],"sources":["/Users/home/Desktop/cs4620-final-project/src/anigraph/scene/nodeView/ANodeView.ts"],"sourcesContent":["/**\n * Base class for views in the Anigraph MVC scheme.\n * The primary responsibility for each view subclass is to specify how a model translates into Three.js rendering calls. The view itself should hold Three.js objects and make them available to controllers for specifying interactions.\n * Views should always be initialize\n */\nimport * as THREE from \"three\";\nimport {ANodeModel} from \"../nodeModel\";\nimport {AModel, AObjectNode, AView} from \"../../base\";\nimport {AGraphicObject} from \"../../rendering\";\nimport {Mat3, Mat4, TransformationInterface} from \"../../math\";\nimport {AObject} from \"../../base\";\nimport {AMaterial} from \"../../rendering\";\nimport {ASceneController} from \"../ASceneController\";\nimport {AObject3DModelWrapper} from \"../../geometry\";\nimport {ALoadedElement, ALoadedElementInterface} from \"../../rendering/loaded/ALoadedElement\";\n\nexport enum BASIC_VIEW_SUBSCRIPTIONS{\n    MODEL_STATE_LISTENER='VIEW_MODEL_STATE_LISTENER',\n    MODEL_RELEASE_LISTENER='VIEW_MODEL_RELEASE_LISTENER',\n    MODEL_GEOMETRY_LISTENER='VIEW_MODEL_GEOMETRY_LISTENER',\n    MODEL_PARENT_CHANGED=\"MODEL_PARENT_CHANGED\",\n    MODEL_VISIBLE=\"MODEL_VISIBLE\"\n}\n\nexport type NodeViewCallback = (view:ANodeView, ...args: any[]) => any;\nenum ANODEVIEW_MATERIAL_EVENTS{\n    UPDATE=\"AVIEW_MATERIAL_UPDATE\",\n    CHANGE=\"AVIEW_MATERIAL_CHANGE\",\n    COLOR=\"AVIEW_MATERIAL_COLOR\"\n\n}\n\n/**\n * Base View Class\n */\nexport abstract class _ANodeView extends AView{\n    abstract init():void;\n    abstract update(...args:any[]):void;\n    // abstract updateTransform():void;\n    protected abstract _initializeThreeJSObject():void;\n\n    protected _model!:ANodeModel;\n    get model(){\n        return this._model;\n    }\n\n\n    get controller():ASceneController{return this._controller as ASceneController;}\n\n    setModelListeners(){\n        const self=this;\n        this.unsubscribe(BASIC_VIEW_SUBSCRIPTIONS.MODEL_RELEASE_LISTENER, false);\n        this.subscribe(this.model.addEventListener(ANodeModel.AModelEvents.RELEASE, ()=>{self.dispose()}));\n        this.unsubscribe(BASIC_VIEW_SUBSCRIPTIONS.MODEL_STATE_LISTENER, false);\n        this.subscribe(this.model.addStateListener(()=>{self.update()}));\n        this.unsubscribe(BASIC_VIEW_SUBSCRIPTIONS.MODEL_GEOMETRY_LISTENER, false);\n        this.subscribe(this.model.addGeometryListener(()=>{self.update()}));\n        // this.subscribe(this.model.addTransformListener(()=>{self.updateTransform();}))\n\n        this.unsubscribe(BASIC_VIEW_SUBSCRIPTIONS.MODEL_PARENT_CHANGED, false);\n        this.subscribe(this.model.addNewParentListener((newParent?:AModel, oldParent?:AModel)=>{\n            if(self.threejs.parent !== undefined){\n                self.threejs.removeFromParent();\n            }\n            if(newParent !== undefined) {\n                self.controller.getViewListForModel(newParent)[0].threejs.add(self.threejs);\n            }\n        }))\n\n        this.unsubscribe(BASIC_VIEW_SUBSCRIPTIONS.MODEL_VISIBLE, false);\n        this.subscribe(this.model.addVisibilityListener(()=>{\n            self.threejs.visible=this.model.visible;\n        }),\n            BASIC_VIEW_SUBSCRIPTIONS.MODEL_VISIBLE);\n\n    }\n\n    /**\n     * The three.js object for this view. Should be a subclass of THREE.Object3D\n     * @type {THREE.Object3D}\n     */\n    _threejs!:THREE.Object3D;\n    get threejs():THREE.Object3D{\n        return this._threejs;\n    }\n\n    /**\n     * This gets called by the ASceneController in createViewForNodeModel(nodeModel: ANodeModel)\n     * @param model\n     */\n    setModel(model:ANodeModel){\n        this._model = model;\n        this._initializeThreeJSObject();\n        this._threejs.matrixAutoUpdate=false;\n        this.init();\n        this.setModelListeners()\n    }\n\n    get modelID():string{\n        return this.model.uid;\n    }\n\n    abstract dispose():void;\n\n    release() {\n        this.dispose();\n        super.release();\n    }\n}\n\nexport abstract class ANodeView extends _ANodeView{\n    protected _loadedElements:{[uid:string]:ALoadedElementInterface}= {};\n    protected _initializeThreeJSObject(){\n        this._threejs = new THREE.Group();\n    }\n\n    static MaterialUpdates = ANODEVIEW_MATERIAL_EVENTS;\n\n    get threejs():THREE.Group{\n        return this._threejs as THREE.Group;\n    }\n\n\n\n    initLoadedObjects(){\n        const self = this;\n        for(let mname in this.model.geometry.members){\n            let m = this.model.geometry.members[mname];\n            if (m instanceof AObject3DModelWrapper){\n                let obj = new ALoadedElement(m);\n                if(this.model.material) {\n                    obj.setMaterial(this.model.material.threejs);\n                }else{\n                    obj.setMaterial(new THREE.MeshBasicMaterial())\n                }\n                this.addLoadedElement(obj);\n            }\n        }\n    }\n\n    addLoadedElement(element:ALoadedElement){\n        this.addGraphic(element);\n        this._loadedElements[element.uid]=element;\n    }\n\n    //##################//--Graphic Objects--\\\\##################\n    //<editor-fold desc=\"Graphic Objects\">\n\n    /*\n    ToDo: should write docs for this\n     */\n    protected graphics:{[uid:string]:AGraphicObject}={};\n    addGraphic(graphic:AGraphicObject){\n        this.registerGraphic(graphic);\n        this.threejs.add(graphic.threejs);\n    }\n\n    disposeGraphic(graphic:AGraphicObject){\n        this._removeGraphic(graphic);\n        graphic.dispose();\n    }\n\n    registerGraphic(graphic:AGraphicObject){\n        this.graphics[graphic.uid]=graphic;\n    }\n\n    _removeGraphic(graphic:AGraphicObject){\n        this.threejs.remove(graphic.threejs);\n        delete this.graphics[graphic.uid];\n    }\n\n    moveGraphicToBack(graphic:AGraphicObject){\n        this._removeGraphic(graphic);\n        this.addGraphic(graphic);\n        // addGraphicToRoot(graphic);\n    }\n\n    getGraphicList(){\n        return Object.values(this.graphics);\n    }\n    mapOverGraphics(fn:(graphic:AGraphicObject)=>any[]|void){\n        return this.getGraphicList().map(fn);\n    }\n\n    disposeGraphics(){\n        let graphicKeys = Object.keys(this.graphics);\n        for(let e of graphicKeys){\n            let graphic = this.graphics[e];\n            this._removeGraphic(graphic);\n            graphic.dispose();\n        }\n    }\n\n    dispose(){\n        this.disposeGraphics();\n        this.threejs.removeFromParent();\n    }\n\n    //</editor-fold>\n    //##################\\\\--Graphic Objects--//##################\n\n    setTransform(transform:TransformationInterface){\n        (transform.getMatrix() as Mat4).assignTo(this.threejs.matrix);\n    }\n\n    // updateTransform() {\n    //     this.setTransform(this.model.transform)\n    // }\n\n    setModelListeners(){\n        super.setModelListeners();\n        this._initMaterialListener();\n    }\n\n    _initMaterialListener(){\n        const self=this;\n        this.addMaterialUpdateCallback((...args:any[])=>{\n                self.onMaterialUpdate(...args);\n            },\n            AMaterial.Events.UPDATE)\n        this.addMaterialChangeCallback(()=>{\n                self.onMaterialChange();\n            },\n            AMaterial.Events.CHANGE)\n\n        // this.addModelColorCallback((...args:any[])=>{\n        //         self.onModelColorChange();\n        //     },\n        //     \"Material Color Change\")\n    }\n\n    onMaterialUpdate(...args:any[]){\n        const self = this;\n        this.mapOverGraphics((element:AGraphicObject)=>{\n            element.onMaterialUpdate(self.model.material, ...args);\n        })\n    }\n\n    onMaterialChange(){\n        const self = this;\n        this.mapOverGraphics((element:AGraphicObject)=>{\n            element.onMaterialChange(self.model.material);\n        })\n    }\n\n    // onModelColorChange(){\n    //     const self = this;\n    //     this.mapOverGraphics((element:AGraphicObject)=>{\n    //         if('setColor' in element){\n    //             element.setColor(self.model.color);\n    //         }\n    //     })\n    // }\n\n    addMaterialUpdateCallback(callback:(self?:AObject)=>void, handle?:string){\n        const self = this;\n        this.subscribe(\n            self.model.addMaterialUpdateListener( ()=>{\n                callback();\n            }),\n            handle\n        );\n    }\n\n    addMaterialChangeCallback(callback:(self?:AObject)=>void, handle?:string){\n        const self = this;\n        this.subscribe(\n            self.model.addMaterialChangeListener( ()=>{\n                callback();\n            }),\n            handle\n        );\n    }\n\n\n\n    // addModelColorCallback(callback:(self?:AObject)=>void, handle?:string){\n    //     const self = this;\n    //     this.subscribe(\n    //         self.model.addColorListener( ()=>{\n    //             callback();\n    //         }),\n    //         handle\n    //     );\n    // }\n}\n\n\nexport abstract class ANodeView2D extends ANodeView{\n    setTransform(transform:TransformationInterface){\n        if(transform instanceof Mat3){\n            transform.Mat4From2DH().assignTo(this.threejs.matrix);\n        }else{\n            (transform.getMatrix() as Mat4).assignTo(this.threejs.matrix);\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}