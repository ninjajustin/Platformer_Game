{"ast":null,"code":"var _dec, _class;\nimport { ASerializable } from \"../../../anigraph\";\nimport { NodeTransform3D, Vec3 } from \"../../../anigraph\";\nimport { MainAppInteractionMode } from \"../../BaseClasses/MainAppInteractionMode\";\nexport let ExamplePlayerInteractionMode = (_dec = ASerializable(\"ExamplePlayerInteractionMode\"), _dec(_class = class ExamplePlayerInteractionMode extends MainAppInteractionMode {\n  /**\n   * You may want to define some parameters to adjust the speed of controls...\n   */\n\n  get camera() {\n    return this.model.camera;\n  }\n  constructor(owner, name, interactionCallbacks) {\n    for (var _len = arguments.length, args = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {\n      args[_key - 3] = arguments[_key];\n    }\n    super(name, owner, interactionCallbacks, ...args);\n    // this.reset();\n    this.mouseMovementSpeed = 3;\n    this.keyboardMovementSpeed = 0.25;\n    this.cameraOrbitSpeed = 3;\n  }\n  get player() {\n    return this.model.player;\n  }\n  reset() {\n    // You can reset the control mode here\n    this.camera.pose = NodeTransform3D.LookAt(this.player.position.plus(Vec3.UnitZ().times(3)), this.player.position, Vec3.UnitY());\n  }\n\n  /**\n   * This gets called immediately before the interaction mode is activated. For now, we will call reset()\n   * @param args\n   */\n  beforeActivate() {\n    super.beforeActivate(...arguments);\n    this.reset();\n  }\n\n  /**\n   * Create an instance in a single call, instead of calling new followed by init\n   * @param owner\n   * @param args\n   * @returns {ASceneInteractionMode}\n   * @constructor\n   */\n  static Create(owner) {\n    let controls = new this();\n    controls.init(owner);\n    return controls;\n  }\n  onWheelMove(event, interaction) {\n    let zoom = event.DOMEvent.deltaY;\n    console.log(`Wheel moved! deltaY: ${zoom}`);\n  }\n  onMouseMove(event, interaction) {\n    // console.log(`mouse move! ${event}`);\n  }\n  onKeyDown(event, interaction) {\n    if (interaction.keysDownState['w']) {\n      this.player.position.y = this.player.position.y + this.keyboardMovementSpeed;\n    }\n    if (interaction.keysDownState['a']) {\n      this.player.position.x = this.player.position.x - this.keyboardMovementSpeed;\n    }\n    if (interaction.keysDownState['s']) {\n      this.player.position.y = this.player.position.y - this.keyboardMovementSpeed;\n    }\n    if (interaction.keysDownState['d']) {\n      this.player.position.x = this.player.position.x + this.keyboardMovementSpeed;\n    }\n  }\n  onKeyUp(event, interaction) {\n    if (!interaction.keysDownState['w']) {}\n    if (!interaction.keysDownState['a']) {}\n    if (!interaction.keysDownState['s']) {}\n    if (!interaction.keysDownState['d']) {}\n    if (!interaction.keysDownState['r']) {}\n    if (!interaction.keysDownState['f']) {}\n  }\n  onDragStart(event, interaction) {\n    /**\n     * Here we will track some interaction state. Specifically, the last cursor position.\n     */\n    interaction.setInteractionState('lastCursor', event.ndcCursor);\n  }\n  onDragMove(event, interaction) {\n    if (!event.ndcCursor) {\n      return;\n    }\n    let mouseMovement = event.ndcCursor.minus(interaction.getInteractionState('lastCursor'));\n    interaction.setInteractionState('lastCursor', event.ndcCursor);\n    let movementX = mouseMovement.x * this.mouseMovementSpeed;\n    let movementY = mouseMovement.y * this.mouseMovementSpeed;\n    this.player.position = this.player.position.plus(new Vec3(movementX, movementY, 0));\n    this.camera.transform.position = this.camera.position.plus(new Vec3(movementX, movementY, 0));\n  }\n  onDragEnd(event, interaction) {\n    let cursorWorldCoordinates = event.ndcCursor;\n    let dragStartWorldCoordinates = interaction.dragStartEvent.ndcCursor;\n  }\n\n  /**\n   * This would be a good place to implement the time update of any movement filters\n   * @param t\n   * @param args\n   */\n  timeUpdate(t) {}\n}) || _class);","map":{"version":3,"names":["ASerializable","NodeTransform3D","Vec3","MainAppInteractionMode","ExamplePlayerInteractionMode","camera","model","constructor","owner","name","interactionCallbacks","args","mouseMovementSpeed","keyboardMovementSpeed","cameraOrbitSpeed","player","reset","pose","LookAt","position","plus","UnitZ","times","UnitY","beforeActivate","Create","controls","init","onWheelMove","event","interaction","zoom","DOMEvent","deltaY","console","log","onMouseMove","onKeyDown","keysDownState","y","x","onKeyUp","onDragStart","setInteractionState","ndcCursor","onDragMove","mouseMovement","minus","getInteractionState","movementX","movementY","transform","onDragEnd","cursorWorldCoordinates","dragStartWorldCoordinates","dragStartEvent","timeUpdate","t"],"sources":["/Users/home/Desktop/cs4620-final-project/src/app/main/InteractionModes/ExamplePlayerInteractionMode.ts"],"sourcesContent":["import {\n    AClickInteraction,\n    ADOMPointerMoveInteraction, ADragInteraction,\n    AInteractionEvent,\n    AKeyboardInteraction,\n    ASerializable\n} from \"../../../anigraph\";\nimport {AWheelInteraction} from \"../../../anigraph/interaction/AWheelInteraction\";\nimport {ASceneInteractionMode} from \"../../../anigraph/scene/interactionmodes/ASceneInteractionMode\";\nimport {NodeTransform3D, Quaternion, Vec2, Vec3} from \"../../../anigraph\";\nimport type {HasInteractionModeCallbacks} from \"../../../anigraph\";\nimport {MainSceneController} from \"../Scene/MainSceneController\";\nimport {MainAppInteractionMode} from \"../../BaseClasses/MainAppInteractionMode\";\n\n\n@ASerializable(\"ExamplePlayerInteractionMode\")\nexport class ExamplePlayerInteractionMode extends MainAppInteractionMode{\n\n    /**\n     * You may want to define some parameters to adjust the speed of controls...\n     */\n    mouseMovementSpeed:number=3;\n    keyboardMovementSpeed:number=0.25;\n    cameraOrbitSpeed:number=3;\n\n    get camera(){\n        return this.model.camera;\n    }\n\n    constructor(owner?:MainSceneController,\n                name?:string,\n                interactionCallbacks?:HasInteractionModeCallbacks,\n                ...args:any[]) {\n        super(name, owner, interactionCallbacks, ...args);\n        // this.reset();\n    }\n\n    get player(){\n        return this.model.player;\n    }\n\n    reset(){\n        // You can reset the control mode here\n        this.camera.pose = NodeTransform3D.LookAt(\n            this.player.position.plus(Vec3.UnitZ().times(3)),\n            this.player.position,\n            Vec3.UnitY()\n        )\n    }\n\n    /**\n     * This gets called immediately before the interaction mode is activated. For now, we will call reset()\n     * @param args\n     */\n    beforeActivate(...args:any[]) {\n        super.beforeActivate(...args);\n        this.reset();\n    }\n\n    /**\n     * Create an instance in a single call, instead of calling new followed by init\n     * @param owner\n     * @param args\n     * @returns {ASceneInteractionMode}\n     * @constructor\n     */\n    static Create(owner: MainSceneController, ...args: any[]) {\n        let controls = new this();\n        controls.init(owner);\n        return controls;\n    }\n\n    onWheelMove(event: AInteractionEvent, interaction: AWheelInteraction) {\n        let zoom = (event.DOMEvent as WheelEvent).deltaY;\n        console.log(`Wheel moved! deltaY: ${zoom}`);\n    }\n\n    onMouseMove(event:AInteractionEvent, interaction: ADOMPointerMoveInteraction){\n        // console.log(`mouse move! ${event}`);\n    }\n\n    onKeyDown(event:AInteractionEvent, interaction:AKeyboardInteraction){\n        if(interaction.keysDownState['w']){\n            this.player.position.y = this.player.position.y+this.keyboardMovementSpeed;\n        }\n        if(interaction.keysDownState['a']){\n            this.player.position.x = this.player.position.x-this.keyboardMovementSpeed;\n        }\n        if(interaction.keysDownState['s']){\n            this.player.position.y = this.player.position.y-this.keyboardMovementSpeed;\n\n        }\n        if(interaction.keysDownState['d']){\n            this.player.position.x = this.player.position.x+this.keyboardMovementSpeed;\n        }\n    }\n\n    onKeyUp(event:AInteractionEvent, interaction:AKeyboardInteraction){\n        if(!interaction.keysDownState['w']){\n        }\n        if(!interaction.keysDownState['a']){\n        }\n        if(!interaction.keysDownState['s']){\n        }\n        if(!interaction.keysDownState['d']){\n        }\n        if(!interaction.keysDownState['r']){\n        }\n        if(!interaction.keysDownState['f']){\n        }\n    }\n\n    onDragStart(event: AInteractionEvent, interaction: ADragInteraction): void {\n        /**\n         * Here we will track some interaction state. Specifically, the last cursor position.\n         */\n        interaction.setInteractionState('lastCursor', event.ndcCursor);\n    }\n    onDragMove(event: AInteractionEvent, interaction: ADragInteraction): void {\n        if(!event.ndcCursor){\n            return;\n        }\n        let mouseMovement = event.ndcCursor.minus(interaction.getInteractionState('lastCursor'));\n        interaction.setInteractionState('lastCursor', event.ndcCursor);\n\n        let movementX = mouseMovement.x*this.mouseMovementSpeed;\n        let movementY = mouseMovement.y*this.mouseMovementSpeed;\n        this.player.position = this.player.position.plus(new Vec3(movementX, movementY, 0));\n        this.camera.transform.position = this.camera.position.plus(new Vec3(movementX, movementY, 0));\n    }\n    onDragEnd(event: AInteractionEvent, interaction: ADragInteraction): void {\n        let cursorWorldCoordinates:Vec2|null = event.ndcCursor;\n        let dragStartWorldCoordinates:Vec2|null = interaction.dragStartEvent.ndcCursor;\n    }\n\n    /**\n     * This would be a good place to implement the time update of any movement filters\n     * @param t\n     * @param args\n     */\n    timeUpdate(t: number, ...args:any[]) {\n    }\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}