{"ast":null,"code":"import { AParticle3D } from \"../../../../anigraph/physics/AParticle3D\";\nimport { Color, V3, Quaternion } from \"../../../../anigraph\";\n\n/**\n * A particle subclass for you to customize\n */\nexport class BillboardParticle extends AParticle3D {\n  constructor(position, velocity, mass, size, color) {\n    super(position, velocity, mass, size);\n    this.color = void 0;\n    this.t0 = 0;\n    this.right = void 0;\n    this.sinOffset = void 0;\n    this.color = color !== null && color !== void 0 ? color : Color.FromString(\"#00ff00\");\n    this.right = V3(1, 0, 0);\n  }\n  updateVelocity(t, timePassed) {\n    this.right = this.right.getRotatedByQuaternion(Quaternion.RotationY((Math.random() - .5) * 10 * timePassed));\n    let sineRotation = Quaternion.FromRotationBetweenTwoVectors(V3(1, 0, 0), this.right);\n    this.velocity = V3(Math.cos(4 * t + this.sinOffset), 1, 0).getRotatedByQuaternion(sineRotation);\n  }\n}","map":{"version":3,"names":["AParticle3D","Color","V3","Quaternion","BillboardParticle","constructor","position","velocity","mass","size","color","t0","right","sinOffset","FromString","updateVelocity","t","timePassed","getRotatedByQuaternion","RotationY","Math","random","sineRotation","FromRotationBetweenTwoVectors","cos"],"sources":["/Users/home/Desktop/cs4620-final-project/src/app/main/Nodes/BillboardParticleSystem/BillboardParticle.ts"],"sourcesContent":["import {AParticle3D} from \"../../../../anigraph/physics/AParticle3D\";\nimport {Color, V3, Vec3, Quaternion} from \"../../../../anigraph\";\n\n\n/**\n * A particle subclass for you to customize\n */\nexport class BillboardParticle extends AParticle3D{\n    color!:Color;\n    t0:number=0;\n    right!:Vec3;\n    sinOffset!:number;\n\n    constructor(position?:Vec3, velocity?:Vec3, mass?:number, size?:number, color?:Color) {\n        super(position, velocity, mass, size);\n        this.color=color??Color.FromString(\"#00ff00\");\n        this.right=V3(1,0,0);\n    }\n\n    updateVelocity(t:number, timePassed:number){\n        this.right = this.right.getRotatedByQuaternion(Quaternion.RotationY((Math.random() - .5) * 10 * timePassed));\n\n        let sineRotation = Quaternion.FromRotationBetweenTwoVectors(V3(1,0,0), this.right);\n        this.velocity = V3(Math.cos(4 * t + this.sinOffset), 1, 0).getRotatedByQuaternion(sineRotation);\n    }\n}\n"],"mappings":"AAAA,SAAQA,WAAW,QAAO,0CAA0C;AACpE,SAAQC,KAAK,EAAEC,EAAE,EAAQC,UAAU,QAAO,sBAAsB;;AAGhE;AACA;AACA;AACA,OAAO,MAAMC,iBAAiB,SAASJ,WAAW;EAM9CK,WAAW,CAACC,QAAc,EAAEC,QAAc,EAAEC,IAAY,EAAEC,IAAY,EAAEC,KAAY,EAAE;IAClF,KAAK,CAACJ,QAAQ,EAAEC,QAAQ,EAAEC,IAAI,EAAEC,IAAI,CAAC;IAAC,KAN1CC,KAAK;IAAA,KACLC,EAAE,GAAQ,CAAC;IAAA,KACXC,KAAK;IAAA,KACLC,SAAS;IAIL,IAAI,CAACH,KAAK,GAACA,KAAK,aAALA,KAAK,cAALA,KAAK,GAAET,KAAK,CAACa,UAAU,CAAC,SAAS,CAAC;IAC7C,IAAI,CAACF,KAAK,GAACV,EAAE,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC;EACxB;EAEAa,cAAc,CAACC,CAAQ,EAAEC,UAAiB,EAAC;IACvC,IAAI,CAACL,KAAK,GAAG,IAAI,CAACA,KAAK,CAACM,sBAAsB,CAACf,UAAU,CAACgB,SAAS,CAAC,CAACC,IAAI,CAACC,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE,GAAGJ,UAAU,CAAC,CAAC;IAE5G,IAAIK,YAAY,GAAGnB,UAAU,CAACoB,6BAA6B,CAACrB,EAAE,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,EAAE,IAAI,CAACU,KAAK,CAAC;IAClF,IAAI,CAACL,QAAQ,GAAGL,EAAE,CAACkB,IAAI,CAACI,GAAG,CAAC,CAAC,GAAGR,CAAC,GAAG,IAAI,CAACH,SAAS,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAACK,sBAAsB,CAACI,YAAY,CAAC;EACnG;AACJ"},"metadata":{},"sourceType":"module"}