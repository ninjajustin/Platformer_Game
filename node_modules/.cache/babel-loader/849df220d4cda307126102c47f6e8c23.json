{"ast":null,"code":"var _dec, _class, _class2, _dec2, _class3;\nimport { Precision } from \"../Precision\";\nimport assert from \"assert\";\nimport { Random } from \"../Random\";\nimport { ASerializable } from \"../../base\";\nexport let VectorBase = (_dec = ASerializable(\"Vector\"), _dec(_class = (_class2 = class VectorBase {\n  /*\n   * Vector can be constructed with:\n   * new Vector()\n   * new Vector(x, y, ...)\n   * new Vector([x,y, ...]])\n   * */\n\n  constructor() {\n    this.elements = [];\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    // common logic constructor\n    if (args.length === 0) {\n      this._setToDefault();\n      return;\n    } else {\n      if (Array.isArray(args[0])) {\n        this.setElements(args[0]);\n      } else {\n        this.setElements(args);\n      }\n    }\n  }\n  get x() {\n    return this.elements[0];\n  }\n  set x(val) {\n    this.elements[0] = val;\n  }\n  get y() {\n    return this.elements[1];\n  }\n  set y(val) {\n    this.elements[1] = val;\n  }\n  get nDimensions() {\n    return this.elements.length;\n  }\n  _setToDefault() {\n    this.elements = [];\n  }\n\n  /**\n   *\n   * @returns {number}\n   * @constructor\n   */\n  L2() {\n    return Math.sqrt(this.dot(this));\n  }\n\n  /**\n   * Return true if this.elements are within precision equal to other.elements\n   * @param other\n   */\n  isEqualTo(other, tolerance) {\n    if (this.nDimensions !== other.elements.length) {\n      return false;\n    }\n    let epsilon = tolerance !== undefined ? tolerance : Precision.epsilon;\n    var n = this.elements.length;\n    while (n--) {\n      if (Math.abs(this.elements[n] - other.elements[n]) > epsilon) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Returns the dot product of two vectors. Vectors must have equal length.\n   * @param other\n   */\n  dot(other) {\n    assert(this.elements.length === other.elements.length);\n    let n = this.elements.length;\n    var rval = 0;\n    while (n--) {\n      rval += this.elements[n] * other.elements[n];\n    }\n    return rval;\n  }\n\n  /**\n   * Clones the vector\n   */\n  clone() {\n    // var cfunc:any =this.constructor;\n    let cfunc = this.constructor;\n    var copy = new cfunc(this.elements);\n    return copy;\n  }\n\n  /**\n   * Clones the vector\n   */\n  deepCopy() {\n    // var cfunc:any =this.constructor;\n    let cfunc = this.constructor;\n    var copy = new cfunc(this.elements.slice());\n    return copy;\n  }\n\n  /**\n   * Returns a VectorType with each of its elements replaced by fn(e) where e is the corresponding element of this vector\n   * @param fn - function to be run on each element. e is the element value, and i is its index. Should return a new element.\n   * @param context - the context for the function call. In other words, what is to be used as the 'this' variable when running the call.\n   * @returns {VectorType} - Vectgor of the results from running fn on each element of this.elements\n   */\n  getMapped(fn, context) {\n    var elements = [];\n    this.forEach(function (x) {\n      let i = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      elements.push(fn.call(context, x, i));\n    }, context);\n    let cfunc = this.constructor;\n    return new cfunc(elements);\n  }\n\n  /**\n   *\n   * @param fn - function to be executed on each element\n   * @param context context for execution\n   */\n  forEach(fn, context) {\n    var n = this.elements.length;\n    for (let i = 0; i < n; i++) {\n      fn.call(context, this.elements[i], i);\n    }\n  }\n  static RandomVector() {\n    let n = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    let range = arguments.length > 1 ? arguments[1] : undefined;\n    var r = new this(Random.floatArray(n));\n    if (range !== undefined) {\n      r = r.minus(this.Ones(range[0]).times(range[0])).times(range[1] - range[0]);\n    }\n    return r;\n  }\n  static Zeros() {\n    let n = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    let z = new Array(n);\n    for (let i = 0; i < n; ++i) z[i] = 0;\n    var r = new this(z);\n    return r;\n  }\n  static Ones() {\n    let n = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    let z = new Array(n);\n    for (let i = 0; i < n; ++i) z[i] = 1;\n    var r = new this(z);\n    return r;\n  }\n\n  //##################//--Normalize--\\\\##################\n  //<editor-fold desc=\"Normalize\">\n  /**\n   * Normalizes the vector. If the vector already has length 0, then it does nothing.\n   */\n  normalize() {\n    var r = this.L2();\n    if (r === 0 || r === 1.0) {\n      return;\n    }\n    var n = this.elements.length;\n    var rinv = 1.0 / r;\n    for (let i = 0; i < n; i++) {\n      this.elements[i] = this.elements[i] * rinv;\n    }\n  }\n  getNormalized() {\n    var r = this.L2();\n    if (r === 0 || r === 1) {\n      return this.clone();\n    }\n    return this.getMapped(function (x, i) {\n      return x / r;\n    });\n  }\n  getSumOverElements() {\n    let rval = 0;\n    for (let i = 0; i < this.elements.length; i++) {\n      rval = rval + this.elements[i];\n    }\n    return rval;\n  }\n\n  //</editor-fold>\n  //##################\\\\--Normalize--//##################\n\n  //##################//--Arithmetic--\\\\##################\n  //<editor-fold desc=\"Arithmetic\">\n\n  /**\n   * Return a new vector that is the sum of this vector and other\n   * @param other\n   * @return {this}\n   */\n  plus(other) {\n    assert(this.elements.length === other.elements.length);\n    return this.getMapped(function (x, i) {\n      return x + other.elements[i];\n    });\n  }\n\n  /**\n   * Return a new vector that is the difference of this vector and other\n   * @param other\n   * @return {this}\n   */\n  minus(other) {\n    assert(this.elements.length === other.elements.length);\n    return this.getMapped(function (x, i) {\n      return x - other.elements[i];\n    });\n  }\n  timesElementWise(v) {\n    assert(this.elements.length === v.elements.length, \"VECTORS WRONG LENGTHS\");\n    return this.getMapped(function (x, i) {\n      return x * v.elements[i];\n    });\n  }\n\n  /**\n   * Returns this vector multiplied by the scalar k\n   * @param k\n   * @returns {this}\n   */\n  times(k) {\n    return this.getMapped(function (x, i) {\n      return x * k;\n    });\n  }\n\n  /**\n   * Adds the other vector's elements to this vector's elements\n   * @param other\n   */\n  addVector(other) {\n    assert(this.elements.length === other.elements.length);\n    for (let i = 0; i < this.elements.length; i++) {\n      this.elements[i] = this.elements[i] + other.elements[i];\n    }\n    return;\n  }\n\n  /**\n   * Subtracts the other vector's elements from this vector's elements\n   * @param other\n   */\n  subtractVector(other) {\n    assert(this.elements.length === other.elements.length);\n    for (let i = 0; i < this.elements.length; i++) {\n      this.elements[i] = this.elements[i] - other.elements[i];\n    }\n    return;\n  }\n  getRounded() {\n    return this.getMapped(function (x) {\n      return Math.round(x);\n    });\n  }\n  inspect() {\n    return \"[\" + this.elements.join(\", \") + \"]\";\n  }\n  setElements(els) {\n    this.elements = els.slice();\n    return this;\n  }\n  get serializationLabel() {\n    // @ts-ignore\n    return this.constructor._serializationLabel;\n  }\n  sstring() {\n    var rstring = `${this.serializationLabel}:[`;\n    if (this.elements.length === 0) {\n      return rstring + `]`;\n    }\n    rstring = rstring + `${this.elements[0]}`;\n    for (let e = 1; e < this.elements.length; e++) {\n      rstring = rstring + `, ${this.elements[e]}`;\n    }\n    rstring = rstring + \"]\";\n    return rstring;\n  }\n  toJSON() {\n    var rval = {};\n    for (let k in this) {\n      // @ts-ignore\n      rval[k] = this[k];\n    }\n    return rval;\n  }\n}, _class2.N_DIMENSIONS = -1, _class2)) || _class);\nexport let Vector = (_dec2 = ASerializable(\"Vector\"), _dec2(_class3 = class Vector extends VectorBase {\n  static LinSpace(start, stop) {\n    let num = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 10;\n    let endpoint = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    if (num < 0) {\n      throw new Error(`Number of samples, ${num}, must be non-negative.`);\n    }\n    let div = endpoint ? num - 1 : num;\n    let delta = stop - start;\n    let step = delta / div;\n    let y = [];\n    for (let i = 0; i < num; i++) {\n      y.push(start + i * step);\n    }\n    return new VectorBase(y);\n  }\n  getRaisedToPower(exponent) {\n    let cfunc = this.constructor;\n    let elements = [];\n    for (let i = 0; i < this.elements.length; i++) {\n      elements.push(Math.pow(this.elements[i], exponent));\n    }\n    return new cfunc(elements);\n  }\n  fabsmax() {\n    var m = 0;\n    var i = this.elements.length;\n    while (i--) {\n      if (Math.abs(this.elements[i]) > Math.abs(m)) {\n        m = this.elements[i];\n      }\n    }\n    return m;\n  }\n\n  // flatten(){\n  //     return this.elements;\n  // }\n  // static flatten(vecs:Array<Vector|number>):Array<number>;\n  static flatten() {\n    for (var _len2 = arguments.length, vecs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      vecs[_key2] = arguments[_key2];\n    }\n    let rval = [];\n    function f(el) {\n      if (el instanceof Number) {\n        // @ts-ignore\n        rval.push(el);\n        return;\n      } else {\n        assert(Array.isArray(el), `input ${vecs} not flatten-able by Vector.flatten()`);\n        for (let v of el) {\n          if (Array.isArray(v)) {\n            f(v);\n          } else {\n            if (typeof v === \"number\") {\n              rval.push(v);\n            } else if (v instanceof VectorBase) {\n              f(v.elements);\n            }\n          }\n        }\n      }\n    }\n    f(vecs);\n    return rval;\n  }\n}) || _class3);","map":{"version":3,"names":["Precision","assert","Random","ASerializable","VectorBase","constructor","elements","args","length","_setToDefault","Array","isArray","setElements","x","val","y","nDimensions","L2","Math","sqrt","dot","isEqualTo","other","tolerance","epsilon","undefined","n","abs","rval","clone","cfunc","copy","deepCopy","slice","getMapped","fn","context","forEach","i","push","call","RandomVector","range","r","floatArray","minus","Ones","times","Zeros","z","normalize","rinv","getNormalized","getSumOverElements","plus","timesElementWise","v","k","addVector","subtractVector","getRounded","round","inspect","join","els","serializationLabel","_serializationLabel","sstring","rstring","e","toJSON","N_DIMENSIONS","Vector","LinSpace","start","stop","num","endpoint","Error","div","delta","step","getRaisedToPower","exponent","pow","fabsmax","m","flatten","vecs","f","el","Number"],"sources":["/Users/home/Desktop/cs4620-final-project/src/anigraph/math/linalg/VectorBase.ts"],"sourcesContent":["import { Precision } from \"../Precision\";\nimport assert from \"assert\";\nimport { Random } from \"../Random\";\nimport { ASerializable } from \"../../base\";\n\nexport interface VectorType {\n  elements: number[];\n}\n\ninterface ExtendsVector extends VectorBase {}\n\n@ASerializable(\"Vector\")\nexport class VectorBase implements VectorType {\n  /*\n   * Vector can be constructed with:\n   * new Vector()\n   * new Vector(x, y, ...)\n   * new Vector([x,y, ...]])\n   * */\n  static N_DIMENSIONS: number = -1;\n  public elements: number[] = [];\n  public constructor(elements?: Array<number>);\n  public constructor(...args: Array<any>) {\n    // common logic constructor\n    if (args.length === 0) {\n      this._setToDefault();\n      return;\n    } else {\n      if (Array.isArray(args[0])) {\n        this.setElements(args[0]);\n      } else {\n        this.setElements(args);\n      }\n    }\n  }\n\n  get x() {\n    return this.elements[0];\n  }\n  set x(val: number) {\n    this.elements[0] = val;\n  }\n  get y() {\n    return this.elements[1];\n  }\n  set y(val: number) {\n    this.elements[1] = val;\n  }\n\n\n  get nDimensions() {\n    return this.elements.length;\n  }\n\n  _setToDefault() {\n    this.elements = [];\n  }\n\n  /**\n   *\n   * @returns {number}\n   * @constructor\n   */\n  L2() {\n    return Math.sqrt(this.dot(this));\n  }\n\n  /**\n   * Return true if this.elements are within precision equal to other.elements\n   * @param other\n   */\n  isEqualTo(other: VectorType, tolerance?: number) {\n    if (this.nDimensions !== other.elements.length) {\n      return false;\n    }\n    let epsilon: number =\n      tolerance !== undefined ? tolerance : Precision.epsilon;\n    var n: number = this.elements.length;\n    while (n--) {\n      if (Math.abs(this.elements[n] - other.elements[n]) > epsilon) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Returns the dot product of two vectors. Vectors must have equal length.\n   * @param other\n   */\n  dot(other: VectorType) {\n    assert(this.elements.length === other.elements.length);\n    let n: number = this.elements.length;\n    var rval: number = 0;\n    while (n--) {\n      rval += this.elements[n] * other.elements[n];\n    }\n    return rval;\n  }\n\n  /**\n   * Clones the vector\n   */\n  clone(): this {\n    // var cfunc:any =this.constructor;\n    let cfunc: any = this.constructor as any;\n    var copy: this = new cfunc(this.elements);\n    return copy;\n  }\n\n\n  /**\n   * Clones the vector\n   */\n  deepCopy(): this {\n    // var cfunc:any =this.constructor;\n    let cfunc: any = this.constructor as any;\n    var copy: this = new cfunc(this.elements.slice());\n    return copy;\n  }\n\n\n  /**\n   * Returns a VectorType with each of its elements replaced by fn(e) where e is the corresponding element of this vector\n   * @param fn - function to be run on each element. e is the element value, and i is its index. Should return a new element.\n   * @param context - the context for the function call. In other words, what is to be used as the 'this' variable when running the call.\n   * @returns {VectorType} - Vectgor of the results from running fn on each element of this.elements\n   */\n  getMapped(fn: (e: number, i: number) => number, context?: any): this {\n    var elements: number[] = [];\n    this.forEach(function (x: number, i: number = 0) {\n      elements.push(fn.call(context, x, i));\n    }, context);\n\n    let cfunc: any = this.constructor as any;\n    return new cfunc(elements);\n  }\n\n  /**\n   *\n   * @param fn - function to be executed on each element\n   * @param context context for execution\n   */\n  forEach(fn: (e: number, i: number) => any, context: any) {\n    var n = this.elements.length;\n    for (let i = 0; i < n; i++) {\n      fn.call(context, this.elements[i], i);\n    }\n  }\n\n  static RandomVector(n: number = 1, range?:[number,number]) {\n    var r = new this(Random.floatArray(n));\n    if(range !== undefined){\n      r = r.minus(this.Ones(range[0]).times(range[0])).times(range[1]-range[0]);\n    }\n    return r;\n  }\n\n  static Zeros(n: number = 1) {\n    let z = new Array(n);\n    for (let i = 0; i < n; ++i) z[i] = 0;\n    var r = new this(z);\n    return r;\n  }\n\n  static Ones(n: number = 1) {\n    let z = new Array(n);\n    for (let i = 0; i < n; ++i) z[i] = 1;\n    var r = new this(z);\n    return r;\n  }\n\n  //##################//--Normalize--\\\\##################\n  //<editor-fold desc=\"Normalize\">\n  /**\n   * Normalizes the vector. If the vector already has length 0, then it does nothing.\n   */\n  normalize() {\n    var r: number = this.L2();\n    if (r === 0 || r === 1.0) {\n      return;\n    }\n    var n: number = this.elements.length;\n    var rinv: number = 1.0 / r;\n    for (let i = 0; i < n; i++) {\n      this.elements[i] = this.elements[i] * rinv;\n    }\n  }\n\n  getNormalized() {\n    var r = this.L2();\n    if (r === 0 || r === 1) {\n      return this.clone();\n    }\n    return this.getMapped(function (x, i) {\n      return x / r;\n    });\n  }\n\n  getSumOverElements() {\n    let rval = 0;\n    for (let i = 0; i < this.elements.length; i++) {\n      rval = rval + this.elements[i];\n    }\n    return rval;\n  }\n\n  //</editor-fold>\n  //##################\\\\--Normalize--//##################\n\n  //##################//--Arithmetic--\\\\##################\n  //<editor-fold desc=\"Arithmetic\">\n\n  /**\n   * Return a new vector that is the sum of this vector and other\n   * @param other\n   * @return {this}\n   */\n  plus(other: VectorType): this {\n    assert(this.elements.length === other.elements.length);\n    return this.getMapped(function (x, i) {\n      return x + other.elements[i];\n    });\n  }\n\n  /**\n   * Return a new vector that is the difference of this vector and other\n   * @param other\n   * @return {this}\n   */\n  minus(other: VectorType): this {\n    assert(this.elements.length === other.elements.length);\n    return this.getMapped(function (x, i) {\n      return x - other.elements[i];\n    });\n  }\n\n  timesElementWise(v: VectorBase) {\n    assert(this.elements.length === v.elements.length, \"VECTORS WRONG LENGTHS\");\n    return this.getMapped(function (x, i) {\n      return x * v.elements[i];\n    });\n  }\n\n  /**\n   * Returns this vector multiplied by the scalar k\n   * @param k\n   * @returns {this}\n   */\n  times(k: number): this {\n    return this.getMapped(function (x, i) {\n      return x * k;\n    });\n  }\n\n  /**\n   * Adds the other vector's elements to this vector's elements\n   * @param other\n   */\n  addVector(other: VectorType) {\n    assert(this.elements.length === other.elements.length);\n    for (let i = 0; i < this.elements.length; i++) {\n      this.elements[i] = this.elements[i] + other.elements[i];\n    }\n    return;\n  }\n\n  /**\n   * Subtracts the other vector's elements from this vector's elements\n   * @param other\n   */\n  subtractVector(other: VectorType) {\n    assert(this.elements.length === other.elements.length);\n    for (let i = 0; i < this.elements.length; i++) {\n      this.elements[i] = this.elements[i] - other.elements[i];\n    }\n    return;\n  }\n\n\n\n  getRounded(): this {\n    return this.getMapped(function (x) {\n      return Math.round(x);\n    });\n  }\n\n  inspect() {\n    return \"[\" + this.elements.join(\", \") + \"]\";\n  }\n\n  setElements(els: number[]) {\n    this.elements = els.slice();\n    return this;\n  }\n\n  get serializationLabel() {\n    // @ts-ignore\n    return this.constructor._serializationLabel;\n  }\n\n  sstring() {\n    var rstring = `${this.serializationLabel}:[`;\n    if (this.elements.length === 0) {\n      return rstring + `]`;\n    }\n    rstring = rstring + `${this.elements[0]}`;\n    for (let e = 1; e < this.elements.length; e++) {\n      rstring = rstring + `, ${this.elements[e]}`;\n    }\n    rstring = rstring + \"]\";\n    return rstring;\n  }\n\n  toJSON() {\n    var rval: { [name: string]: any } = {};\n    for (let k in this) {\n      // @ts-ignore\n      rval[k] = this[k];\n    }\n    return rval;\n  }\n\n\n\n\n}\n\n\n@ASerializable(\"Vector\")\nexport class Vector extends VectorBase{\n  static LinSpace(start: number, stop: number, num = 10, endpoint = true) {\n    if (num < 0) {\n      throw new Error(`Number of samples, ${num}, must be non-negative.`);\n    }\n    let div = endpoint ? num - 1 : num;\n    let delta = stop - start;\n    let step = delta / div;\n    let y: number[] = [];\n    for (let i = 0; i < num; i++) {\n      y.push(start+i * step);\n    }\n    return new VectorBase(y);\n  }\n  getRaisedToPower(exponent: number) {\n    let cfunc: any = this.constructor as any;\n    let elements: number[] = [];\n    for (let i = 0; i < this.elements.length; i++) {\n      elements.push(Math.pow(this.elements[i], exponent));\n    }\n    return new cfunc(elements);\n  }\n\n  fabsmax() {\n    var m: number = 0;\n    var i: number = this.elements.length;\n    while (i--) {\n      if (Math.abs(this.elements[i]) > Math.abs(m)) {\n        m = this.elements[i];\n      }\n    }\n    return m;\n  }\n\n  // flatten(){\n  //     return this.elements;\n  // }\n  // static flatten(vecs:Array<Vector|number>):Array<number>;\n  static flatten(\n      ...vecs: Array<ExtendsVector | number | any[]>\n  ): Array<number> {\n    let rval: number[] = [];\n    function f(el: Array<ExtendsVector | number | any[]> | number) {\n      if (el instanceof Number) {\n        // @ts-ignore\n        rval.push(el);\n        return;\n      } else {\n        assert(Array.isArray(el), `input ${vecs} not flatten-able by Vector.flatten()`);\n        for (let v of el) {\n          if (Array.isArray(v)) {\n            f(v);\n          } else {\n            if (typeof v === \"number\") {\n              rval.push(v);\n            } else if (v instanceof VectorBase) {\n              f(v.elements);\n            }\n          }\n        }\n      }\n    }\n    f(vecs);\n    return rval;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}