{"ast":null,"code":"import { ASceneModel, Color, DefaultMaterials, GetAppState } from \"../../anigraph\";\nimport { APointLightModel } from \"../../anigraph/scene/lights\";\nlet appState = GetAppState();\nvar BaseSceneModelSubscriptions;\n(function (BaseSceneModelSubscriptions) {\n  BaseSceneModelSubscriptions[\"VIEW_LIGHT_UPDATE\"] = \"VIEW_LIGHT_UPDATE\";\n})(BaseSceneModelSubscriptions || (BaseSceneModelSubscriptions = {}));\nexport class BaseSceneModel extends ASceneModel {\n  constructor() {\n    super(...arguments);\n    this._player = void 0;\n    this.viewLight = void 0;\n  }\n  get player() {\n    return this._player;\n  }\n  set player(v) {\n    this._player = v;\n  }\n  get children() {\n    return this._children;\n  }\n  async PreloadAssets() {\n    await super.PreloadAssets();\n    await this.materials.loadShaderModel(DefaultMaterials.RGBA_SHADER);\n    this.initCamera();\n    this.addChild(this.cameraModel);\n  }\n  initViewLight() {\n    this.viewLight = new APointLightModel(this.camera.pose, Color.FromString(\"#ffffff\"), 1, 1, 1);\n    this.addChild(this.viewLight);\n    this.attachViewLightToCamera();\n  }\n  attachViewLightToCamera() {\n    const self = this;\n    this.subscribe(this.camera.addPoseListener(() => {\n      self.viewLight.setTransform(self.camera.transform);\n    }), BaseSceneModel.BaseSceneModelSubscriptionKeys.VIEW_LIGHT_UPDATE);\n  }\n  detachViewLightFromCamera() {\n    this.unsubscribe(BaseSceneModel.BaseSceneModelSubscriptionKeys.VIEW_LIGHT_UPDATE);\n  }\n\n  // initCamera() {\n  //     this.cameraModel = ACameraModel.CreatePerspectiveFOV(90, 1, 0.01, 10);\n  // }\n}\nBaseSceneModel.BaseSceneModelSubscriptionKeys = BaseSceneModelSubscriptions;","map":{"version":3,"names":["ASceneModel","Color","DefaultMaterials","GetAppState","APointLightModel","appState","BaseSceneModelSubscriptions","BaseSceneModel","_player","viewLight","player","v","children","_children","PreloadAssets","materials","loadShaderModel","RGBA_SHADER","initCamera","addChild","cameraModel","initViewLight","camera","pose","FromString","attachViewLightToCamera","self","subscribe","addPoseListener","setTransform","transform","BaseSceneModelSubscriptionKeys","VIEW_LIGHT_UPDATE","detachViewLightFromCamera","unsubscribe"],"sources":["/Users/home/Desktop/cs4620-final-project/src/app/BaseClasses/BaseSceneModel.ts"],"sourcesContent":["import {ANodeModel3D, ASceneModel, Color, DefaultMaterials, GetAppState} from \"../../anigraph\";\nimport {APointLightModel} from \"../../anigraph/scene/lights\";\nimport {CharacterModel} from \"./CharacterModel\";\n\nlet appState = GetAppState();\n\nenum BaseSceneModelSubscriptions{\n    VIEW_LIGHT_UPDATE=\"VIEW_LIGHT_UPDATE\"\n}\n\nexport abstract class BaseSceneModel extends ASceneModel {\n    static BaseSceneModelSubscriptionKeys=BaseSceneModelSubscriptions;\n\n    // abstract player:ANodeModel3D;\n    abstract _player:CharacterModel;\n    get player(){\n        return this._player;\n    }\n    set player(v:CharacterModel){\n        this._player = v;\n    }\n\n\n    viewLight!:APointLightModel;\n    get children():ANodeModel3D[]{\n        return this._children as ANodeModel3D[];\n    }\n\n    async PreloadAssets() {\n        await super.PreloadAssets();\n        await this.materials.loadShaderModel(DefaultMaterials.RGBA_SHADER)\n        this.initCamera();\n        this.addChild(this.cameraModel);\n    }\n\n    initViewLight(){\n        this.viewLight = new APointLightModel(this.camera.pose, Color.FromString(\"#ffffff\"),1, 1, 1);\n        this.addChild(this.viewLight)\n        this.attachViewLightToCamera();\n    }\n\n    attachViewLightToCamera(){\n        const self = this;\n        this.subscribe(this.camera.addPoseListener(()=>{\n            self.viewLight.setTransform(self.camera.transform);\n        }), BaseSceneModel.BaseSceneModelSubscriptionKeys.VIEW_LIGHT_UPDATE);\n    }\n    detachViewLightFromCamera(){\n        this.unsubscribe(BaseSceneModel.BaseSceneModelSubscriptionKeys.VIEW_LIGHT_UPDATE);\n    }\n\n    // initCamera() {\n    //     this.cameraModel = ACameraModel.CreatePerspectiveFOV(90, 1, 0.01, 10);\n    // }\n\n    abstract initCamera():void;\n\n    abstract timeUpdate(t: number, ...args:any[]): void;\n\n}\n\n"],"mappings":"AAAA,SAAsBA,WAAW,EAAEC,KAAK,EAAEC,gBAAgB,EAAEC,WAAW,QAAO,gBAAgB;AAC9F,SAAQC,gBAAgB,QAAO,6BAA6B;AAG5D,IAAIC,QAAQ,GAAGF,WAAW,EAAE;AAAC,IAExBG,2BAA2B;AAAA,WAA3BA,2BAA2B;EAA3BA,2BAA2B;AAAA,GAA3BA,2BAA2B,KAA3BA,2BAA2B;AAIhC,OAAO,MAAeC,cAAc,SAASP,WAAW,CAAC;EAAA;IAAA;IAAA,KAI5CQ,OAAO;IAAA,KAShBC,SAAS;EAAA;EART,IAAIC,MAAM,GAAE;IACR,OAAO,IAAI,CAACF,OAAO;EACvB;EACA,IAAIE,MAAM,CAACC,CAAgB,EAAC;IACxB,IAAI,CAACH,OAAO,GAAGG,CAAC;EACpB;EAIA,IAAIC,QAAQ,GAAiB;IACzB,OAAO,IAAI,CAACC,SAAS;EACzB;EAEA,MAAMC,aAAa,GAAG;IAClB,MAAM,KAAK,CAACA,aAAa,EAAE;IAC3B,MAAM,IAAI,CAACC,SAAS,CAACC,eAAe,CAACd,gBAAgB,CAACe,WAAW,CAAC;IAClE,IAAI,CAACC,UAAU,EAAE;IACjB,IAAI,CAACC,QAAQ,CAAC,IAAI,CAACC,WAAW,CAAC;EACnC;EAEAC,aAAa,GAAE;IACX,IAAI,CAACZ,SAAS,GAAG,IAAIL,gBAAgB,CAAC,IAAI,CAACkB,MAAM,CAACC,IAAI,EAAEtB,KAAK,CAACuB,UAAU,CAAC,SAAS,CAAC,EAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IAC5F,IAAI,CAACL,QAAQ,CAAC,IAAI,CAACV,SAAS,CAAC;IAC7B,IAAI,CAACgB,uBAAuB,EAAE;EAClC;EAEAA,uBAAuB,GAAE;IACrB,MAAMC,IAAI,GAAG,IAAI;IACjB,IAAI,CAACC,SAAS,CAAC,IAAI,CAACL,MAAM,CAACM,eAAe,CAAC,MAAI;MAC3CF,IAAI,CAACjB,SAAS,CAACoB,YAAY,CAACH,IAAI,CAACJ,MAAM,CAACQ,SAAS,CAAC;IACtD,CAAC,CAAC,EAAEvB,cAAc,CAACwB,8BAA8B,CAACC,iBAAiB,CAAC;EACxE;EACAC,yBAAyB,GAAE;IACvB,IAAI,CAACC,WAAW,CAAC3B,cAAc,CAACwB,8BAA8B,CAACC,iBAAiB,CAAC;EACrF;;EAEA;EACA;EACA;AAMJ;AAjDsBzB,cAAc,CACzBwB,8BAA8B,GAACzB,2BAA2B"},"metadata":{},"sourceType":"module"}