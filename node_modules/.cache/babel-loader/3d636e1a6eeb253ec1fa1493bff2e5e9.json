{"ast":null,"code":"import * as THREE from \"three\";\nimport { AGraphicElement, ANodeView, NodeTransform3D } from \"../../../../../anigraph\";\nexport class ExampleParticleSystemView extends ANodeView {\n  constructor() {\n    super(...arguments);\n    this.particleGeometry = void 0;\n    this.particleGraphics = [];\n  }\n  /**\n   * We are overriding the get model function so that the type of this.model will be an ExampleParticleSystemModel.\n   * @returns {ExampleParticleSystemModel}\n   */\n  get model() {\n    return this._model;\n  }\n  init() {\n    this.particleGeometry = new THREE.SphereBufferGeometry(1);\n    const self = this;\n    this.subscribe(this.model.addParticlesListener(() => {\n      self.update();\n    }));\n    for (let p of this.model.particles) {\n      this.addParticleGraphic(p);\n    }\n    this.setTransform(this.model.transform);\n  }\n  addParticleGraphic(p) {\n    let pel = AGraphicElement.Create(this.particleGeometry, this.model.material);\n    this.particleGraphics.push(pel);\n    let particleTransform = new NodeTransform3D(p.position, undefined, p.radius);\n    pel.setTransform(particleTransform);\n    this.addGraphic(pel);\n  }\n  update() {\n    if (this.model.particles.length >= this.particleGraphics.length) {\n      for (let pi = 0; pi < this.model.particles.length; pi++) {\n        let p = this.model.particles[pi];\n        if (pi < this.particleGraphics.length) {\n          this.particleGraphics[pi].setTransform(new NodeTransform3D(this.model.transform.appliedToPoint(p.position), undefined, p.radius));\n        } else {\n          this.addParticleGraphic(p);\n        }\n      }\n    } else {\n      for (let killi = this.model.particles.length; killi < this.particleGraphics.length; killi++) {\n        this.disposeGraphic(this.particleGraphics[killi]);\n      }\n      for (let pi = 0; pi < this.model.particles.length; pi++) {\n        let p = this.model.particles[pi];\n        this.particleGraphics[pi].setTransform(new NodeTransform3D(p.position, undefined, p.radius));\n      }\n    }\n    this.setTransform(this.model.transform);\n  }\n}","map":{"version":3,"names":["THREE","AGraphicElement","ANodeView","NodeTransform3D","ExampleParticleSystemView","particleGeometry","particleGraphics","model","_model","init","SphereBufferGeometry","self","subscribe","addParticlesListener","update","p","particles","addParticleGraphic","setTransform","transform","pel","Create","material","push","particleTransform","position","undefined","radius","addGraphic","length","pi","appliedToPoint","killi","disposeGraphic"],"sources":["/Users/home/Desktop/cs4620-final-project/src/app/main/Nodes/ExampleNodes/ExampleParticleSystemNode/ExampleParticleSystemView.ts"],"sourcesContent":["import * as THREE from \"three\";\nimport {AGraphicElement, ANodeView, NodeTransform3D} from \"../../../../../anigraph\";\nimport {ExampleParticleSystemModel} from \"./ExampleParticleSystemModel\";\nimport {SphereParticle} from \"./SphereParticle\";\n\nexport class ExampleParticleSystemView extends ANodeView{\n    particleGeometry!:THREE.BufferGeometry;\n    particleGraphics:AGraphicElement[]=[];\n\n    /**\n     * We are overriding the get model function so that the type of this.model will be an ExampleParticleSystemModel.\n     * @returns {ExampleParticleSystemModel}\n     */\n    get model():ExampleParticleSystemModel{\n        return this._model as ExampleParticleSystemModel;\n    }\n\n    init(): void {\n        this.particleGeometry = new THREE.SphereBufferGeometry(1);\n        const self = this;\n        this.subscribe(this.model.addParticlesListener(()=>{\n            self.update();\n        }))\n\n        for(let p of this.model.particles){\n            this.addParticleGraphic(p);\n        }\n        this.setTransform(this.model.transform);\n    }\n\n\n\n    addParticleGraphic(p:SphereParticle){\n        let pel = AGraphicElement.Create(this.particleGeometry, this.model.material);\n        this.particleGraphics.push(pel);\n        let particleTransform = new NodeTransform3D(p.position, undefined, p.radius);\n        pel.setTransform(particleTransform);\n        this.addGraphic(pel)\n    }\n\n    update(...args: any[]): void {\n        if(this.model.particles.length>=this.particleGraphics.length){\n            for(let pi=0;pi<this.model.particles.length;pi++){\n                let p = this.model.particles[pi];\n                if(pi<this.particleGraphics.length){\n                    this.particleGraphics[pi].setTransform(new NodeTransform3D(\n                        this.model.transform.appliedToPoint(p.position),\n                        undefined,\n                        p.radius)\n                    );\n                }else{\n                    this.addParticleGraphic(p);\n                }\n            }\n        }else{\n            for(let killi=this.model.particles.length;killi<this.particleGraphics.length;killi++){\n                this.disposeGraphic(this.particleGraphics[killi]);\n            }\n            for(let pi=0;pi<this.model.particles.length;pi++) {\n                let p = this.model.particles[pi];\n                this.particleGraphics[pi].setTransform(new NodeTransform3D(p.position, undefined, p.radius));\n            }\n\n        }\n        this.setTransform(this.model.transform);\n    }\n\n}\n"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAAQC,eAAe,EAAEC,SAAS,EAAEC,eAAe,QAAO,yBAAyB;AAInF,OAAO,MAAMC,yBAAyB,SAASF,SAAS;EAAA;IAAA;IAAA,KACpDG,gBAAgB;IAAA,KAChBC,gBAAgB,GAAmB,EAAE;EAAA;EAErC;AACJ;AACA;AACA;EACI,IAAIC,KAAK,GAA6B;IAClC,OAAO,IAAI,CAACC,MAAM;EACtB;EAEAC,IAAI,GAAS;IACT,IAAI,CAACJ,gBAAgB,GAAG,IAAIL,KAAK,CAACU,oBAAoB,CAAC,CAAC,CAAC;IACzD,MAAMC,IAAI,GAAG,IAAI;IACjB,IAAI,CAACC,SAAS,CAAC,IAAI,CAACL,KAAK,CAACM,oBAAoB,CAAC,MAAI;MAC/CF,IAAI,CAACG,MAAM,EAAE;IACjB,CAAC,CAAC,CAAC;IAEH,KAAI,IAAIC,CAAC,IAAI,IAAI,CAACR,KAAK,CAACS,SAAS,EAAC;MAC9B,IAAI,CAACC,kBAAkB,CAACF,CAAC,CAAC;IAC9B;IACA,IAAI,CAACG,YAAY,CAAC,IAAI,CAACX,KAAK,CAACY,SAAS,CAAC;EAC3C;EAIAF,kBAAkB,CAACF,CAAgB,EAAC;IAChC,IAAIK,GAAG,GAAGnB,eAAe,CAACoB,MAAM,CAAC,IAAI,CAAChB,gBAAgB,EAAE,IAAI,CAACE,KAAK,CAACe,QAAQ,CAAC;IAC5E,IAAI,CAAChB,gBAAgB,CAACiB,IAAI,CAACH,GAAG,CAAC;IAC/B,IAAII,iBAAiB,GAAG,IAAIrB,eAAe,CAACY,CAAC,CAACU,QAAQ,EAAEC,SAAS,EAAEX,CAAC,CAACY,MAAM,CAAC;IAC5EP,GAAG,CAACF,YAAY,CAACM,iBAAiB,CAAC;IACnC,IAAI,CAACI,UAAU,CAACR,GAAG,CAAC;EACxB;EAEAN,MAAM,GAAuB;IACzB,IAAG,IAAI,CAACP,KAAK,CAACS,SAAS,CAACa,MAAM,IAAE,IAAI,CAACvB,gBAAgB,CAACuB,MAAM,EAAC;MACzD,KAAI,IAAIC,EAAE,GAAC,CAAC,EAACA,EAAE,GAAC,IAAI,CAACvB,KAAK,CAACS,SAAS,CAACa,MAAM,EAACC,EAAE,EAAE,EAAC;QAC7C,IAAIf,CAAC,GAAG,IAAI,CAACR,KAAK,CAACS,SAAS,CAACc,EAAE,CAAC;QAChC,IAAGA,EAAE,GAAC,IAAI,CAACxB,gBAAgB,CAACuB,MAAM,EAAC;UAC/B,IAAI,CAACvB,gBAAgB,CAACwB,EAAE,CAAC,CAACZ,YAAY,CAAC,IAAIf,eAAe,CACtD,IAAI,CAACI,KAAK,CAACY,SAAS,CAACY,cAAc,CAAChB,CAAC,CAACU,QAAQ,CAAC,EAC/CC,SAAS,EACTX,CAAC,CAACY,MAAM,CAAC,CACZ;QACL,CAAC,MAAI;UACD,IAAI,CAACV,kBAAkB,CAACF,CAAC,CAAC;QAC9B;MACJ;IACJ,CAAC,MAAI;MACD,KAAI,IAAIiB,KAAK,GAAC,IAAI,CAACzB,KAAK,CAACS,SAAS,CAACa,MAAM,EAACG,KAAK,GAAC,IAAI,CAAC1B,gBAAgB,CAACuB,MAAM,EAACG,KAAK,EAAE,EAAC;QACjF,IAAI,CAACC,cAAc,CAAC,IAAI,CAAC3B,gBAAgB,CAAC0B,KAAK,CAAC,CAAC;MACrD;MACA,KAAI,IAAIF,EAAE,GAAC,CAAC,EAACA,EAAE,GAAC,IAAI,CAACvB,KAAK,CAACS,SAAS,CAACa,MAAM,EAACC,EAAE,EAAE,EAAE;QAC9C,IAAIf,CAAC,GAAG,IAAI,CAACR,KAAK,CAACS,SAAS,CAACc,EAAE,CAAC;QAChC,IAAI,CAACxB,gBAAgB,CAACwB,EAAE,CAAC,CAACZ,YAAY,CAAC,IAAIf,eAAe,CAACY,CAAC,CAACU,QAAQ,EAAEC,SAAS,EAAEX,CAAC,CAACY,MAAM,CAAC,CAAC;MAChG;IAEJ;IACA,IAAI,CAACT,YAAY,CAAC,IAAI,CAACX,KAAK,CAACY,SAAS,CAAC;EAC3C;AAEJ"},"metadata":{},"sourceType":"module"}