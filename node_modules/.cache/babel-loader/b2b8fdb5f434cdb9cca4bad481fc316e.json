{"ast":null,"code":"export let BasicInteractionModes;\n(function (BasicInteractionModes) {\n  BasicInteractionModes[\"Default\"] = \"Default\";\n})(BasicInteractionModes || (BasicInteractionModes = {}));\nexport let PointerLockEvents;\n\n// export interface InteractionModeCallbacks {\n//     onKeyDown?:CallbackType|undefined;\n//     onKeyUp?:CallbackType|undefined;\n//     onMouseMove?:CallbackType|undefined;\n//     onWheelMove?:AWheelInteractionCallback|undefined;\n//     onDragStart?:ADragInteractionCallback|undefined;\n//     onDragMove?:ADragInteractionCallback|undefined;\n//     onDragEnd?:ADragInteractionCallback|undefined;\n// }\n(function (PointerLockEvents) {\n  PointerLockEvents[\"Lock\"] = \"PointerLock_Lock\";\n  PointerLockEvents[\"Unlock\"] = \"PointerLock_Unlock\";\n})(PointerLockEvents || (PointerLockEvents = {}));\nexport function SetInteractionCallbacks(owner, interactionCallbacks, bind) {\n  if ('onKeyDown' in interactionCallbacks && interactionCallbacks.onKeyDown) {\n    owner.onKeyDown = interactionCallbacks.onKeyDown;\n    if (bind) {\n      owner.onKeyDown = owner.onKeyDown.bind(owner);\n    }\n  }\n  if ('onKeyUp' in interactionCallbacks && interactionCallbacks.onKeyUp) {\n    owner.onKeyUp = interactionCallbacks.onKeyUp;\n    if (bind) {\n      owner.onKeyUp = owner.onKeyUp.bind(owner);\n    }\n  }\n  if ('onMouseMove' in interactionCallbacks && interactionCallbacks.onMouseMove) {\n    owner.onMouseMove = interactionCallbacks.onMouseMove;\n    if (bind) {\n      owner.onMouseMove = owner.onMouseMove.bind(owner);\n    }\n  }\n  if ('onWheelMove' in interactionCallbacks && interactionCallbacks.onWheelMove) {\n    owner.onWheelMove = interactionCallbacks.onWheelMove;\n    if (bind) {\n      owner.onWheelMove = owner.onWheelMove.bind(owner);\n    }\n  }\n  if ('onDragStart' in interactionCallbacks && interactionCallbacks.onDragStart) {\n    owner.onDragStart = interactionCallbacks.onDragStart;\n    if (bind) {\n      owner.onDragStart = owner.onDragStart.bind(owner);\n    }\n  }\n  if ('onDragMove' in interactionCallbacks && interactionCallbacks.onDragMove) {\n    owner.onDragMove = interactionCallbacks.onDragMove;\n    if (bind) {\n      owner.onDragMove = owner.onDragMove.bind(owner);\n    }\n  }\n  if ('onDragEnd' in interactionCallbacks && interactionCallbacks.onDragEnd) {\n    owner.onDragEnd = interactionCallbacks.onDragEnd;\n    if (bind) {\n      owner.onDragEnd = owner.onDragEnd.bind(owner);\n    }\n  }\n  if ('onClick' in interactionCallbacks && interactionCallbacks.onClick) {\n    owner.onClick = interactionCallbacks.onClick;\n    if (bind) {\n      owner.onClick = owner.onClick.bind(owner);\n    }\n  }\n  if ('afterActivate' in interactionCallbacks && interactionCallbacks.afterActivate) {\n    owner.afterActivate = interactionCallbacks.afterActivate;\n    if (bind) {\n      owner.afterActivate = owner.afterActivate.bind(owner);\n    }\n  }\n  if ('afterDeactivate' in interactionCallbacks && interactionCallbacks.afterDeactivate) {\n    owner.afterDeactivate = interactionCallbacks.afterDeactivate;\n    if (bind) {\n      owner.afterDeactivate = owner.afterDeactivate.bind(owner);\n    }\n  }\n  if ('beforeActivate' in interactionCallbacks && interactionCallbacks.beforeActivate) {\n    owner.beforeActivate = interactionCallbacks.beforeActivate;\n    if (bind) {\n      owner.beforeActivate = owner.beforeActivate.bind(owner);\n    }\n  }\n  if ('beforeDeactivate' in interactionCallbacks && interactionCallbacks.beforeDeactivate) {\n    owner.beforeDeactivate = interactionCallbacks.beforeDeactivate;\n    if (bind) {\n      owner.beforeDeactivate = owner.beforeDeactivate.bind(owner);\n    }\n  }\n  if ('dispose' in interactionCallbacks && interactionCallbacks.dispose) {\n    owner.dispose = interactionCallbacks.dispose;\n    if (bind) {\n      owner.dispose = owner.dispose.bind(owner);\n    }\n  }\n}\n_c = SetInteractionCallbacks;\nexport class AInteractionMode {\n  get owner() {\n    return this._owner;\n  }\n  setModeState(name, value) {\n    this.modeState[name] = value;\n  }\n  getModeState(name) {\n    return this.modeState[name];\n  }\n  clearModeState() {\n    this.modeState = {};\n  }\n  afterActivate() {}\n  afterDeactivate() {}\n  beforeActivate() {}\n  beforeDeactivate() {}\n  // afterActivate(...args:any[]){if(this._afterActivate) {this._afterActivate(...args);}}\n  // afterDeactivate(...args:any[]){if(this._afterDeactivate) {this._afterDeactivate(...args);}}\n  // beforeActivate(...args:any[]){\n  //     if(this._beforeActivate) {\n  //         this._beforeActivate(...args);\n  //     }\n  // }\n  // beforeDeactivate(...args:any[]){if(this._beforeDeactivate) {this._beforeDeactivate(...args);}}\n\n  // bindMethods(){\n  //     this.afterActivate = this.afterActivate.bind(this);\n  //     this.afterDeactivate = this.afterDeactivate.bind(this);\n  //     this.beforeActivate = this.beforeActivate.bind(this);\n  //     this.beforeDeactivate = this.beforeDeactivate.bind(this);\n  // }\n\n  constructor(name, owner) {\n    this.name = void 0;\n    this._owner = void 0;\n    this.interactions = [];\n    this.modeState = {};\n    this.active = false;\n    this.isGUISelectable = true;\n    if (name) this.name = name;\n    if (owner) this._owner = owner;\n    // this.bindMethods();\n  }\n\n  /**\n   * adds interaction, and sets its owner to be this owner\n   * @param interaction\n   */\n  addInteraction(interaction) {\n    // if(this.active){\n    //     throw new Error(\"Cannot add interactions to an active interaction mode!\");\n    // }\n    this.interactions.push(interaction);\n    if (this.active && !interaction.active) {\n      interaction.activate();\n    }\n    if (!this.active && interaction.active) {\n      interaction.deactivate();\n    }\n    if (interaction.owner) {\n      throw new Error('interaction already has owner!');\n    }\n    interaction.owner = this.owner;\n  }\n  deactivate() {\n    this.beforeDeactivate();\n    for (let interaction of this.interactions) {\n      interaction.deactivate();\n    }\n    this.clearModeState();\n    this.afterDeactivate();\n    this.active = false;\n  }\n  activate() {\n    this.beforeActivate();\n    for (let interaction of this.interactions) {\n      interaction.activate();\n    }\n    this.afterActivate();\n    this.active = true;\n  }\n  timeUpdate(t) {}\n}\nvar _c;\n$RefreshReg$(_c, \"SetInteractionCallbacks\");","map":{"version":3,"names":["BasicInteractionModes","PointerLockEvents","SetInteractionCallbacks","owner","interactionCallbacks","bind","onKeyDown","onKeyUp","onMouseMove","onWheelMove","onDragStart","onDragMove","onDragEnd","onClick","afterActivate","afterDeactivate","beforeActivate","beforeDeactivate","dispose","AInteractionMode","_owner","setModeState","name","value","modeState","getModeState","clearModeState","constructor","interactions","active","isGUISelectable","addInteraction","interaction","push","activate","deactivate","Error","timeUpdate","t"],"sources":["/Users/home/Desktop/College/Fall 2022/CS_4620/cs4620-final-project/src/anigraph/interaction/AInteractionMode.ts"],"sourcesContent":["import {AInteraction} from \"./AInteraction\";\nimport {HasInteractions} from \"../base/amvc/HasInteractions\";\nimport {CallbackType} from \"../basictypes\";\nimport {AWheelInteractionCallback} from \"./AWheelInteraction\";\nimport {ADragInteractionCallback} from \"./ADragInteraction\";\nimport {AClickInteraction} from \"./AClickInteraction\";\n\nexport interface AInteractionModeInterface{\n    interactions:AInteraction;\n}\n\nexport enum BasicInteractionModes{\n    Default='Default'\n}\n\n\nexport enum PointerLockEvents{\n    Lock=\"PointerLock_Lock\",\n    Unlock=\"PointerLock_Unlock\",\n}\n\n\n// export interface InteractionModeCallbacks {\n//     onKeyDown?:CallbackType|undefined;\n//     onKeyUp?:CallbackType|undefined;\n//     onMouseMove?:CallbackType|undefined;\n//     onWheelMove?:AWheelInteractionCallback|undefined;\n//     onDragStart?:ADragInteractionCallback|undefined;\n//     onDragMove?:ADragInteractionCallback|undefined;\n//     onDragEnd?:ADragInteractionCallback|undefined;\n// }\nexport interface HasInteractionModeCallbacks {\n    onKeyDown?:CallbackType|undefined;\n    onKeyUp?:CallbackType|undefined;\n    onMouseMove?:CallbackType|undefined;\n    onWheelMove?:AWheelInteractionCallback|undefined;\n    onDragStart?:ADragInteractionCallback|undefined;\n    onDragMove?:ADragInteractionCallback|undefined;\n    onDragEnd?:ADragInteractionCallback|undefined;\n    onClick?:CallbackType|undefined;\n    afterActivate?:CallbackType|undefined;\n    afterDeactivate?:CallbackType|undefined;\n    beforeActivate?:CallbackType|undefined;\n    beforeDeactivate?:CallbackType|undefined;\n    dispose?:CallbackType|undefined;\n}\n\nexport function SetInteractionCallbacks(owner:HasInteractionModeCallbacks, interactionCallbacks:HasInteractionModeCallbacks, bind:boolean){\n    if ('onKeyDown' in interactionCallbacks && interactionCallbacks.onKeyDown) {\n        owner.onKeyDown = interactionCallbacks.onKeyDown;\n        if(bind) {\n            owner.onKeyDown = owner.onKeyDown.bind(owner);\n        }\n    }\n    if ('onKeyUp' in interactionCallbacks && interactionCallbacks.onKeyUp) {\n        owner.onKeyUp = interactionCallbacks.onKeyUp;\n        if(bind) {\n            owner.onKeyUp = owner.onKeyUp.bind(owner);\n        }\n    }\n    if ('onMouseMove' in interactionCallbacks && interactionCallbacks.onMouseMove) {\n        owner.onMouseMove = interactionCallbacks.onMouseMove;\n        if(bind) {\n            owner.onMouseMove = owner.onMouseMove.bind(owner);\n        }\n    }\n    if ('onWheelMove' in interactionCallbacks && interactionCallbacks.onWheelMove) {\n        owner.onWheelMove = interactionCallbacks.onWheelMove;\n        if(bind){\n            owner.onWheelMove = owner.onWheelMove.bind(owner);\n        }\n    }\n    if ('onDragStart' in interactionCallbacks && interactionCallbacks.onDragStart) {\n        owner.onDragStart = interactionCallbacks.onDragStart;\n        if(bind){\n            owner.onDragStart = owner.onDragStart.bind(owner);\n        }\n    }\n    if ('onDragMove' in interactionCallbacks && interactionCallbacks.onDragMove) {\n        owner.onDragMove = interactionCallbacks.onDragMove;\n        if(bind){\n            owner.onDragMove = owner.onDragMove.bind(owner);\n        }\n    }\n    if ('onDragEnd' in interactionCallbacks && interactionCallbacks.onDragEnd) {\n        owner.onDragEnd = interactionCallbacks.onDragEnd;\n        if(bind){\n            owner.onDragEnd = owner.onDragEnd.bind(owner);\n        }\n    }\n\n    if('onClick' in interactionCallbacks && interactionCallbacks.onClick){\n        owner.onClick = interactionCallbacks.onClick;\n        if(bind){\n            owner.onClick = owner.onClick.bind(owner);\n        }\n    }\n\n\n    if ('afterActivate' in interactionCallbacks && interactionCallbacks.afterActivate) {\n        owner.afterActivate = interactionCallbacks.afterActivate;\n        if(bind){\n            owner.afterActivate = owner.afterActivate.bind(owner);\n        }\n    }\n    if ('afterDeactivate' in interactionCallbacks && interactionCallbacks.afterDeactivate) {\n        owner.afterDeactivate = interactionCallbacks.afterDeactivate;\n        if(bind){\n            owner.afterDeactivate = owner.afterDeactivate.bind(owner);\n        }\n    }\n\n    if ('beforeActivate' in interactionCallbacks && interactionCallbacks.beforeActivate) {\n        owner.beforeActivate = interactionCallbacks.beforeActivate;\n        if(bind){\n            owner.beforeActivate = owner.beforeActivate.bind(owner);\n        }\n    }\n\n    if ('beforeDeactivate' in interactionCallbacks && interactionCallbacks.beforeDeactivate) {\n        owner.beforeDeactivate = interactionCallbacks.beforeDeactivate;\n        if(bind){\n            owner.beforeDeactivate = owner.beforeDeactivate.bind(owner);\n        }\n    }\n\n    if ('dispose' in interactionCallbacks && interactionCallbacks.dispose) {\n        owner.dispose = interactionCallbacks.dispose;\n        if(bind){\n            owner.dispose = owner.dispose.bind(owner);\n        }\n    }\n\n}\n\n\nexport class AInteractionMode{\n    public name!:string;\n    public _owner!:HasInteractions;\n\n    get owner(){\n        return this._owner;\n    }\n\n\n    protected interactions:AInteraction[]=[];\n    // protected _afterActivate!:(...args:any[])=>any;\n    // protected _afterDeactivate!:(...args:any[])=>any\n    // protected _beforeActivate!:(...args:any[])=>any;\n    // protected _beforeDeactivate!:(...args:any[])=>any\n\n    public modeState:{[name:string]:any}={};\n    setModeState(name:string, value:any){this.modeState[name]=value;}\n    getModeState(name:string){return this.modeState[name];}\n    clearModeState(){this.modeState={};}\n\n\n\n    afterActivate(...args:any[]){}\n    afterDeactivate(...args:any[]){}\n    beforeActivate(...args:any[]){}\n    beforeDeactivate(...args:any[]){}\n    // afterActivate(...args:any[]){if(this._afterActivate) {this._afterActivate(...args);}}\n    // afterDeactivate(...args:any[]){if(this._afterDeactivate) {this._afterDeactivate(...args);}}\n    // beforeActivate(...args:any[]){\n    //     if(this._beforeActivate) {\n    //         this._beforeActivate(...args);\n    //     }\n    // }\n    // beforeDeactivate(...args:any[]){if(this._beforeDeactivate) {this._beforeDeactivate(...args);}}\n\n    // bindMethods(){\n    //     this.afterActivate = this.afterActivate.bind(this);\n    //     this.afterDeactivate = this.afterDeactivate.bind(this);\n    //     this.beforeActivate = this.beforeActivate.bind(this);\n    //     this.beforeDeactivate = this.beforeDeactivate.bind(this);\n    // }\n\n    public active:boolean=false;\n    public isGUISelectable:boolean=true;\n\n    constructor(name?:string, owner?:HasInteractions, ...args:any[]){\n        if(name) this.name = name;\n        if(owner) this._owner = owner;\n        // this.bindMethods();\n    }\n\n    /**\n     * adds interaction, and sets its owner to be this owner\n     * @param interaction\n     */\n    addInteraction(interaction:AInteraction){\n        // if(this.active){\n        //     throw new Error(\"Cannot add interactions to an active interaction mode!\");\n        // }\n        this.interactions.push(interaction);\n        if(this.active && !interaction.active){\n            interaction.activate();\n        }\n        if(!this.active && interaction.active){\n            interaction.deactivate();\n        }\n        if(interaction.owner){\n            throw new Error('interaction already has owner!');\n        }\n        interaction.owner = this.owner;\n    }\n\n    deactivate(){\n        this.beforeDeactivate();\n        for (let interaction of this.interactions) {\n            interaction.deactivate();\n        }\n        this.clearModeState();\n        this.afterDeactivate();\n        this.active=false;\n    }\n\n    activate(){\n        this.beforeActivate();\n        for (let interaction of this.interactions) {\n            interaction.activate();\n        }\n        this.afterActivate();\n        this.active=true;\n    }\n\n    timeUpdate(t:number, ...args:any[]){\n    }\n}\n\n\n"],"mappings":"AAWA,WAAYA,qBAAqB;AAEhC,WAFWA,qBAAqB;EAArBA,qBAAqB;AAAA,GAArBA,qBAAqB,KAArBA,qBAAqB;AAKjC,WAAYC,iBAAiB;;AAM7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,WAdYA,iBAAiB;EAAjBA,iBAAiB;EAAjBA,iBAAiB;AAAA,GAAjBA,iBAAiB,KAAjBA,iBAAiB;AA+B7B,OAAO,SAASC,uBAAuB,CAACC,KAAiC,EAAEC,oBAAgD,EAAEC,IAAY,EAAC;EACtI,IAAI,WAAW,IAAID,oBAAoB,IAAIA,oBAAoB,CAACE,SAAS,EAAE;IACvEH,KAAK,CAACG,SAAS,GAAGF,oBAAoB,CAACE,SAAS;IAChD,IAAGD,IAAI,EAAE;MACLF,KAAK,CAACG,SAAS,GAAGH,KAAK,CAACG,SAAS,CAACD,IAAI,CAACF,KAAK,CAAC;IACjD;EACJ;EACA,IAAI,SAAS,IAAIC,oBAAoB,IAAIA,oBAAoB,CAACG,OAAO,EAAE;IACnEJ,KAAK,CAACI,OAAO,GAAGH,oBAAoB,CAACG,OAAO;IAC5C,IAAGF,IAAI,EAAE;MACLF,KAAK,CAACI,OAAO,GAAGJ,KAAK,CAACI,OAAO,CAACF,IAAI,CAACF,KAAK,CAAC;IAC7C;EACJ;EACA,IAAI,aAAa,IAAIC,oBAAoB,IAAIA,oBAAoB,CAACI,WAAW,EAAE;IAC3EL,KAAK,CAACK,WAAW,GAAGJ,oBAAoB,CAACI,WAAW;IACpD,IAAGH,IAAI,EAAE;MACLF,KAAK,CAACK,WAAW,GAAGL,KAAK,CAACK,WAAW,CAACH,IAAI,CAACF,KAAK,CAAC;IACrD;EACJ;EACA,IAAI,aAAa,IAAIC,oBAAoB,IAAIA,oBAAoB,CAACK,WAAW,EAAE;IAC3EN,KAAK,CAACM,WAAW,GAAGL,oBAAoB,CAACK,WAAW;IACpD,IAAGJ,IAAI,EAAC;MACJF,KAAK,CAACM,WAAW,GAAGN,KAAK,CAACM,WAAW,CAACJ,IAAI,CAACF,KAAK,CAAC;IACrD;EACJ;EACA,IAAI,aAAa,IAAIC,oBAAoB,IAAIA,oBAAoB,CAACM,WAAW,EAAE;IAC3EP,KAAK,CAACO,WAAW,GAAGN,oBAAoB,CAACM,WAAW;IACpD,IAAGL,IAAI,EAAC;MACJF,KAAK,CAACO,WAAW,GAAGP,KAAK,CAACO,WAAW,CAACL,IAAI,CAACF,KAAK,CAAC;IACrD;EACJ;EACA,IAAI,YAAY,IAAIC,oBAAoB,IAAIA,oBAAoB,CAACO,UAAU,EAAE;IACzER,KAAK,CAACQ,UAAU,GAAGP,oBAAoB,CAACO,UAAU;IAClD,IAAGN,IAAI,EAAC;MACJF,KAAK,CAACQ,UAAU,GAAGR,KAAK,CAACQ,UAAU,CAACN,IAAI,CAACF,KAAK,CAAC;IACnD;EACJ;EACA,IAAI,WAAW,IAAIC,oBAAoB,IAAIA,oBAAoB,CAACQ,SAAS,EAAE;IACvET,KAAK,CAACS,SAAS,GAAGR,oBAAoB,CAACQ,SAAS;IAChD,IAAGP,IAAI,EAAC;MACJF,KAAK,CAACS,SAAS,GAAGT,KAAK,CAACS,SAAS,CAACP,IAAI,CAACF,KAAK,CAAC;IACjD;EACJ;EAEA,IAAG,SAAS,IAAIC,oBAAoB,IAAIA,oBAAoB,CAACS,OAAO,EAAC;IACjEV,KAAK,CAACU,OAAO,GAAGT,oBAAoB,CAACS,OAAO;IAC5C,IAAGR,IAAI,EAAC;MACJF,KAAK,CAACU,OAAO,GAAGV,KAAK,CAACU,OAAO,CAACR,IAAI,CAACF,KAAK,CAAC;IAC7C;EACJ;EAGA,IAAI,eAAe,IAAIC,oBAAoB,IAAIA,oBAAoB,CAACU,aAAa,EAAE;IAC/EX,KAAK,CAACW,aAAa,GAAGV,oBAAoB,CAACU,aAAa;IACxD,IAAGT,IAAI,EAAC;MACJF,KAAK,CAACW,aAAa,GAAGX,KAAK,CAACW,aAAa,CAACT,IAAI,CAACF,KAAK,CAAC;IACzD;EACJ;EACA,IAAI,iBAAiB,IAAIC,oBAAoB,IAAIA,oBAAoB,CAACW,eAAe,EAAE;IACnFZ,KAAK,CAACY,eAAe,GAAGX,oBAAoB,CAACW,eAAe;IAC5D,IAAGV,IAAI,EAAC;MACJF,KAAK,CAACY,eAAe,GAAGZ,KAAK,CAACY,eAAe,CAACV,IAAI,CAACF,KAAK,CAAC;IAC7D;EACJ;EAEA,IAAI,gBAAgB,IAAIC,oBAAoB,IAAIA,oBAAoB,CAACY,cAAc,EAAE;IACjFb,KAAK,CAACa,cAAc,GAAGZ,oBAAoB,CAACY,cAAc;IAC1D,IAAGX,IAAI,EAAC;MACJF,KAAK,CAACa,cAAc,GAAGb,KAAK,CAACa,cAAc,CAACX,IAAI,CAACF,KAAK,CAAC;IAC3D;EACJ;EAEA,IAAI,kBAAkB,IAAIC,oBAAoB,IAAIA,oBAAoB,CAACa,gBAAgB,EAAE;IACrFd,KAAK,CAACc,gBAAgB,GAAGb,oBAAoB,CAACa,gBAAgB;IAC9D,IAAGZ,IAAI,EAAC;MACJF,KAAK,CAACc,gBAAgB,GAAGd,KAAK,CAACc,gBAAgB,CAACZ,IAAI,CAACF,KAAK,CAAC;IAC/D;EACJ;EAEA,IAAI,SAAS,IAAIC,oBAAoB,IAAIA,oBAAoB,CAACc,OAAO,EAAE;IACnEf,KAAK,CAACe,OAAO,GAAGd,oBAAoB,CAACc,OAAO;IAC5C,IAAGb,IAAI,EAAC;MACJF,KAAK,CAACe,OAAO,GAAGf,KAAK,CAACe,OAAO,CAACb,IAAI,CAACF,KAAK,CAAC;IAC7C;EACJ;AAEJ;AAAC,KAtFeD,uBAAuB;AAyFvC,OAAO,MAAMiB,gBAAgB;EAIzB,IAAIhB,KAAK,GAAE;IACP,OAAO,IAAI,CAACiB,MAAM;EACtB;EAUAC,YAAY,CAACC,IAAW,EAAEC,KAAS,EAAC;IAAC,IAAI,CAACC,SAAS,CAACF,IAAI,CAAC,GAACC,KAAK;EAAC;EAChEE,YAAY,CAACH,IAAW,EAAC;IAAC,OAAO,IAAI,CAACE,SAAS,CAACF,IAAI,CAAC;EAAC;EACtDI,cAAc,GAAE;IAAC,IAAI,CAACF,SAAS,GAAC,CAAC,CAAC;EAAC;EAInCV,aAAa,GAAe,CAAC;EAC7BC,eAAe,GAAe,CAAC;EAC/BC,cAAc,GAAe,CAAC;EAC9BC,gBAAgB,GAAe,CAAC;EAChC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAKAU,WAAW,CAACL,IAAY,EAAEnB,KAAsB,EAAgB;IAAA,KA5CzDmB,IAAI;IAAA,KACJF,MAAM;IAAA,KAOHQ,YAAY,GAAgB,EAAE;IAAA,KAMjCJ,SAAS,GAAqB,CAAC,CAAC;IAAA,KA2BhCK,MAAM,GAAS,KAAK;IAAA,KACpBC,eAAe,GAAS,IAAI;IAG/B,IAAGR,IAAI,EAAE,IAAI,CAACA,IAAI,GAAGA,IAAI;IACzB,IAAGnB,KAAK,EAAE,IAAI,CAACiB,MAAM,GAAGjB,KAAK;IAC7B;EACJ;;EAEA;AACJ;AACA;AACA;EACI4B,cAAc,CAACC,WAAwB,EAAC;IACpC;IACA;IACA;IACA,IAAI,CAACJ,YAAY,CAACK,IAAI,CAACD,WAAW,CAAC;IACnC,IAAG,IAAI,CAACH,MAAM,IAAI,CAACG,WAAW,CAACH,MAAM,EAAC;MAClCG,WAAW,CAACE,QAAQ,EAAE;IAC1B;IACA,IAAG,CAAC,IAAI,CAACL,MAAM,IAAIG,WAAW,CAACH,MAAM,EAAC;MAClCG,WAAW,CAACG,UAAU,EAAE;IAC5B;IACA,IAAGH,WAAW,CAAC7B,KAAK,EAAC;MACjB,MAAM,IAAIiC,KAAK,CAAC,gCAAgC,CAAC;IACrD;IACAJ,WAAW,CAAC7B,KAAK,GAAG,IAAI,CAACA,KAAK;EAClC;EAEAgC,UAAU,GAAE;IACR,IAAI,CAAClB,gBAAgB,EAAE;IACvB,KAAK,IAAIe,WAAW,IAAI,IAAI,CAACJ,YAAY,EAAE;MACvCI,WAAW,CAACG,UAAU,EAAE;IAC5B;IACA,IAAI,CAACT,cAAc,EAAE;IACrB,IAAI,CAACX,eAAe,EAAE;IACtB,IAAI,CAACc,MAAM,GAAC,KAAK;EACrB;EAEAK,QAAQ,GAAE;IACN,IAAI,CAAClB,cAAc,EAAE;IACrB,KAAK,IAAIgB,WAAW,IAAI,IAAI,CAACJ,YAAY,EAAE;MACvCI,WAAW,CAACE,QAAQ,EAAE;IAC1B;IACA,IAAI,CAACpB,aAAa,EAAE;IACpB,IAAI,CAACe,MAAM,GAAC,IAAI;EACpB;EAEAQ,UAAU,CAACC,CAAQ,EAAgB,CACnC;AACJ;AAAC;AAAA"},"metadata":{},"sourceType":"module"}