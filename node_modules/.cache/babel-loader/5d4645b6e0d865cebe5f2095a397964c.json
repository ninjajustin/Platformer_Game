{"ast":null,"code":"var _dec, _class, _dec2, _class2;\n/**\n * @file Manages the configuration settings for the widget.\n * @author Abe Davis\n * @description Graphic Elements manage graphics resources through three.js\n */\n\nimport * as THREE from \"three\";\nimport { Color } from \"../../math\";\nimport { VertexArray2D, VertexArray3D } from \"../../geometry\";\nimport { AGraphicObject } from \"./AGraphicObject\";\nimport { AMaterial } from \"../material\";\nimport { ASerializable } from \"../../base\";\nexport let AGraphicElementBase = (_dec = ASerializable(\"AGraphicElementBase\"), _dec(_class = class AGraphicElementBase extends AGraphicObject {\n  dispose() {\n    super.dispose();\n    if (this.geometry) {\n      this.geometry.dispose();\n    }\n    if (this.material) {\n      if (Array.isArray(this.material)) {\n        for (let mat of this.material) {\n          mat.dispose();\n        }\n      } else {\n        this.material.dispose();\n      }\n    }\n  }\n  static _GetMaterialFromParam(material) {\n    if (material instanceof AMaterial) {\n      return material.threejs;\n    }\n    if (material instanceof Color || material instanceof THREE.Color) {\n      let threecolor = material instanceof Color ? material.asThreeJS() : material;\n      let opacity = material instanceof Color ? material.a : 1.0;\n      return new THREE.MeshBasicMaterial({\n        color: threecolor,\n        transparent: true,\n        opacity: opacity,\n        side: THREE.DoubleSide,\n        depthWrite: true\n      });\n    } else {\n      return material;\n    }\n  }\n}) || _class);\nexport let AGraphicElement = (_dec2 = ASerializable(\"AGraphicElement\"), _dec2(_class2 = class AGraphicElement extends AGraphicElementBase {\n  get geometry() {\n    return this._geometry;\n  }\n  get material() {\n    return this._material;\n  }\n  get threejs() {\n    return this._element;\n  }\n  onMaterialChange(newMaterial) {\n    this.setMaterial(newMaterial.threejs);\n  }\n  get element() {\n    return this._element;\n  }\n\n  /**\n   * Use to create and immediately init\n   * @param geometry\n   * @param material\n   * @param args\n   * @returns {AGraphicElement}\n   * @constructor\n   */\n  static Create(geometry, material) {\n    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      args[_key - 2] = arguments[_key];\n    }\n    let newElement = new this(geometry, material, ...args);\n    // newElement.init();\n    newElement._initIfNotAlready();\n    return newElement;\n  }\n  static CreateSimpleQuad(material) {\n    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      args[_key2 - 1] = arguments[_key2];\n    }\n    let newElement = new this(VertexArray3D.SquareXYUV(), material, ...args);\n    newElement._initIfNotAlready();\n    return newElement;\n  }\n  setMaterialAttribute(name, value) {\n    if (name in this.material) {\n      if (value instanceof THREE.Color || value instanceof THREE.Vector2 || value instanceof THREE.Vector3 || value instanceof THREE.Vector4) {\n        // @ts-ignore\n        this.material[name].set(value);\n      } else if (typeof value === 'number' || typeof value === 'string') {\n        // @ts-ignore\n        this.material[name] = value;\n      } else {\n        throw new Error(`Not sure how to set \"${name}\" attribute on material: ${this.material}`);\n      }\n    } else {\n      throw new Error(`tried to set \"${name}\" attribute on material with no such attribute: ${this.material}`);\n    }\n  }\n  setColor(color) {\n    if ('color' in this.material) {\n      this.setMaterialAttribute('color', color instanceof Color ? color.asThreeJS() : color);\n    }\n    if (color instanceof Color) {\n      this.setMaterialAttribute('opacity', color.a);\n    }\n  }\n  setOpacity(opacity) {\n    this.setMaterialAttribute('opacity', opacity);\n  }\n\n  /**\n   * For some subclasses this will be different from setGeometry, because some subclasses will compute procedural\n   * geometry based on verts and then set the geometry to the output of that procedure\n   * @param verts\n   */\n  setVerts(verts) {\n    if (verts instanceof VertexArray2D && 'setVerts2D' in this) {\n      // @ts-ignore\n      this.setVerts2D(verts);\n    } else {\n      this.setGeometry(verts);\n    }\n  }\n  _setBufferGeometry(verts) {\n    if (verts.nVerts == 0) {\n      return;\n    }\n    this._geometry.setIndex(verts.indices.elements);\n    for (let attribute in verts.attributes) {\n      this._geometry.setAttribute(attribute, verts.getAttributeArray(attribute).BufferAttribute());\n    }\n  }\n  setGeometry(geometry) {\n    if (geometry instanceof THREE.BufferGeometry) {\n      if (this._geometry) {\n        throw new Error(`called setGeometry with THREE.BufferGeometry when _geometry is already set...`);\n      } else {\n        this._geometry = geometry;\n      }\n    } else {\n      if (!(geometry instanceof VertexArray3D)) {\n        // throw new Error(`cannot set geometry with non-VertexArray3D VertexArray... ${geometry}`);\n        // @ts-ignore\n        this.setVerts2D(geometry);\n        // this.setVerts(geometry);\n        return;\n      } else {\n        if (!this._geometry) {\n          this._geometry = new THREE.BufferGeometry();\n        }\n        this._setBufferGeometry(geometry);\n      }\n    }\n  }\n  setMaterial(material) {\n    this._material = AGraphicElementBase._GetMaterialFromParam(material);\n    if (this._element) {\n      this.element.material = this._material;\n    }\n  }\n\n  /**\n   * If you provide just geometry, it will create the geometry but not the element\n   * if you provide geometry and material, it will create the element\n   * @param geometry\n   * @param material\n   */\n  constructor(geometry, material) {\n    super();\n    this._geometry = void 0;\n    this._material = void 0;\n    this._element = void 0;\n    if (geometry && material) {\n      // If both provided let's go ahead and init\n      this.init(geometry, material);\n    } else {\n      // If only one provided\n      if (geometry) {\n        this.setGeometry(geometry);\n      }\n      if (material) {\n        this.setMaterial(material);\n      }\n    }\n    if (this.threejs) {\n      if (this.threejs.name == \"\") {\n        this.setObject3DName(this.serializationLabel);\n      }\n    }\n  }\n  init(geometry, material) {\n    if (this._element) {\n      throw new Error(`Tried to call init on GraphicElement that already has _element ${this._element}`);\n    }\n    this._initIfNotAlready(geometry, material);\n  }\n  _initIfNotAlready(geometry, material) {\n    if (geometry) {\n      this.setGeometry(geometry);\n    }\n    if (material) {\n      this.setMaterial(material);\n    }\n    if (this.material && this.geometry) {\n      this._element = new THREE.Mesh(this.geometry, this.material);\n      this._element.matrixAutoUpdate = false;\n    } else {\n      throw new Error(`Was unable to initialize render element:\\ngeometry:${this.geometry}\\nmaterial:${this.material}`);\n    }\n  }\n}) || _class2);","map":{"version":3,"names":["THREE","Color","VertexArray2D","VertexArray3D","AGraphicObject","AMaterial","ASerializable","AGraphicElementBase","dispose","geometry","material","Array","isArray","mat","_GetMaterialFromParam","threejs","threecolor","asThreeJS","opacity","a","MeshBasicMaterial","color","transparent","side","DoubleSide","depthWrite","AGraphicElement","_geometry","_material","_element","onMaterialChange","newMaterial","setMaterial","element","Create","args","newElement","_initIfNotAlready","CreateSimpleQuad","SquareXYUV","setMaterialAttribute","name","value","Vector2","Vector3","Vector4","set","Error","setColor","setOpacity","setVerts","verts","setVerts2D","setGeometry","_setBufferGeometry","nVerts","setIndex","indices","elements","attribute","attributes","setAttribute","getAttributeArray","BufferAttribute","BufferGeometry","constructor","init","setObject3DName","serializationLabel","Mesh","matrixAutoUpdate"],"sources":["/Users/home/Desktop/College/Fall 2022/CS_4620/cs4620-final-project/src/anigraph/rendering/graphicobject/AGraphicElement.ts"],"sourcesContent":["/**\n * @file Manages the configuration settings for the widget.\n * @author Abe Davis\n * @description Graphic Elements manage graphics resources through three.js\n */\n\nimport * as THREE from \"three\";\nimport {Color} from \"../../math\";\nimport {VertexArray, VertexArray2D, VertexArray3D} from \"../../geometry\";\nimport {AGraphicObject} from \"./AGraphicObject\";\nimport {AMaterial} from \"../material\";\nimport {ASerializable} from \"../../base\";\n\n\n\n\n@ASerializable(\"AGraphicElementBase\")\nexport abstract class AGraphicElementBase extends AGraphicObject{\n    dispose(){\n        super.dispose();\n        if(this.geometry){\n            this.geometry.dispose();\n        }\n        if(this.material){\n            if(Array.isArray(this.material)){\n                for(let mat of this.material){\n                    mat.dispose();\n                }\n            }else{\n                this.material.dispose();\n            }\n        }\n    }\n    abstract get geometry():THREE.BufferGeometry;\n    abstract get material():THREE.Material|THREE.Material[];\n\n    static _GetMaterialFromParam(material:Color|THREE.Color|THREE.Material|THREE.Material[]|AMaterial){\n        if(material instanceof AMaterial){\n            return material.threejs;\n        }\n        if(material instanceof Color || material instanceof THREE.Color){\n            let threecolor = (material instanceof Color)?material.asThreeJS():material;\n            let opacity = (material instanceof Color)?material.a:1.0;\n            return new THREE.MeshBasicMaterial(\n                {\n                    color: threecolor,\n                    transparent:true,\n                    opacity:opacity,\n                    side: THREE.DoubleSide,\n                    depthWrite: true\n                });\n        }else{\n            return material;\n        }\n    }\n}\n\n@ASerializable(\"AGraphicElement\")\nexport class AGraphicElement extends AGraphicElementBase{\n    _geometry!:THREE.BufferGeometry;\n    _material!:THREE.Material|THREE.Material[];\n    _element!:THREE.Object3D;\n    get geometry(): THREE.BufferGeometry {\n        return this._geometry;\n    }\n    get material(): THREE.Material|THREE.Material[]{\n        return this._material;\n    }\n    get threejs(){\n        return this._element;\n    }\n\n    onMaterialChange(newMaterial:AMaterial){\n        this.setMaterial(newMaterial.threejs);\n    }\n\n    get element():THREE.Mesh{\n        return this._element as THREE.Mesh;\n    }\n\n    /**\n     * Use to create and immediately init\n     * @param geometry\n     * @param material\n     * @param args\n     * @returns {AGraphicElement}\n     * @constructor\n     */\n    static Create(\n        geometry?:THREE.BufferGeometry|VertexArray<any>,\n        material?:Color|THREE.Color|THREE.Material|THREE.Material[]|AMaterial,\n        ...args:any[]){\n        let newElement = new this(geometry, material, ...args);\n        // newElement.init();\n        newElement._initIfNotAlready();\n        return newElement;\n    }\n\n    static CreateSimpleQuad(material:AMaterial, ...args:any[]){\n        let newElement = new this(VertexArray3D.SquareXYUV(), material, ...args);\n        newElement._initIfNotAlready();\n        return newElement;\n    }\n\n\n    setMaterialAttribute(name:string, value:any){\n        if(name in this.material){\n            if(value instanceof THREE.Color || value instanceof THREE.Vector2||value instanceof THREE.Vector3||value instanceof THREE.Vector4){\n                // @ts-ignore\n                this.material[name].set(value);\n            }else if (typeof value === 'number' || typeof value === 'string'){\n                // @ts-ignore\n                this.material[name]=value;\n            }else{\n                throw new Error(`Not sure how to set \"${name}\" attribute on material: ${this.material}`);\n            }\n        }else{\n            throw new Error(`tried to set \"${name}\" attribute on material with no such attribute: ${this.material}`);\n        }\n    }\n\n    setColor(color:Color|THREE.Color){\n        if('color' in this.material) {\n            this.setMaterialAttribute('color', (color instanceof Color) ? color.asThreeJS() : color);\n        }\n        if(color instanceof Color) {\n            this.setMaterialAttribute('opacity', color.a);\n        }\n    }\n\n    setOpacity(opacity:number) {\n        this.setMaterialAttribute('opacity', opacity);\n    }\n\n    /**\n     * For some subclasses this will be different from setGeometry, because some subclasses will compute procedural\n     * geometry based on verts and then set the geometry to the output of that procedure\n     * @param verts\n     */\n    setVerts(verts:VertexArray<any>){\n        if(verts instanceof VertexArray2D && 'setVerts2D' in this){\n            // @ts-ignore\n            this.setVerts2D(verts);\n        }else{\n            this.setGeometry(verts);\n        }\n    }\n\n    _setBufferGeometry(verts:VertexArray<any>){\n        if(verts.nVerts==0){\n            return;\n        }\n        this._geometry.setIndex(verts.indices.elements);\n        for (let attribute in verts.attributes) {\n            this._geometry.setAttribute(attribute, verts.getAttributeArray(attribute).BufferAttribute());\n        }\n    }\n\n    setGeometry(geometry:THREE.BufferGeometry|VertexArray<any>){\n        if(geometry instanceof THREE.BufferGeometry){\n            if(this._geometry) {\n                throw new Error(`called setGeometry with THREE.BufferGeometry when _geometry is already set...`);\n            }else{\n                this._geometry = geometry;\n            }\n        }else{\n            if(!(geometry instanceof VertexArray3D)){\n                // throw new Error(`cannot set geometry with non-VertexArray3D VertexArray... ${geometry}`);\n                // @ts-ignore\n                this.setVerts2D(geometry);\n                // this.setVerts(geometry);\n                return;\n            }else {\n                if (!this._geometry) {\n                    this._geometry = new THREE.BufferGeometry();\n                }\n                this._setBufferGeometry(geometry);\n            }\n        }\n    }\n\n\n\n    setMaterial(material:Color|THREE.Color|THREE.Material|THREE.Material[]|AMaterial){\n        this._material = AGraphicElementBase._GetMaterialFromParam(material);\n        if(this._element){\n            this.element.material=this._material;\n        }\n    }\n\n\n    /**\n     * If you provide just geometry, it will create the geometry but not the element\n     * if you provide geometry and material, it will create the element\n     * @param geometry\n     * @param material\n     */\n    constructor(\n        geometry?:THREE.BufferGeometry|VertexArray<any>,\n        material?:Color|THREE.Color|THREE.Material|THREE.Material[]|AMaterial,\n        ...args:any[])\n    {\n        super();\n        if(geometry && material){\n            // If both provided let's go ahead and init\n            this.init(geometry, material);\n        }else {\n            // If only one provided\n            if (geometry) {\n                this.setGeometry(geometry);\n            }\n            if (material) {\n                this.setMaterial(material);\n            }\n        }\n        if(this.threejs){\n            if(this.threejs.name ==\"\"){\n                this.setObject3DName(this.serializationLabel);\n            }\n        }\n    }\n\n    init(geometry?:THREE.BufferGeometry|VertexArray<any>, material?:Color|THREE.Color|THREE.Material|THREE.Material[]|AMaterial) {\n        if(this._element){\n            throw new Error(`Tried to call init on GraphicElement that already has _element ${this._element}`);\n        }\n        this._initIfNotAlready(geometry, material);\n    }\n\n    _initIfNotAlready(geometry?:THREE.BufferGeometry|VertexArray<any>, material?:Color|THREE.Color|THREE.Material|THREE.Material[]|AMaterial) {\n        if(geometry){\n            this.setGeometry(geometry);\n        }\n        if(material){\n            this.setMaterial(material);\n        }\n        if(this.material && this.geometry) {\n            this._element = new THREE.Mesh(this.geometry, this.material);\n            this._element.matrixAutoUpdate=false;\n        }else{\n            throw new Error(`Was unable to initialize render element:\\ngeometry:${this.geometry}\\nmaterial:${this.material}`)\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}