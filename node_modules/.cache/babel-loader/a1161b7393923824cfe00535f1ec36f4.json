{"ast":null,"code":"import { Mat3 } from \"../../math\";\nimport { VertexArray2D } from \"../../geometry\";\nimport { ANodeModelSubclass } from \"./NodeModelSubclass\";\nexport class ANodeModel2D extends ANodeModelSubclass {\n  /** Get set zValue */\n  set zValue(value) {\n    this._zValue = value;\n    this.signalGeometryUpdate();\n  }\n  get zValue() {\n    return this._zValue;\n  }\n  constructor() {\n    super();\n    this._zValue = 0;\n    this._transform = new Mat3();\n    this._setVerts(new VertexArray2D());\n  }\n  get transform() {\n    return this._transform;\n  }\n  setTransform(transform) {\n    if (transform instanceof Mat3) {\n      this._transform = transform;\n      return;\n    } else {\n      let m3 = new Mat3();\n      let m4 = transform.getMat4();\n      m3.m00 = m4.m00;\n      m3.m10 = m4.m10;\n      m3.m01 = m4.m01;\n      m3.m11 = m4.m11;\n      m3.c2 = m4.c3.Point3D;\n      this._transform = m3;\n    }\n    // this.signalTransformUpdate();\n  }\n\n  /**\n   * Right now, bounds are only transformed by the model's current (local) transform\n   * @returns {BoundingBox2D}\n   */\n  getBounds() {\n    let b = this.verts.getBounds().getBoundsXY();\n    b.transform = this.transform;\n    return b;\n  }\n\n  /**\n   * Right now, bounds are only transformed by the model's current (local) transform\n   * @returns {BoundingBox2D}\n   */\n  getBounds2D() {\n    let b = this.verts.getBounds().getBoundsXY();\n    b.transform = this.transform;\n    return b;\n  }\n\n  /**\n   * Right now, bounds are only transformed by the model's current (local) transform\n   * @returns {BoundingBox3D}\n   */\n  getBounds3D() {\n    let b = this.verts.getBounds();\n    b.transform = this.transform.Mat4From2DH();\n    return b;\n  }\n\n  /**\n   * Right now, bounds are only transformed by the model's current (local) transform\n   * @returns {BoundingBox3D}\n   */\n  getBoundsXY() {\n    return this.getBounds();\n  }\n}","map":{"version":3,"names":["Mat3","VertexArray2D","ANodeModelSubclass","ANodeModel2D","zValue","value","_zValue","signalGeometryUpdate","constructor","_transform","_setVerts","transform","setTransform","m3","m4","getMat4","m00","m10","m01","m11","c2","c3","Point3D","getBounds","b","verts","getBoundsXY","getBounds2D","getBounds3D","Mat4From2DH"],"sources":["/Users/home/Desktop/cs4620-final-project/src/anigraph/scene/nodeModel/ANodeModel2D.ts"],"sourcesContent":["import {Color, Mat3, TransformationInterface} from \"../../math\";\nimport {BoundingBox2D, BoundingBox3D, HasBounds2D, VertexArray2D} from \"../../geometry\";\nimport {ANodeModelSubclass} from \"./NodeModelSubclass\";\n\nexport class ANodeModel2D extends ANodeModelSubclass<Mat3, VertexArray2D> implements HasBounds2D{\n    _zValue:number=0;\n    /** Get set zValue */\n    set zValue(value){\n        this._zValue = value;\n        this.signalGeometryUpdate();\n    }\n    get zValue(){return this._zValue;}\n    constructor() {\n        super();\n        this._transform = new Mat3();\n        this._setVerts(new VertexArray2D());\n    }\n\n    get transform(): Mat3 {\n        return this._transform as Mat3;\n    }\n\n\n    setTransform(transform:TransformationInterface){\n        if(transform instanceof Mat3){\n            this._transform = transform;\n            return;\n        }else {\n            let m3 = new Mat3();\n            let m4 = transform.getMat4()\n            m3.m00 = m4.m00;\n            m3.m10 = m4.m10;\n            m3.m01 = m4.m01;\n            m3.m11 = m4.m11;\n            m3.c2 = m4.c3.Point3D;\n            this._transform = m3;\n        }\n        // this.signalTransformUpdate();\n    }\n\n    /**\n     * Right now, bounds are only transformed by the model's current (local) transform\n     * @returns {BoundingBox2D}\n     */\n    getBounds(): BoundingBox2D {\n        let b = this.verts.getBounds().getBoundsXY();\n        b.transform = this.transform;\n        return b;\n    }\n\n    /**\n     * Right now, bounds are only transformed by the model's current (local) transform\n     * @returns {BoundingBox2D}\n     */\n    getBounds2D(): BoundingBox2D {\n        let b = this.verts.getBounds().getBoundsXY();\n        b.transform = this.transform;\n        return b;\n    }\n\n    /**\n     * Right now, bounds are only transformed by the model's current (local) transform\n     * @returns {BoundingBox3D}\n     */\n    getBounds3D(): BoundingBox3D {\n        let b = this.verts.getBounds();\n        b.transform = this.transform.Mat4From2DH();\n        return b;\n    }\n\n    /**\n     * Right now, bounds are only transformed by the model's current (local) transform\n     * @returns {BoundingBox3D}\n     */\n    getBoundsXY(): BoundingBox2D {\n        return this.getBounds();\n    }\n}\n\n\n\n\n"],"mappings":"AAAA,SAAeA,IAAI,QAAgC,YAAY;AAC/D,SAAmDC,aAAa,QAAO,gBAAgB;AACvF,SAAQC,kBAAkB,QAAO,qBAAqB;AAEtD,OAAO,MAAMC,YAAY,SAASD,kBAAkB,CAA4C;EAE5F;EACA,IAAIE,MAAM,CAACC,KAAK,EAAC;IACb,IAAI,CAACC,OAAO,GAAGD,KAAK;IACpB,IAAI,CAACE,oBAAoB,EAAE;EAC/B;EACA,IAAIH,MAAM,GAAE;IAAC,OAAO,IAAI,CAACE,OAAO;EAAC;EACjCE,WAAW,GAAG;IACV,KAAK,EAAE;IAAC,KARZF,OAAO,GAAQ,CAAC;IASZ,IAAI,CAACG,UAAU,GAAG,IAAIT,IAAI,EAAE;IAC5B,IAAI,CAACU,SAAS,CAAC,IAAIT,aAAa,EAAE,CAAC;EACvC;EAEA,IAAIU,SAAS,GAAS;IAClB,OAAO,IAAI,CAACF,UAAU;EAC1B;EAGAG,YAAY,CAACD,SAAiC,EAAC;IAC3C,IAAGA,SAAS,YAAYX,IAAI,EAAC;MACzB,IAAI,CAACS,UAAU,GAAGE,SAAS;MAC3B;IACJ,CAAC,MAAK;MACF,IAAIE,EAAE,GAAG,IAAIb,IAAI,EAAE;MACnB,IAAIc,EAAE,GAAGH,SAAS,CAACI,OAAO,EAAE;MAC5BF,EAAE,CAACG,GAAG,GAAGF,EAAE,CAACE,GAAG;MACfH,EAAE,CAACI,GAAG,GAAGH,EAAE,CAACG,GAAG;MACfJ,EAAE,CAACK,GAAG,GAAGJ,EAAE,CAACI,GAAG;MACfL,EAAE,CAACM,GAAG,GAAGL,EAAE,CAACK,GAAG;MACfN,EAAE,CAACO,EAAE,GAAGN,EAAE,CAACO,EAAE,CAACC,OAAO;MACrB,IAAI,CAACb,UAAU,GAAGI,EAAE;IACxB;IACA;EACJ;;EAEA;AACJ;AACA;AACA;EACIU,SAAS,GAAkB;IACvB,IAAIC,CAAC,GAAG,IAAI,CAACC,KAAK,CAACF,SAAS,EAAE,CAACG,WAAW,EAAE;IAC5CF,CAAC,CAACb,SAAS,GAAG,IAAI,CAACA,SAAS;IAC5B,OAAOa,CAAC;EACZ;;EAEA;AACJ;AACA;AACA;EACIG,WAAW,GAAkB;IACzB,IAAIH,CAAC,GAAG,IAAI,CAACC,KAAK,CAACF,SAAS,EAAE,CAACG,WAAW,EAAE;IAC5CF,CAAC,CAACb,SAAS,GAAG,IAAI,CAACA,SAAS;IAC5B,OAAOa,CAAC;EACZ;;EAEA;AACJ;AACA;AACA;EACII,WAAW,GAAkB;IACzB,IAAIJ,CAAC,GAAG,IAAI,CAACC,KAAK,CAACF,SAAS,EAAE;IAC9BC,CAAC,CAACb,SAAS,GAAG,IAAI,CAACA,SAAS,CAACkB,WAAW,EAAE;IAC1C,OAAOL,CAAC;EACZ;;EAEA;AACJ;AACA;AACA;EACIE,WAAW,GAAkB;IACzB,OAAO,IAAI,CAACH,SAAS,EAAE;EAC3B;AACJ"},"metadata":{},"sourceType":"module"}