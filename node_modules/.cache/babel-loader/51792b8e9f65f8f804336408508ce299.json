{"ast":null,"code":"import _initializerDefineProperty from \"/Users/home/Desktop/cs4620-final-project/node_modules/@babel/runtime/helpers/esm/initializerDefineProperty.js\";\nimport _applyDecoratedDescriptor from \"/Users/home/Desktop/cs4620-final-project/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor.js\";\nimport _initializerWarningHelper from \"/Users/home/Desktop/cs4620-final-project/node_modules/@babel/runtime/helpers/esm/initializerWarningHelper.js\";\nvar _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _class2;\nimport { AObject, AObjectState } from \"../../base\";\nimport { AniGraphDefines } from \"../../defines\";\nimport { NodeTransform3D } from \"../nodetransforms\";\nimport { Mat4, V2, V4, Vec4 } from \"../linalg\";\nimport * as THREE from \"three\";\nexport const ZNEAR = AniGraphDefines.DefaultZNear;\nexport const ZFAR = AniGraphDefines.DefaultZFar;\nvar CamUpdateEvents;\n(function (CamUpdateEvents) {\n  CamUpdateEvents[\"POSE_UPDATED\"] = \"CAMERA_POSE_UPDATED\";\n  CamUpdateEvents[\"PROJECTION_UPDATED\"] = \"CAMERA_PROJECTION_UPDATED\";\n})(CamUpdateEvents || (CamUpdateEvents = {}));\nvar CAMERA_PROJECTION_TYPES;\n(function (CAMERA_PROJECTION_TYPES) {\n  CAMERA_PROJECTION_TYPES[\"PERSPECTIVE\"] = \"PERSPECTIVE\";\n  CAMERA_PROJECTION_TYPES[\"ORTHOGRAPHIC\"] = \"ORTHOGRAPHIC\";\n})(CAMERA_PROJECTION_TYPES || (CAMERA_PROJECTION_TYPES = {}));\nexport let ACameraClass = (_class = (_class2 = class ACameraClass extends AObject {\n  get projectionType() {\n    return this._projectionType;\n  }\n  get position() {\n    return this.pose.getPosition();\n  }\n  get pose() {\n    return this._pose;\n  }\n  set pose(p) {\n    this._pose = p;\n  }\n  get projection() {\n    return this._projection;\n  }\n  set projection(p) {\n    this._projection = p;\n  }\n  get frustumLeft() {\n    return this.lrbt[0];\n  }\n  get frustumRight() {\n    return this.lrbt[1];\n  }\n  get frustumBottom() {\n    return this.lrbt[2];\n  }\n  get frustumTop() {\n    return this.lrbt[3];\n  }\n  getPose() {\n    return this.pose;\n  }\n  getProjection() {\n    return this.projection;\n  }\n  getProjectionInverse() {\n    return this.projection.getInverse();\n  }\n  get modelMatrix() {\n    return this.pose.getMatrix();\n  }\n  get viewMatrix() {\n    return this.pose.getMat4().getInverse();\n  }\n  get PV() {\n    return this.projection.times(this.viewMatrix);\n  }\n  get right() {\n    return this.pose._getQuaternionRotation().getLocalX();\n  }\n  get up() {\n    return this.pose._getQuaternionRotation().getLocalY();\n  }\n  get backward() {\n    return this.pose._getQuaternionRotation().getLocalZ();\n  }\n  get forward() {\n    return this.backward.times(-1);\n  }\n\n  // abstract onCanvasResize(width:number, height:number):void;\n\n  get aspect() {\n    let wh = this._nearPlaneWH;\n    return wh.x / wh.y;\n  }\n\n  /**\n   * update projection when lrtb, zoom, or near/far have changed\n   */\n  // abstract updateProjection():void;\n  updateProjection() {\n    switch (this.projectionType) {\n      case ACameraClass.PROJECTION_TYPE.PERSPECTIVE:\n        this._setProjection(Mat4.PerspectiveFromNearPlane(this.lrbt[0], this.lrbt[1], this.lrbt[2], this.lrbt[3], this.zNear, this.zFar));\n        break;\n      case ACameraClass.PROJECTION_TYPE.ORTHOGRAPHIC:\n        let center = this._nearPlaneCenter;\n        let wh = this._nearPlaneWH.times(0.5);\n        this._setProjection(Mat4.ProjectionOrtho(center.x - wh.x, center.x + wh.x, center.y - wh.y, center.y + wh.y, this.zNear, this.zFar));\n        break;\n      default:\n        throw new Error(\"Unknown projection type: \" + this.projectionType);\n        break;\n    }\n  }\n  _setProjection(projection) {\n    let signalEvent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    this.projection = projection;\n    if (signalEvent) {\n      this.signalEvent(ACameraClass.CameraUpdateEvents.PROJECTION_UPDATED);\n    }\n  }\n  constructor() {\n    super();\n    this._projectionType = void 0;\n    this.fixedImagePlaneWidth = void 0;\n    _initializerDefineProperty(this, \"_pose\", _descriptor, this);\n    _initializerDefineProperty(this, \"_projection\", _descriptor2, this);\n    _initializerDefineProperty(this, \"zoom\", _descriptor3, this);\n    _initializerDefineProperty(this, \"lrbt\", _descriptor4, this);\n    _initializerDefineProperty(this, \"zNear\", _descriptor5, this);\n    _initializerDefineProperty(this, \"zFar\", _descriptor6, this);\n    this._pose = this._DefaultPose();\n    this._projection = new Mat4();\n    this.zoom = 1;\n    this.lrbt = [];\n    this.zNear = ZNEAR;\n    this.zFar = ZFAR;\n    if (arguments.length) {\n      if ((arguments.length <= 0 ? undefined : arguments[0]) instanceof THREE.Camera) {\n        this.setWithThreeJSCamera(arguments.length <= 0 ? undefined : arguments[0]);\n      } else {\n        this.setPose(arguments.length <= 0 ? undefined : arguments[0]);\n        // this.pose = args[0];\n      }\n\n      if ((arguments.length <= 1 ? undefined : arguments[1]) && (arguments.length <= 1 ? undefined : arguments[1]) instanceof Mat4) {\n        this.projection = arguments.length <= 1 ? undefined : arguments[1];\n      }\n    } else {\n      this._projectionType = ACameraClass.PROJECTION_TYPE.ORTHOGRAPHIC;\n    }\n    const self = this;\n    this.addStateKeyListener('zoom', () => {\n      self.onZoomUpdate();\n    });\n  }\n  CreateThreeJSCamera() {\n    switch (this.projectionType) {\n      case ACameraClass.PROJECTION_TYPE.ORTHOGRAPHIC:\n        return new THREE.OrthographicCamera(this.lrbt[0], this.lrbt[1], this.lrbt[3], this.lrbt[2], this.zNear, this.zFar);\n        break;\n      case ACamera.PROJECTION_TYPE.PERSPECTIVE:\n        let fov = Math.atan(this.frustumTop / this.zNear);\n        return new THREE.PerspectiveCamera(fov, this.aspect, this.zNear, this.zFar);\n        break;\n      default:\n        throw new Error(\"Unrecognized camera projection type: \" + this.projectionType);\n    }\n  }\n  addPoseListener(callback, handle) {\n    let synchronous = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    return this.addStateKeyListener('_pose', callback, handle, synchronous);\n  }\n  addProjectionListener(callback, handle) {\n    let synchronous = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    return this.addStateKeyListener('_projection', callback, handle, synchronous);\n  }\n  setProjection(projection) {\n    this._setProjection(projection);\n    let pinv = this.projection.getInverse();\n    this.zNear = pinv.times(V4(0.0, 0.0, -1.0, 1.0)).getHomogenized().z;\n    this.zFar = pinv.times(V4(0.0, 0.0, 1.0, 1.0)).getHomogenized().z;\n  }\n\n  // setPose(pose:T){\n  //     this.pose = pose;\n  // }\n\n  setPosition(position) {\n    this.pose.setPosition(position);\n  }\n  onZoomUpdate() {\n    this.updateProjection();\n  }\n  get _nearPlaneCenter() {\n    return V2(this.frustumLeft, this.frustumBottom).plus(V2(this.frustumRight, this.frustumTop)).times(0.5);\n  }\n  get _nearPlaneWH() {\n    return V2(this.frustumRight, this.frustumTop).minus(V2(this.frustumLeft, this.frustumBottom)).times(1.0 / this.zoom);\n  }\n  getProjectedPoint(p) {\n    let pointIn = p instanceof Vec4 ? p : p.Point3DH;\n    return this.getWorldToNDC().times(pointIn).Point3D;\n  }\n  getWorldSpaceProjectionOnNearPlane(p) {\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.001;\n    let pointIn = p instanceof Vec4 ? p : p.Point3DH;\n    let proj = this.getWorldToNDC().times(pointIn).getHomogenized();\n    proj.z = -1 + offset;\n    let npointh = this.getWorldToNDC().getInverse().times(proj);\n    return npointh.Point3D;\n  }\n  getWorldToNDC() {\n    return this.PV;\n  }\n\n  /**\n   * gets a matrix with:\n   * x column: the vector from the left of the near plane to the right of the near plane in world coords\n   * y column: the vector from the bottom of the near plane to the top of the near plane in world coords\n   * z column: the vector from the near to the far plane in world coords\n   * w column: the location of the middle of the near plane\n   */\n  _getNearPlaneMatrix(camera) {\n    let camPVMI = this.getWorldToNDC().getInverse();\n    let maxMat = Mat4.Identity();\n    // set depth of x and y columns to near plane\n    maxMat.r2 = new Vec4(-1, -1, 1, 0);\n    // set homogeneous coords of columns to 1\n    maxMat.r3 = new Vec4(1, 1, 1, 1);\n    maxMat = camPVMI.times(maxMat);\n    let minMat = Mat4.Scale3D(-1);\n    // set depth of x y and z to near plane\n    minMat.r2 = new Vec4(-1, -1, -1, -1);\n    // set homogeneous coords of columns to 1\n    minMat.r3 = new Vec4(1, 1, 1, 1);\n    minMat = camPVMI.times(minMat);\n    let rmat = new Mat4();\n    rmat.c0 = maxMat.c0.getHomogenized().minus(minMat.c0.getHomogenized());\n    rmat.c1 = maxMat.c1.getHomogenized().minus(minMat.c1.getHomogenized());\n    rmat.c2 = maxMat.c2.getHomogenized().minus(minMat.c2.getHomogenized());\n    rmat.c3 = minMat.c3.getHomogenized();\n    return rmat;\n  }\n\n  /**\n   * gets a matrix with:\n   * x column: the vector from the left of the far plane to the right of the far plane in world coords\n   * y column: the vector from the bottom of the far plane to the top of the far plane in world coords\n   * z column: the vector from the near to the far plane in world coords\n   * w column: the location of the middle of the far plane\n   */\n  _getFarPlaneMatrix(camera) {\n    let camPVMI = this.getWorldToNDC().getInverse();\n    let maxMat = Mat4.Identity();\n    // set depth of x and y columns to far plane\n    maxMat.r2 = new Vec4(1, 1, 1, 0);\n    // set homogeneous coords of columns to 1\n    maxMat.r3 = new Vec4(1, 1, 1, 1);\n    maxMat = camPVMI.times(maxMat);\n    let minMat = Mat4.Scale3D(-1);\n    // set depth of x y and z to far plane\n    minMat.r2 = new Vec4(1, 1, -1, 1);\n    // set homogeneous coords of columns to 1\n    minMat.r3 = new Vec4(1, 1, 1, 1);\n    minMat = camPVMI.times(minMat);\n    let rmat = new Mat4();\n    rmat.c0 = maxMat.c0.getHomogenized().minus(minMat.c0.getHomogenized());\n    rmat.c1 = maxMat.c1.getHomogenized().minus(minMat.c1.getHomogenized());\n    rmat.c2 = maxMat.c2.getHomogenized().minus(minMat.c2.getHomogenized());\n    rmat.c3 = minMat.c3.getHomogenized();\n    return rmat;\n  }\n  onCanvasResize(width, height) {\n    let oldAspect = this.aspect;\n    let newAspect = width / height;\n    let ratio = newAspect / oldAspect;\n    let newL = this.lrbt[0] * ratio;\n    let newR = this.lrbt[1] * ratio;\n    this.lrbt = [newL, newR, this.lrbt[2], this.lrbt[3]];\n    this.updateProjection();\n  }\n}, _class2.CameraUpdateEvents = CamUpdateEvents, _class2.DEFAULT_NEAR = ZNEAR, _class2.DEFAULT_FAR = ZFAR, _class2.PROJECTION_TYPE = CAMERA_PROJECTION_TYPES, _class2), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"_pose\", [AObjectState], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"_projection\", [AObjectState], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, \"zoom\", [AObjectState], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, \"lrbt\", [AObjectState], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, \"zNear\", [AObjectState], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, \"zFar\", [AObjectState], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n})), _class);\nexport class AMatrixCamera extends ACameraClass {\n  _DefaultPose() {\n    return new Mat4();\n  }\n  // setTransform(transform: Mat4): void {\n  //     this.pose=transform;\n  // }\n\n  setPose(pose) {\n    this.pose = pose.getMat4();\n  }\n  setWithThreeJSCamera(camera) {\n    this.setProjection(Mat4.FromThreeJS(camera.projectionMatrix));\n    if (camera.matrixAutoUpdate) {\n      this.setPose(NodeTransform3D.FromThreeJSObject(camera).getMat4());\n    } else {\n      // this.setPose(Mat4.FromThreeJS(camera.matrix));\n      this.setPose(Mat4.FromThreeJS(camera.matrix));\n    }\n    if (camera instanceof THREE.PerspectiveCamera) {\n      this._projectionType = ACameraClass.PROJECTION_TYPE.PERSPECTIVE;\n    } else if (camera instanceof THREE.OrthographicCamera) {\n      this._projectionType = ACameraClass.PROJECTION_TYPE.ORTHOGRAPHIC;\n    }\n  }\n  get transform() {\n    return this.pose;\n  }\n}\nexport class ACamera extends ACameraClass {\n  _DefaultPose() {\n    return new NodeTransform3D();\n  }\n  setPose(pose) {\n    if (pose instanceof NodeTransform3D) {\n      this.pose = pose.clone();\n    } else {\n      this.pose = NodeTransform3D.FromPoseMatrix(pose.getMat4());\n    }\n  }\n  setWithThreeJSCamera(camera) {\n    this.setProjection(Mat4.FromThreeJS(camera.projectionMatrix));\n    if (camera.matrixAutoUpdate) {\n      this.setPose(NodeTransform3D.FromThreeJSObject(camera));\n    } else {\n      // this.setPose(Mat4.FromThreeJS(camera.matrix));\n      this.setPose(NodeTransform3D.FromPoseMatrix(Mat4.FromThreeJS(camera.matrix)));\n    }\n    if (camera instanceof THREE.PerspectiveCamera) {\n      this._projectionType = ACameraClass.PROJECTION_TYPE.PERSPECTIVE;\n    } else if (camera instanceof THREE.OrthographicCamera) {\n      this._projectionType = ACameraClass.PROJECTION_TYPE.ORTHOGRAPHIC;\n    }\n  }\n  get transform() {\n    return this.pose;\n  }\n  static CreatePerspectiveFOV(fovy, aspect, near, far) {\n    let camera = new this();\n    camera.setProjection(Mat4.PerspectiveFromFOV(fovy, aspect, near, far));\n    camera._projectionType = ACameraClass.PROJECTION_TYPE.PERSPECTIVE;\n    return camera;\n  }\n  static CreatePerspectiveNearPlane(left, right, bottom, top, near, far) {\n    let camera = new this();\n    camera.setProjection(Mat4.PerspectiveFromNearPlane(left, right, bottom, top, near, far));\n    camera._projectionType = ACameraClass.PROJECTION_TYPE.PERSPECTIVE;\n    return camera;\n  }\n  static CreateOrthographic(left, right, bottom, top, near, far) {\n    let camera = new this();\n    camera.setProjection(Mat4.ProjectionOrtho(left, right, bottom, top, near !== null && near !== void 0 ? near : AniGraphDefines.DefaultZNear, far !== null && far !== void 0 ? far : AniGraphDefines.DefaultZFar));\n    camera._projectionType = ACameraClass.PROJECTION_TYPE.ORTHOGRAPHIC;\n    return camera;\n  }\n}","map":{"version":3,"names":["AObject","AObjectState","AniGraphDefines","NodeTransform3D","Mat4","V2","V4","Vec4","THREE","ZNEAR","DefaultZNear","ZFAR","DefaultZFar","CamUpdateEvents","CAMERA_PROJECTION_TYPES","ACameraClass","projectionType","_projectionType","position","pose","getPosition","_pose","p","projection","_projection","frustumLeft","lrbt","frustumRight","frustumBottom","frustumTop","getPose","getProjection","getProjectionInverse","getInverse","modelMatrix","getMatrix","viewMatrix","getMat4","PV","times","right","_getQuaternionRotation","getLocalX","up","getLocalY","backward","getLocalZ","forward","aspect","wh","_nearPlaneWH","x","y","updateProjection","PROJECTION_TYPE","PERSPECTIVE","_setProjection","PerspectiveFromNearPlane","zNear","zFar","ORTHOGRAPHIC","center","_nearPlaneCenter","ProjectionOrtho","Error","signalEvent","CameraUpdateEvents","PROJECTION_UPDATED","constructor","fixedImagePlaneWidth","_DefaultPose","zoom","length","Camera","setWithThreeJSCamera","setPose","self","addStateKeyListener","onZoomUpdate","CreateThreeJSCamera","OrthographicCamera","ACamera","fov","Math","atan","PerspectiveCamera","addPoseListener","callback","handle","synchronous","addProjectionListener","setProjection","pinv","getHomogenized","z","setPosition","plus","minus","getProjectedPoint","pointIn","Point3DH","getWorldToNDC","Point3D","getWorldSpaceProjectionOnNearPlane","offset","proj","npointh","_getNearPlaneMatrix","camera","camPVMI","maxMat","Identity","r2","r3","minMat","Scale3D","rmat","c0","c1","c2","c3","_getFarPlaneMatrix","onCanvasResize","width","height","oldAspect","newAspect","ratio","newL","newR","DEFAULT_NEAR","DEFAULT_FAR","AMatrixCamera","FromThreeJS","projectionMatrix","matrixAutoUpdate","FromThreeJSObject","matrix","transform","clone","FromPoseMatrix","CreatePerspectiveFOV","fovy","near","far","PerspectiveFromFOV","CreatePerspectiveNearPlane","left","bottom","top","CreateOrthographic"],"sources":["/Users/home/Desktop/cs4620-final-project/src/anigraph/math/camera/ACamera.ts"],"sourcesContent":["import {AObject, AObjectState} from \"../../base\";\nimport {AniGraphDefines} from \"../../defines\";\nimport {NodeTransform3D} from \"../nodetransforms\";\nimport {Mat4, V2, V4, Vec3, Vec4} from \"../linalg\";\nimport * as THREE from \"three\";\nimport {TransformationInterface} from \"../TrasnformationInterface\";\nimport {Camera} from \"three\";\n\n\nexport const ZNEAR:number = AniGraphDefines.DefaultZNear;\nexport const ZFAR:number = AniGraphDefines.DefaultZFar;\n\nenum CamUpdateEvents{\n    POSE_UPDATED='CAMERA_POSE_UPDATED',\n    PROJECTION_UPDATED='CAMERA_PROJECTION_UPDATED',\n}\n\n\nenum CAMERA_PROJECTION_TYPES{\n    PERSPECTIVE = 'PERSPECTIVE',\n    ORTHOGRAPHIC = 'ORTHOGRAPHIC'\n}\n\n\nexport abstract class ACameraClass<T extends TransformationInterface> extends AObject{\n    static CameraUpdateEvents = CamUpdateEvents;\n    static DEFAULT_NEAR = ZNEAR;\n    static DEFAULT_FAR = ZFAR;\n    abstract get transform():T;\n    // abstract setTransform(transform:T):void;\n    static PROJECTION_TYPE = CAMERA_PROJECTION_TYPES;\n\n    _projectionType!:CAMERA_PROJECTION_TYPES;\n\n    get projectionType(){\n        return this._projectionType;\n    }\n\n    fixedImagePlaneWidth!:number;\n\n    @AObjectState _pose:T;\n    @AObjectState protected _projection:Mat4;\n    @AObjectState zoom!:number;\n    @AObjectState lrbt:number[];\n    @AObjectState zNear!:number;\n    @AObjectState zFar!:number;\n\n\n\n    // @AObjectState _pose:T;\n    // protected _projection:Mat4;\n    // zoom!:number;\n    // lrbt:number[];\n    // zNear!:number;\n    // zFar!:number;\n\n    /**\n     * This is so that we can define an initializer in the parent abstract class\n     * @private\n     */\n    abstract _DefaultPose():T;\n    abstract setWithThreeJSCamera(camera:THREE.Camera):void;\n\n    get position(){\n        return this.pose.getPosition();\n    }\n\n    get pose(){return this._pose;}\n    set pose(p:T){\n        this._pose = p;\n    }\n    get projection(){return this._projection;}\n    set projection(p:Mat4){\n        this._projection = p;\n    }\n\n    get frustumLeft(){return this.lrbt[0];}\n    get frustumRight(){return this.lrbt[1];}\n    get frustumBottom(){return this.lrbt[2];}\n    get frustumTop(){return this.lrbt[3];}\n\n\n\n    getPose(){return this.pose;}\n    getProjection(){return this.projection;}\n    getProjectionInverse(){return this.projection.getInverse();}\n    get modelMatrix(){return this.pose.getMatrix();}\n    get viewMatrix(){return this.pose.getMat4().getInverse();}\n    get PV(){return this.projection.times(this.viewMatrix);}\n\n    get right(){return this.pose._getQuaternionRotation().getLocalX();}\n    get up(){return this.pose._getQuaternionRotation().getLocalY();}\n    get backward(){return this.pose._getQuaternionRotation().getLocalZ();}\n    get forward(){return this.backward.times(-1);}\n\n\n    // abstract onCanvasResize(width:number, height:number):void;\n\n    get aspect(){\n        let wh = this._nearPlaneWH;\n        return wh.x/wh.y;\n    }\n\n    /**\n     * update projection when lrtb, zoom, or near/far have changed\n     */\n    // abstract updateProjection():void;\n    updateProjection(): void {\n        switch (this.projectionType){\n            case ACameraClass.PROJECTION_TYPE.PERSPECTIVE:\n                this._setProjection(Mat4.PerspectiveFromNearPlane(this.lrbt[0], this.lrbt[1], this.lrbt[2], this.lrbt[3], this.zNear, this.zFar));\n                break;\n            case ACameraClass.PROJECTION_TYPE.ORTHOGRAPHIC:\n                let center = this._nearPlaneCenter;\n                let wh = this._nearPlaneWH.times(0.5);\n                this._setProjection(Mat4.ProjectionOrtho(center.x-wh.x, center.x+wh.x, center.y-wh.y, center.y+wh.y, this.zNear, this.zFar));\n                break;\n            default:\n                throw new Error(\"Unknown projection type: \"+this.projectionType);\n                break;\n\n        }\n    }\n\n    _setProjection(projection:Mat4, signalEvent:boolean=true){\n        this.projection = projection;\n        if(signalEvent) {\n            this.signalEvent(ACameraClass.CameraUpdateEvents.PROJECTION_UPDATED);\n        }\n    }\n\n    constructor(threeCamera?:THREE.Camera);\n    constructor(pose?:TransformationInterface, projection?:Mat4);\n    constructor(...args:any[])\n    {\n        super();\n        this._pose = this._DefaultPose();\n        this._projection = new Mat4()\n        this.zoom = 1;\n        this.lrbt=[];\n        this.zNear=ZNEAR;\n        this.zFar=ZFAR;\n\n        if(args.length) {\n            if (args[0] instanceof THREE.Camera) {\n                this.setWithThreeJSCamera(args[0]);\n            } else {\n                this.setPose(args[0]);\n                // this.pose = args[0];\n            }\n            if (args[1] && args[1] instanceof Mat4) {\n                this.projection = args[1];\n            }\n        }else{\n            this._projectionType = ACameraClass.PROJECTION_TYPE.ORTHOGRAPHIC;\n        }\n        const self = this;\n        this.addStateKeyListener('zoom', ()=>{\n            self.onZoomUpdate();\n        })\n    }\n\n    CreateThreeJSCamera(): Camera {\n        switch(this.projectionType){\n            case ACameraClass.PROJECTION_TYPE.ORTHOGRAPHIC:\n                return new THREE.OrthographicCamera(this.lrbt[0], this.lrbt[1], this.lrbt[3], this.lrbt[2], this.zNear, this.zFar);\n                break;\n\n            case ACamera.PROJECTION_TYPE.PERSPECTIVE:\n                let fov = Math.atan(this.frustumTop/this.zNear);\n                return new THREE.PerspectiveCamera(fov, this.aspect, this.zNear, this.zFar);\n                break;\n\n            default:\n                throw new Error(\"Unrecognized camera projection type: \"+this.projectionType);\n        }\n    }\n\n\n\n    addPoseListener(callback:(self:AObject)=>void, handle?:string, synchronous:boolean=true,){\n        return this.addStateKeyListener('_pose', callback, handle, synchronous);\n    }\n    addProjectionListener(callback:(self:AObject)=>void, handle?:string, synchronous:boolean=true){\n        return this.addStateKeyListener('_projection', callback, handle, synchronous);\n    }\n\n    setProjection(projection:Mat4){\n        this._setProjection(projection);\n        let pinv = this.projection.getInverse();\n        this.zNear = pinv.times(V4(0.0,0.0,-1.0, 1.0)).getHomogenized().z;\n        this.zFar = pinv.times(V4(0.0,0.0,1.0, 1.0)).getHomogenized().z;\n    }\n\n    // setPose(pose:T){\n    //     this.pose = pose;\n    // }\n\n    abstract setPose(pose:TransformationInterface):void;\n\n\n    setPosition(position:Vec3){\n        this.pose.setPosition(position);\n    }\n\n\n\n    onZoomUpdate() {\n        this.updateProjection();\n    }\n\n\n    get _nearPlaneCenter(){\n        return V2(this.frustumLeft,this.frustumBottom).plus(V2(this.frustumRight, this.frustumTop)).times(0.5);\n    }\n    get _nearPlaneWH(){\n        return V2(this.frustumRight, this.frustumTop).minus(V2(this.frustumLeft,this.frustumBottom)).times(1.0/this.zoom);\n    }\n\n    getProjectedPoint(p:Vec3|Vec4){\n        let pointIn = (p instanceof Vec4)?p:p.Point3DH;\n        return this.getWorldToNDC().times(pointIn).Point3D;\n    }\n\n    getWorldSpaceProjectionOnNearPlane(p:Vec3|Vec4, offset:number=0.001){\n        let pointIn = (p instanceof Vec4)?p:p.Point3DH;\n        let proj = this.getWorldToNDC().times(pointIn).getHomogenized();\n        proj.z=-1+offset;\n        let npointh = this.getWorldToNDC().getInverse().times(proj);\n        return npointh.Point3D;\n    }\n\n\n    getWorldToNDC(){\n        return this.PV;\n    }\n\n    /**\n     * gets a matrix with:\n     * x column: the vector from the left of the near plane to the right of the near plane in world coords\n     * y column: the vector from the bottom of the near plane to the top of the near plane in world coords\n     * z column: the vector from the near to the far plane in world coords\n     * w column: the location of the middle of the near plane\n     */\n    _getNearPlaneMatrix(camera:THREE.Camera){\n        let camPVMI = this.getWorldToNDC().getInverse();\n        let maxMat = Mat4.Identity();\n        // set depth of x and y columns to near plane\n        maxMat.r2=new Vec4(-1,-1,1,0);\n        // set homogeneous coords of columns to 1\n        maxMat.r3=new Vec4(1,1,1,1);\n\n        maxMat = camPVMI.times(maxMat);\n        let minMat = Mat4.Scale3D(-1);\n        // set depth of x y and z to near plane\n        minMat.r2=new Vec4(-1,-1,-1,-1);\n        // set homogeneous coords of columns to 1\n        minMat.r3 = new Vec4(1,1,1,1);\n        minMat = camPVMI.times(minMat);\n\n        let rmat = new Mat4();\n        rmat.c0=maxMat.c0.getHomogenized().minus(minMat.c0.getHomogenized());\n        rmat.c1=maxMat.c1.getHomogenized().minus(minMat.c1.getHomogenized());\n        rmat.c2=maxMat.c2.getHomogenized().minus(minMat.c2.getHomogenized());\n        rmat.c3 = minMat.c3.getHomogenized();\n        return rmat;\n    }\n\n    /**\n     * gets a matrix with:\n     * x column: the vector from the left of the far plane to the right of the far plane in world coords\n     * y column: the vector from the bottom of the far plane to the top of the far plane in world coords\n     * z column: the vector from the near to the far plane in world coords\n     * w column: the location of the middle of the far plane\n     */\n    _getFarPlaneMatrix(camera:THREE.Camera){\n        let camPVMI = this.getWorldToNDC().getInverse();\n        let maxMat = Mat4.Identity();\n        // set depth of x and y columns to far plane\n        maxMat.r2=new Vec4(1,1,1,0);\n        // set homogeneous coords of columns to 1\n        maxMat.r3=new Vec4(1,1,1,1);\n        maxMat = camPVMI.times(maxMat);\n        let minMat = Mat4.Scale3D(-1);\n        // set depth of x y and z to far plane\n        minMat.r2=new Vec4(1,1,-1,1);\n        // set homogeneous coords of columns to 1\n        minMat.r3 = new Vec4(1,1,1,1);\n        minMat = camPVMI.times(minMat);\n        let rmat = new Mat4();\n        rmat.c0=maxMat.c0.getHomogenized().minus(minMat.c0.getHomogenized());\n        rmat.c1=maxMat.c1.getHomogenized().minus(minMat.c1.getHomogenized());\n        rmat.c2=maxMat.c2.getHomogenized().minus(minMat.c2.getHomogenized());\n        rmat.c3 = minMat.c3.getHomogenized();\n        return rmat;\n    }\n\n    onCanvasResize(width: number, height: number) {\n        let oldAspect = this.aspect;\n        let newAspect = width/height;\n        let ratio = newAspect/oldAspect;\n        let newL = this.lrbt[0]*ratio;\n        let newR = this.lrbt[1]*ratio;\n        this.lrbt = [newL, newR, this.lrbt[2], this.lrbt[3]];\n        this.updateProjection();\n    }\n\n}\n\n\nexport class AMatrixCamera extends ACameraClass<Mat4> {\n    _DefaultPose(): Mat4 {\n        return new Mat4();\n    }\n    // setTransform(transform: Mat4): void {\n    //     this.pose=transform;\n    // }\n\n    setPose(pose: TransformationInterface) {\n        this.pose = pose.getMat4();\n    }\n\n    setWithThreeJSCamera(camera: Camera): void {\n        this.setProjection(Mat4.FromThreeJS(camera.projectionMatrix));\n        if(camera.matrixAutoUpdate){\n            this.setPose(NodeTransform3D.FromThreeJSObject(camera).getMat4());\n        }else{\n            // this.setPose(Mat4.FromThreeJS(camera.matrix));\n            this.setPose(Mat4.FromThreeJS(camera.matrix));\n        }\n        if(camera instanceof THREE.PerspectiveCamera){\n            this._projectionType = ACameraClass.PROJECTION_TYPE.PERSPECTIVE;\n        }else if(camera instanceof THREE.OrthographicCamera){\n            this._projectionType = ACameraClass.PROJECTION_TYPE.ORTHOGRAPHIC;\n        }\n    }\n\n    get transform(): Mat4 {\n        return this.pose;\n    }\n}\n\nexport class ACamera extends ACameraClass<NodeTransform3D>{\n    _DefaultPose(): NodeTransform3D {\n        return new NodeTransform3D();\n    }\n    setPose(pose: TransformationInterface): void {\n        if(pose instanceof NodeTransform3D){\n            this.pose = pose.clone();\n        }else{\n            this.pose = NodeTransform3D.FromPoseMatrix(pose.getMat4());\n        }\n    }\n\n    setWithThreeJSCamera(camera: Camera): void {\n        this.setProjection(Mat4.FromThreeJS(camera.projectionMatrix));\n        if(camera.matrixAutoUpdate){\n            this.setPose(NodeTransform3D.FromThreeJSObject(camera));\n        }else{\n            // this.setPose(Mat4.FromThreeJS(camera.matrix));\n            this.setPose(NodeTransform3D.FromPoseMatrix(Mat4.FromThreeJS(camera.matrix)));\n        }\n        if(camera instanceof THREE.PerspectiveCamera){\n            this._projectionType = ACameraClass.PROJECTION_TYPE.PERSPECTIVE;\n        }else if(camera instanceof THREE.OrthographicCamera){\n            this._projectionType = ACameraClass.PROJECTION_TYPE.ORTHOGRAPHIC;\n        }\n    }\n\n    get transform() {\n        return this.pose;\n    }\n\n    static CreatePerspectiveFOV(fovy: number, aspect: number, near?: number, far?: number){\n        let camera = new this();\n        camera.setProjection(Mat4.PerspectiveFromFOV(fovy, aspect, near, far));\n        camera._projectionType = ACameraClass.PROJECTION_TYPE.PERSPECTIVE;\n        return camera;\n    }\n\n    static CreatePerspectiveNearPlane(left: number, right: number, bottom: number, top: number, near?: number, far?: number) {\n        let camera = new this();\n        camera.setProjection(Mat4.PerspectiveFromNearPlane(left, right, bottom, top, near, far));\n        camera._projectionType = ACameraClass.PROJECTION_TYPE.PERSPECTIVE;\n        return camera;\n    }\n\n    static CreateOrthographic(left:number, right:number, bottom:number, top:number, near?:number, far?:number){\n        let camera = new this();\n        camera.setProjection(Mat4.ProjectionOrtho(left, right, bottom, top, near??AniGraphDefines.DefaultZNear, far??AniGraphDefines.DefaultZFar));\n        camera._projectionType = ACameraClass.PROJECTION_TYPE.ORTHOGRAPHIC;\n        return camera;\n    }\n\n\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}