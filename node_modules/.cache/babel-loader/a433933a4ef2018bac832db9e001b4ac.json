{"ast":null,"code":"// export interface AMVCMapEntry<NodeModelType extends ASceneNodeModel>{\n//     modelClass:AModelClassInterface<AModelInterface>;\n//     viewClass:AViewClassInterface;\n//     controllerClass:ClassInterface<AControllerInterface<NodeModelType>>,\n//     details:GenericDict\n// }\n\n// export const enum AMVCMapEntryDetail{\n//     CAN_SELECT_IN_GUI='CAN_SELECT_IN_GUI',\n//     CAN_CLICK_TO_CREATE='CAN_CLICK_TO_CREATE',\n// }\n\n// export type AMVCNodeClassSpec<NodeModelType extends ASceneNodeModel> = [AModelClassInterface<AModelInterface>, AViewClassInterface, AControllerClassInterface<ASceneNodeController<ASceneNodeModel>>, AMVCMapDetailDict];\n\n// export function NewAMVCNodeClassSpec(\n//     modelClass:AModelClassInterface<ASceneNodeModel>,\n//     viewClass:AViewClassInterface,\n//     controllerClass:AControllerClassInterface<ASceneNodeController<ASceneNodeModel>>,\n//     details?:AMVCMapDetailDict\n// ):AMVCNodeClassSpec<ASceneNodeModel>{\n//     details = (details!==undefined)?details:{};\n//     // if(details){\n//     return [modelClass, viewClass, controllerClass, details];\n//     // }else{\n//     //     return [modelClass, viewClass, controllerClass, {}];\n//     // }\n//\n// }\n\nimport { ANodeModel } from \"../../scene/nodeModel\";\nfunction AMVClassSpecDetailWithDefaults(d) {\n  let defaultValues = {\n    isGUIOption: true,\n    canDrawVerts: true,\n    canCreateDefault: true\n  };\n  return {\n    ...defaultValues,\n    ...d\n  };\n}\n_c = AMVClassSpecDetailWithDefaults;\nexport class AMVClassSpec {\n  constructor(modelClass, viewClass, details) {\n    this.modelClass = void 0;\n    this.viewClass = void 0;\n    this.details = void 0;\n    this.modelClass = modelClass;\n    this.viewClass = viewClass;\n    this.details = AMVClassSpecDetailWithDefaults(details ? details : {});\n  }\n}\nexport class AModelViewClassMap {\n  constructor(specs) {\n    this._classMap = void 0;\n    this._classMap = {};\n    if (specs) {\n      this.addSpecs(specs);\n    }\n  }\n  get modelClassNames() {\n    return Object.keys(this._classMap);\n  }\n  get specs() {\n    return Object.values(this._classMap);\n  }\n  getGUIModelOptions() {\n    let rval = {};\n    // let rval = [];\n    for (let m in this._classMap) {\n      if (this._classMap[m].details.isGUIOption) {\n        rval[m] = m;\n      }\n    }\n    return rval;\n  }\n  getGUIModelOptionsList() {\n    let rval = [];\n    for (let m in this._classMap) {\n      if (this._classMap[m].details.isGUIOption) {\n        rval.push(m);\n      }\n    }\n    return rval;\n  }\n  getSpecForModel(model) {\n    if (model instanceof ANodeModel) {\n      return this._classMap[model.serializationLabel];\n    } else if (typeof model === 'string' || model instanceof String) {\n      return this._classMap[model];\n    } else {\n      return this._classMap[model.name];\n    }\n  }\n  _viewClassForModel(model) {\n    return this.getSpecForModel(model).viewClass;\n  }\n  _classDetailsForModel(model) {\n    return this.getSpecForModel(model).details;\n  }\n  addSpecs(specs) {\n    if (Array.isArray(specs)) {\n      for (let spec of specs) {\n        this.addSpec(spec);\n      }\n    } else {\n      this.addSpec(specs);\n    }\n  }\n  addSpec(spec) {\n    // if(spec.modelClass.hasOwnProperty('SerializationLabel')){\n    // let serializationLabel = spec.modelClass.SerializationLabel();\n    if ('SerializationLabel' in spec.modelClass) {\n      // @ts-ignore\n      let label = spec.modelClass.SerializationLabel();\n      this._classMap[label] = spec;\n    } else {\n      this._classMap[spec.modelClass.name] = spec;\n      // if(label!==spec.modelClass.name){\n      //     console.warn(`Serialization label ${label} is different from class name ${spec.modelClass.name}`)\n      // }\n      console.warn(`Class ${spec.modelClass.name} not given serialization label`);\n    }\n  }\n}\nvar _c;\n$RefreshReg$(_c, \"AMVClassSpecDetailWithDefaults\");","map":{"version":3,"names":["ANodeModel","AMVClassSpecDetailWithDefaults","d","defaultValues","isGUIOption","canDrawVerts","canCreateDefault","AMVClassSpec","constructor","modelClass","viewClass","details","AModelViewClassMap","specs","_classMap","addSpecs","modelClassNames","Object","keys","values","getGUIModelOptions","rval","m","getGUIModelOptionsList","push","getSpecForModel","model","serializationLabel","String","name","_viewClassForModel","_classDetailsForModel","Array","isArray","spec","addSpec","label","SerializationLabel","console","warn"],"sources":["/Users/home/Desktop/College/Fall 2022/CS_4620/cs4620-final-project/src/anigraph/base/amvc/AModelViewClassSpec.ts"],"sourcesContent":["\n// export interface AMVCMapEntry<NodeModelType extends ASceneNodeModel>{\n//     modelClass:AModelClassInterface<AModelInterface>;\n//     viewClass:AViewClassInterface;\n//     controllerClass:ClassInterface<AControllerInterface<NodeModelType>>,\n//     details:GenericDict\n// }\n\n// export const enum AMVCMapEntryDetail{\n//     CAN_SELECT_IN_GUI='CAN_SELECT_IN_GUI',\n//     CAN_CLICK_TO_CREATE='CAN_CLICK_TO_CREATE',\n// }\n\n\n\n\n// export type AMVCNodeClassSpec<NodeModelType extends ASceneNodeModel> = [AModelClassInterface<AModelInterface>, AViewClassInterface, AControllerClassInterface<ASceneNodeController<ASceneNodeModel>>, AMVCMapDetailDict];\n\n// export function NewAMVCNodeClassSpec(\n//     modelClass:AModelClassInterface<ASceneNodeModel>,\n//     viewClass:AViewClassInterface,\n//     controllerClass:AControllerClassInterface<ASceneNodeController<ASceneNodeModel>>,\n//     details?:AMVCMapDetailDict\n// ):AMVCNodeClassSpec<ASceneNodeModel>{\n//     details = (details!==undefined)?details:{};\n//     // if(details){\n//     return [modelClass, viewClass, controllerClass, details];\n//     // }else{\n//     //     return [modelClass, viewClass, controllerClass, {}];\n//     // }\n//\n// }\n\n\nimport {ClassInterface} from \"../../basictypes\";\nimport {ANodeModel} from \"../../scene/nodeModel\";\nimport {ANodeView} from \"../../scene/nodeView\";\nimport {AView} from \"./AView\";\nimport {AModel} from \"./AModel\";\n\nexport interface AMVClassSpecDetails {\n    isGUIOption?:boolean;\n    canDrawVerts?:boolean;\n    canCreateDefault?:boolean;\n}\nfunction AMVClassSpecDetailWithDefaults(d:AMVClassSpecDetails){\n    let defaultValues:AMVClassSpecDetails = {\n        isGUIOption:true,\n        canDrawVerts:true,\n        canCreateDefault:true,\n    }\n    return {...defaultValues, ...d};\n}\n\nexport class AMVClassSpec {\n    modelClass:ClassInterface<AModel>;\n    viewClass:ClassInterface<AView>;\n    details:AMVClassSpecDetails;\n    constructor(modelClass:ClassInterface<AModel>,\n                viewClass:ClassInterface<AView>,\n                details?:AMVClassSpecDetails) {\n        this.modelClass=modelClass;\n        this.viewClass=viewClass;\n        this.details = AMVClassSpecDetailWithDefaults(details?details:{});\n    }\n}\n\nexport class AModelViewClassMap {\n    protected _classMap:{[modelClassName:string]:AMVClassSpec};\n    constructor(specs?:AMVClassSpec[]) {\n        this._classMap = {};\n        if(specs){\n            this.addSpecs(specs);\n        }\n    }\n\n    get modelClassNames(){return Object.keys(this._classMap);}\n    get specs(){return Object.values(this._classMap);}\n\n\n    getGUIModelOptions(){\n        let rval:{[name:string]:string}={}\n        // let rval = [];\n        for(let m in this._classMap){\n            if(this._classMap[m].details.isGUIOption){\n                rval[m]=m;\n            }\n        }\n        return rval;\n    }\n    getGUIModelOptionsList(){\n        let rval = [];\n        for(let m in this._classMap){\n            if(this._classMap[m].details.isGUIOption){\n                rval.push(m);\n            }\n        }\n        return rval;\n    }\n\n    getSpecForModel(model:string|ClassInterface<ANodeModel>|ANodeModel){\n        if(model instanceof ANodeModel){\n            return this._classMap[model.serializationLabel];\n        }else if (typeof model ==='string'||model instanceof String) {\n            return this._classMap[model as string];\n        }else{\n            return this._classMap[(model as ClassInterface<ANodeModel>).name];\n        }\n    }\n\n    _viewClassForModel(model:string|ClassInterface<ANodeModel>|ANodeModel){\n        return this.getSpecForModel(model).viewClass;\n    }\n\n    _classDetailsForModel(model:string|ClassInterface<ANodeModel>|ANodeModel){\n        return this.getSpecForModel(model).details;\n    }\n\n    addSpecs(specs:AMVClassSpec|AMVClassSpec[]){\n        if(Array.isArray(specs)){\n            for(let spec of specs){\n                this.addSpec(spec);\n            }\n        }else{\n            this.addSpec(specs);\n        }\n    }\n    addSpec(spec:AMVClassSpec){\n        // if(spec.modelClass.hasOwnProperty('SerializationLabel')){\n        // let serializationLabel = spec.modelClass.SerializationLabel();\n        if('SerializationLabel' in spec.modelClass){\n            // @ts-ignore\n            let label:string = spec.modelClass.SerializationLabel();\n            this._classMap[label]=spec;\n\n        }else{\n            this._classMap[spec.modelClass.name]=spec;\n            // if(label!==spec.modelClass.name){\n            //     console.warn(`Serialization label ${label} is different from class name ${spec.modelClass.name}`)\n            // }\n            console.warn(`Class ${spec.modelClass.name} not given serialization label`)\n        }\n\n\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}