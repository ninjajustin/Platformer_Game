{"ast":null,"code":"import * as THREE from \"three\";\nimport { Matrix4 } from \"three\";\nimport { Vec4 } from \"./Vec4\";\nimport { V3, Vec3 } from \"../2D/Vec3\";\nimport { Mat4 } from \"./Mat4\";\nimport { Mat3 } from \"../2D\";\nimport { Precision } from \"../../Precision\";\nexport class Quaternion extends THREE.Quaternion {\n  constructor() {\n    let x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    let y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let z = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    let w = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n    // super(x,y,z,w);\n    super();\n    this._x = void 0;\n    this._y = void 0;\n    this._z = void 0;\n    this._w = void 0;\n    this._x = x;\n    this._y = y;\n    this._z = z;\n    this._w = w;\n  }\n  static FromWXYZ(wxyz) {\n    return new Quaternion(wxyz[1], wxyz[2], wxyz[3], wxyz[0]);\n  }\n  static FromQuaternion(q) {\n    return new Quaternion(q.x, q.y, q.z, q.w);\n  }\n  static RotationX(radians) {\n    return Quaternion.FromAxisAngle(new Vec3(1, 0, 0), radians);\n  }\n  static RotationY(radians) {\n    return Quaternion.FromAxisAngle(new Vec3(0, 1, 0), radians);\n  }\n  static RotationZ(radians) {\n    return Quaternion.FromAxisAngle(new Vec3(0, 0, 1), radians);\n  }\n  getLocalX() {\n    return this.appliedTo(V3(1, 0, 0));\n  }\n  getLocalY() {\n    return this.appliedTo(V3(0, 1, 0));\n  }\n  getLocalZ() {\n    return this.appliedTo(V3(0, 0, 1));\n  }\n  normalize() {\n    super.normalize();\n    return this;\n  }\n  get Vec4() {\n    return new Vec4(this._x, this._y, this._z, this._w);\n  }\n  appliedTo(v) {\n    return v.getRotatedByQuaternion(this);\n  }\n  times(q) {\n    let r = new Quaternion();\n    if (q instanceof Quaternion) {\n      r.multiplyQuaternions(this, q);\n      return r.normalize();\n    } else {\n      let qm = Quaternion.FromMatrix(q);\n      r.multiplyQuaternions(this, qm);\n      return r.normalize();\n    }\n  }\n  asPrettyString() {\n    return `Q(w=${this._w}, x=${this._x}, y=${this._y}, z=${this._z})`;\n  }\n\n  /**\n   * Return true if each element is within precision of its counterpart\n   * @param other\n   */\n  isEqualTo(other, tolerance) {\n    let epsilon = tolerance !== undefined ? tolerance : Precision.epsilon;\n    if (Math.abs(this.x - other.x) > epsilon) {\n      return false;\n    }\n    return true;\n  }\n  getInverse() {\n    let r = new Quaternion(this.x, this.y, this.z, this.w);\n    r.invert();\n    return r;\n  }\n  randomize() {\n    // Derived from http://planning.cs.uiuc.edu/node198.html\n    // Note, this source uses w, x, y, z ordering,\n    // so we swap the order below.\n\n    const u1 = Math.random();\n    const sqrt1u1 = Math.sqrt(1 - u1);\n    const sqrtu1 = Math.sqrt(u1);\n    const u2 = 2 * Math.PI * Math.random();\n    const u3 = 2 * Math.PI * Math.random();\n    return this.set(sqrt1u1 * Math.cos(u2), sqrtu1 * Math.sin(u3), sqrtu1 * Math.cos(u3), sqrt1u1 * Math.sin(u2));\n  }\n  static FromMatrix(m) {\n    let r = new Quaternion();\n    let mr = m;\n    if (mr instanceof Matrix4) {\n      mr = Mat4.FromThreeJS(mr);\n    }\n    if (mr instanceof Mat4) {\n      r._setWithRotationMatrix(mr.getLinearPart());\n    } else if (mr instanceof Mat3) {\n      r._setWithRotationMatrix(mr);\n    } else {\n      console.error(`Issue with ${mr}`);\n    }\n    return r;\n  }\n  _setWithRotationMatrix(M_in) {\n    let m = M_in.clone();\n    m.c0 = m.c0.getNormalized();\n    m.c1 = m.c1.getNormalized();\n    m.c2 = m.c2.getNormalized();\n    let q;\n    if (m.m22 < 0) {\n      if (m.m00 > m.m11) {\n        let t = 1 + m.m00 - m.m11 - m.m22;\n        q = new Quaternion(t, m.m01 + m.m10, m.m20 + m.m02, m.m12 - m.m21);\n      } else {\n        let t = 1 - m.m00 + m.m11 - m.m22;\n        q = new Quaternion(m.m01 + m.m10, t, m.m12 + m.m21, m.m20 - m.m02);\n      }\n    } else {\n      if (m.m00 < -m.m11) {\n        let t = 1 - m.m00 - m.m11 + m.m22;\n        q = new Quaternion(m.m20 + m.m02, m.m12 + m.m21, t, m.m01 - m.m10);\n      } else {\n        let t = 1 + m.m00 + m.m11 + m.m22;\n        q = new Quaternion(m.m12 - m.m21, m.m20 - m.m02, m.m01 - m.m10, t);\n      }\n    }\n    q.normalize();\n    this.x = q.x;\n    this.y = q.y;\n    this.z = q.z;\n    this.w = q.w;\n  }\n  static FromCameraOrientationVectors(forward, up) {\n    let z = forward.getNormalized().times(-1);\n    let y = up;\n    let x = y.cross(z).getNormalized();\n    let upn = z.cross(x).getNormalized();\n    let q = Quaternion.FromMatrix(Mat3.FromColumns(x, upn, z));\n    return q;\n    // let lookZ = forward.getNormalized().times(-1);\n    // let y = up;\n    // let x = lookZ.cross(y).getNormalized();\n    // let upn = x.cross(lookZ).getNormalized();\n    // let q = Quaternion.FromMatrix(\n    //   Mat3.FromColumns(x, upn, lookZ)\n    // );\n    // return q;\n  }\n\n  static FromZAndUp(z, up) {\n    return Quaternion.FromCameraOrientationVectors(z.times(-1), up);\n  }\n\n  // static FromVectors(forward:Vec3, up:Vec3){\n  //     let oaxis = forward.times(-1);\n  //     // let oaxis = forward;\n  //     if(Precision.PEQ(forward.dot(up), 1)){\n  //         return Quaternion.FromRotationBetweenTwoVectors(oaxis, V3(0,0,-1));\n  //     }\n  //     return Quaternion.FromMatrix(\n  //         Mat3.FromColumns(\n  //             oaxis.cross(up).getNormalized(),\n  //             up,\n  //             oaxis\n  //         )\n  //     )\n  // }\n\n  Mat3() {\n    var w = this._w;\n    var x = this._x;\n    var y = this._y;\n    var z = this._z;\n    var n = w * w + x * x + y * y + z * z;\n    var s = n === 0 ? 0 : 2 / n;\n    var wx = s * w * x,\n      wy = s * w * y,\n      wz = s * w * z;\n    var xx = s * x * x,\n      xy = s * x * y,\n      xz = s * x * z;\n    var yy = s * y * y,\n      yz = s * y * z,\n      zz = s * z * z;\n\n    // if (d2) {\n    //     return [\n    //         [1 - (yy + zz), xy - wz, xz + wy, 0],\n    //         [xy + wz, 1 - (xx + zz), yz - wx, 0],\n    //         [xz - wy, yz + wx, 1 - (xx + yy), 0],\n    //         [0, 0, 0, 1]];\n    // }\n    return new Mat3(1 - (yy + zz), xy + wz, xz - wy, xy - wz, 1 - (xx + zz), yz + wx, xz + wy, yz - wx, 1 - (xx + yy));\n  }\n  getMatrix() {\n    return this.Mat4();\n  }\n  Mat4() {\n    var w = this._w;\n    var x = this._x;\n    var y = this._y;\n    var z = this._z;\n    var n = w * w + x * x + y * y + z * z;\n    var s = n === 0 ? 0 : 2 / n;\n    var wx = s * w * x,\n      wy = s * w * y,\n      wz = s * w * z;\n    var xx = s * x * x,\n      xy = s * x * y,\n      xz = s * x * z;\n    var yy = s * y * y,\n      yz = s * y * z,\n      zz = s * z * z;\n\n    // if (d2) {\n    //     return [\n    //         [1 - (yy + zz), xy - wz, xz + wy, 0],\n    //         [xy + wz, 1 - (xx + zz), yz - wx, 0],\n    //         [xz - wy, yz + wx, 1 - (xx + yy), 0],\n    //         [0, 0, 0, 1]];\n    // }\n\n    return new Mat4(1 - (yy + zz), xy + wz, xz - wy, 0, xy - wz, 1 - (xx + zz), yz + wx, 0, xz + wy, yz - wx, 1 - (xx + yy), 0, 0, 0, 0, 1);\n\n    // return new Mat4(\n    //   1 - (yy + zz), xy - wz, xz + wy, 0,\n    //   xy + wz, 1 - (xx + zz), yz - wx, 0,\n    //   xz - wy, yz + wx, 1 - (xx + yy), 0,\n    //   0, 0, 0, 1\n    // );\n\n    // const x = this._x, y = this._y, z = this._z, w = this._w;\n    // const x2 = x + x,\ty2 = y + y, z2 = z + z;\n    // const xx = x * x2, xy = x * y2, xz = x * z2;\n    // const yy = y * y2, yz = y * z2, zz = z * z2;\n    // const wx = w * x2, wy = w * y2, wz = w * z2;\n    //\n    //\n    // m.elements[ 0 ] = ( 1 - ( yy + zz ) );\n    // m.elements[ 1 ] = ( xy + wz );\n    // m.elements[ 2 ] = ( xz - wy );\n    // m.elements[ 3 ] = 0;\n    //\n    // m.elements[ 4 ] = ( xy - wz );\n    // m.elements[ 5 ] = ( 1 - ( xx + zz ) );\n    // m.elements[ 6 ] = ( yz + wx );\n    // m.elements[ 7 ] = 0;\n    //\n    // m.elements[ 8 ] = ( xz + wy );\n    // m.elements[ 9 ] = ( yz - wx );\n    // m.elements[ 10 ] = ( 1 - ( xx + yy ) );\n    // m.elements[ 11 ] = 0;\n    //\n    // m.elements[ 12 ] = 0;\n    // m.elements[ 13 ] = 0;\n    // m.elements[ 14 ] = 0;\n    // m.elements[ 15 ] = 1;\n    //\n    // return m.getTranspose();\n  }\n\n  static Identity() {\n    let q = new Quaternion();\n    q.identity();\n    return q;\n  }\n  static Slerp(qa, qb, t) {\n    let r = new Quaternion();\n    r.slerpQuaternions(qa, qb, t);\n    return r;\n  }\n  static FromAxisAngle(axis, angle) {\n    const halfAngle = angle * 0.5;\n    let s = Math.sin(-halfAngle);\n    let w = Math.cos(-halfAngle);\n    let sinorm = s / Math.sqrt(axis.x * axis.x + axis.y * axis.y + axis.z * axis.z);\n    let x = axis.x * sinorm;\n    let y = axis.y * sinorm;\n    let z = axis.z * sinorm;\n    return new Quaternion(x, y, z, w);\n  }\n  getAxisAndAngle() {\n    return {\n      axis: new Vec3(this.x, this.y, this.z).getNormalized(),\n      angle: 2 * Math.acos(this.w)\n    };\n  }\n\n  // public get axis(){\n  //\n  // }\n\n  static FromRotationBetweenTwoVectors(vFrom, vTo) {\n    let start = vFrom;\n    if (start instanceof Vec3) {\n      start = start.asThreeJS();\n    }\n    let end = vTo;\n    if (end instanceof Vec3) {\n      end = end.asThreeJS();\n    }\n    start.normalize();\n    end.normalize();\n    let r = new Quaternion();\n    r.setFromUnitVectors(end, start);\n    return r;\n  }\n  static Random() {\n    let r = new Quaternion();\n    r.randomize();\n    return r.normalize();\n  }\n}","map":{"version":3,"names":["THREE","Matrix4","Vec4","V3","Vec3","Mat4","Mat3","Precision","Quaternion","constructor","x","y","z","w","_x","_y","_z","_w","FromWXYZ","wxyz","FromQuaternion","q","RotationX","radians","FromAxisAngle","RotationY","RotationZ","getLocalX","appliedTo","getLocalY","getLocalZ","normalize","v","getRotatedByQuaternion","times","r","multiplyQuaternions","qm","FromMatrix","asPrettyString","isEqualTo","other","tolerance","epsilon","undefined","Math","abs","getInverse","invert","randomize","u1","random","sqrt1u1","sqrt","sqrtu1","u2","PI","u3","set","cos","sin","m","mr","FromThreeJS","_setWithRotationMatrix","getLinearPart","console","error","M_in","clone","c0","getNormalized","c1","c2","m22","m00","m11","t","m01","m10","m20","m02","m12","m21","FromCameraOrientationVectors","forward","up","cross","upn","FromColumns","FromZAndUp","n","s","wx","wy","wz","xx","xy","xz","yy","yz","zz","getMatrix","Identity","identity","Slerp","qa","qb","slerpQuaternions","axis","angle","halfAngle","sinorm","getAxisAndAngle","acos","FromRotationBetweenTwoVectors","vFrom","vTo","start","asThreeJS","end","setFromUnitVectors","Random"],"sources":["/Users/home/Desktop/cs4620-final-project/src/anigraph/math/linalg/3D/Quaternion.ts"],"sourcesContent":["import * as THREE from \"three\";\nimport { Matrix4, Vector3 } from \"three\";\nimport { V4, Vec4 } from \"./Vec4\";\nimport { V3, Vec3 } from \"../2D/Vec3\";\nimport { Mat4 } from \"./Mat4\";\nimport { Mat3 } from \"../2D\";\nimport { Precision } from \"../../Precision\";\n\nexport class Quaternion extends THREE.Quaternion {\n  protected _x!: number;\n  protected _y!: number;\n  protected _z!: number;\n  protected _w!: number;\n\n  constructor(x: number = 0, y: number = 0, z: number = 0, w: number = 1) {\n    // super(x,y,z,w);\n    super();\n    this._x = x;\n    this._y = y;\n    this._z = z;\n    this._w = w;\n  }\n\n  static FromWXYZ(wxyz: number[]) {\n    return new Quaternion(wxyz[1], wxyz[2], wxyz[3], wxyz[0]);\n  }\n\n  static FromQuaternion(q: THREE.Quaternion) {\n    return new Quaternion(q.x, q.y, q.z, q.w);\n  }\n\n  static RotationX(radians: number) {\n    return Quaternion.FromAxisAngle(new Vec3(1, 0, 0), radians);\n  }\n  static RotationY(radians: number) {\n    return Quaternion.FromAxisAngle(new Vec3(0, 1, 0), radians);\n  }\n  static RotationZ(radians: number) {\n    return Quaternion.FromAxisAngle(new Vec3(0, 0, 1), radians);\n  }\n\n\n  getLocalX():Vec3{\n    return this.appliedTo(V3(1,0,0));\n  }\n  getLocalY():Vec3{\n    return this.appliedTo(V3(0,1,0));\n  };\n  getLocalZ():Vec3{\n    return this.appliedTo(V3(0,0,1));\n  };\n\n  normalize(): Quaternion {\n    super.normalize();\n    return this;\n  }\n\n  get Vec4() {\n    return new Vec4(this._x, this._y, this._z, this._w);\n  }\n\n  appliedTo(v: Vec3) {\n    return v.getRotatedByQuaternion(this);\n  }\n\n  times(q: Quaternion | Mat3 | Mat4) {\n    let r = new Quaternion();\n    if (q instanceof Quaternion) {\n      r.multiplyQuaternions(this, q);\n      return r.normalize();\n    } else {\n      let qm = Quaternion.FromMatrix(q);\n      r.multiplyQuaternions(this, qm);\n      return r.normalize();\n    }\n  }\n\n  asPrettyString(){\n    return `Q(w=${this._w}, x=${this._x}, y=${this._y}, z=${this._z})`;\n  }\n\n  /**\n   * Return true if each element is within precision of its counterpart\n   * @param other\n   */\n  isEqualTo(other: Quaternion, tolerance?: number) {\n    let epsilon: number =\n      tolerance !== undefined ? tolerance : Precision.epsilon;\n    if (Math.abs(this.x - other.x) > epsilon) {\n      return false;\n    }\n    return true;\n  }\n\n  getInverse() {\n    let r = new Quaternion(this.x, this.y, this.z, this.w);\n    r.invert();\n    return r;\n  }\n\n  randomize() {\n    // Derived from http://planning.cs.uiuc.edu/node198.html\n    // Note, this source uses w, x, y, z ordering,\n    // so we swap the order below.\n\n    const u1 = Math.random();\n    const sqrt1u1 = Math.sqrt(1 - u1);\n    const sqrtu1 = Math.sqrt(u1);\n\n    const u2 = 2 * Math.PI * Math.random();\n\n    const u3 = 2 * Math.PI * Math.random();\n\n    return this.set(\n      sqrt1u1 * Math.cos(u2),\n      sqrtu1 * Math.sin(u3),\n      sqrtu1 * Math.cos(u3),\n      sqrt1u1 * Math.sin(u2)\n    );\n  }\n\n  static FromMatrix(m: Mat3 | Mat4 | Matrix4) {\n    let r = new Quaternion();\n    let mr = m;\n    if (mr instanceof Matrix4) {\n      mr = Mat4.FromThreeJS(mr);\n    }\n    if (mr instanceof Mat4) {\n      r._setWithRotationMatrix(mr.getLinearPart());\n    } else if (mr instanceof Mat3) {\n      r._setWithRotationMatrix(mr);\n    } else {\n      console.error(`Issue with ${mr}`);\n    }\n    return r;\n  }\n\n  _setWithRotationMatrix(M_in: Mat3) {\n    let m = M_in.clone();\n    m.c0 = m.c0.getNormalized();\n    m.c1 = m.c1.getNormalized();\n    m.c2 = m.c2.getNormalized();\n    let q: Quaternion;\n    if (m.m22 < 0) {\n      if (m.m00 > m.m11) {\n        let t = 1 + m.m00 - m.m11 - m.m22;\n        q = new Quaternion(t, m.m01 + m.m10, m.m20 + m.m02, m.m12 - m.m21);\n      } else {\n        let t = 1 - m.m00 + m.m11 - m.m22;\n        q = new Quaternion(m.m01 + m.m10, t, m.m12 + m.m21, m.m20 - m.m02);\n      }\n    } else {\n      if (m.m00 < -m.m11) {\n        let t = 1 - m.m00 - m.m11 + m.m22;\n        q = new Quaternion(m.m20 + m.m02, m.m12 + m.m21, t, m.m01 - m.m10);\n      } else {\n        let t = 1 + m.m00 + m.m11 + m.m22;\n        q = new Quaternion(m.m12 - m.m21, m.m20 - m.m02, m.m01 - m.m10, t);\n      }\n    }\n    q.normalize();\n    this.x = q.x;\n    this.y = q.y;\n    this.z = q.z;\n    this.w = q.w;\n  }\n\n  static FromCameraOrientationVectors(forward: Vec3, up: Vec3) {\n    let z = forward.getNormalized().times(-1);\n    let y = up;\n    let x = y.cross(z).getNormalized();\n    let upn = z.cross(x).getNormalized();\n    let q = Quaternion.FromMatrix(\n        Mat3.FromColumns(x, upn, z)\n    );\n    return q;\n    // let lookZ = forward.getNormalized().times(-1);\n    // let y = up;\n    // let x = lookZ.cross(y).getNormalized();\n    // let upn = x.cross(lookZ).getNormalized();\n    // let q = Quaternion.FromMatrix(\n    //   Mat3.FromColumns(x, upn, lookZ)\n    // );\n    // return q;\n  }\n\n  static FromZAndUp(z: Vec3, up: Vec3) {\n    return Quaternion.FromCameraOrientationVectors(z.times(-1), up);\n  }\n\n  // static FromVectors(forward:Vec3, up:Vec3){\n  //     let oaxis = forward.times(-1);\n  //     // let oaxis = forward;\n  //     if(Precision.PEQ(forward.dot(up), 1)){\n  //         return Quaternion.FromRotationBetweenTwoVectors(oaxis, V3(0,0,-1));\n  //     }\n  //     return Quaternion.FromMatrix(\n  //         Mat3.FromColumns(\n  //             oaxis.cross(up).getNormalized(),\n  //             up,\n  //             oaxis\n  //         )\n  //     )\n  // }\n\n  Mat3() {\n    var w = this._w;\n    var x = this._x;\n    var y = this._y;\n    var z = this._z;\n\n    var n = w * w + x * x + y * y + z * z;\n    var s = n === 0 ? 0 : 2 / n;\n    var wx = s * w * x,\n      wy = s * w * y,\n      wz = s * w * z;\n    var xx = s * x * x,\n      xy = s * x * y,\n      xz = s * x * z;\n    var yy = s * y * y,\n      yz = s * y * z,\n      zz = s * z * z;\n\n    // if (d2) {\n    //     return [\n    //         [1 - (yy + zz), xy - wz, xz + wy, 0],\n    //         [xy + wz, 1 - (xx + zz), yz - wx, 0],\n    //         [xz - wy, yz + wx, 1 - (xx + yy), 0],\n    //         [0, 0, 0, 1]];\n    // }\n    return new Mat3(\n      1 - (yy + zz),\n      xy + wz,\n      xz - wy,\n      xy - wz,\n      1 - (xx + zz),\n      yz + wx,\n      xz + wy,\n      yz - wx,\n      1 - (xx + yy)\n    );\n\n\n\n  }\n\n  getMatrix() {\n    return this.Mat4();\n  }\n\n  Mat4() {\n    var w = this._w;\n    var x = this._x;\n    var y = this._y;\n    var z = this._z;\n\n    var n = w * w + x * x + y * y + z * z;\n    var s = n === 0 ? 0 : 2 / n;\n    var wx = s * w * x,\n      wy = s * w * y,\n      wz = s * w * z;\n    var xx = s * x * x,\n      xy = s * x * y,\n      xz = s * x * z;\n    var yy = s * y * y,\n      yz = s * y * z,\n      zz = s * z * z;\n\n    // if (d2) {\n    //     return [\n    //         [1 - (yy + zz), xy - wz, xz + wy, 0],\n    //         [xy + wz, 1 - (xx + zz), yz - wx, 0],\n    //         [xz - wy, yz + wx, 1 - (xx + yy), 0],\n    //         [0, 0, 0, 1]];\n    // }\n\n    return new Mat4(\n        1 - (yy + zz), xy + wz, xz - wy, 0,\n        xy - wz, 1 - (xx + zz), yz + wx, 0,\n        xz + wy, yz - wx, 1 - (xx + yy), 0,\n        0, 0, 0, 1\n    )\n\n    // return new Mat4(\n    //   1 - (yy + zz), xy - wz, xz + wy, 0,\n    //   xy + wz, 1 - (xx + zz), yz - wx, 0,\n    //   xz - wy, yz + wx, 1 - (xx + yy), 0,\n    //   0, 0, 0, 1\n    // );\n\n    // const x = this._x, y = this._y, z = this._z, w = this._w;\n    // const x2 = x + x,\ty2 = y + y, z2 = z + z;\n    // const xx = x * x2, xy = x * y2, xz = x * z2;\n    // const yy = y * y2, yz = y * z2, zz = z * z2;\n    // const wx = w * x2, wy = w * y2, wz = w * z2;\n    //\n    //\n    // m.elements[ 0 ] = ( 1 - ( yy + zz ) );\n    // m.elements[ 1 ] = ( xy + wz );\n    // m.elements[ 2 ] = ( xz - wy );\n    // m.elements[ 3 ] = 0;\n    //\n    // m.elements[ 4 ] = ( xy - wz );\n    // m.elements[ 5 ] = ( 1 - ( xx + zz ) );\n    // m.elements[ 6 ] = ( yz + wx );\n    // m.elements[ 7 ] = 0;\n    //\n    // m.elements[ 8 ] = ( xz + wy );\n    // m.elements[ 9 ] = ( yz - wx );\n    // m.elements[ 10 ] = ( 1 - ( xx + yy ) );\n    // m.elements[ 11 ] = 0;\n    //\n    // m.elements[ 12 ] = 0;\n    // m.elements[ 13 ] = 0;\n    // m.elements[ 14 ] = 0;\n    // m.elements[ 15 ] = 1;\n    //\n    // return m.getTranspose();\n  }\n\n  static Identity() {\n    let q = new Quaternion();\n    q.identity();\n    return q;\n  }\n\n  static Slerp(qa: Quaternion, qb: Quaternion, t: number): Quaternion {\n    let r = new Quaternion();\n    r.slerpQuaternions(qa, qb, t);\n    return r;\n  }\n\n  static FromAxisAngle(axis: Vec3 | Vector3, angle: number): Quaternion {\n    const halfAngle = angle * 0.5;\n    let s = Math.sin(-halfAngle);\n    let w = Math.cos(-halfAngle);\n    let sinorm =\n      s / Math.sqrt(axis.x * axis.x + axis.y * axis.y + axis.z * axis.z);\n    let x = axis.x * sinorm;\n    let y = axis.y * sinorm;\n    let z = axis.z * sinorm;\n    return new Quaternion(x, y, z, w);\n  }\n\n  getAxisAndAngle() {\n    return {\n      axis: new Vec3(this.x, this.y, this.z).getNormalized(),\n      angle: 2 * Math.acos(this.w),\n    };\n  }\n\n  // public get axis(){\n  //\n  // }\n\n  static FromRotationBetweenTwoVectors(\n    vFrom: Vec3 | Vector3,\n    vTo: Vec3 | Vector3\n  ): Quaternion {\n    let start = vFrom;\n    if (start instanceof Vec3) {\n      start = start.asThreeJS();\n    }\n    let end = vTo;\n    if (end instanceof Vec3) {\n      end = end.asThreeJS();\n    }\n    start.normalize();\n    end.normalize();\n    let r = new Quaternion();\n    r.setFromUnitVectors(end, start);\n    return r;\n  }\n\n  static Random() {\n    let r = new Quaternion();\n    r.randomize();\n    return r.normalize();\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}