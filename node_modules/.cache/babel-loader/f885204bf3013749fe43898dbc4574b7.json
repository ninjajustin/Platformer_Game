{"ast":null,"code":"var _dec, _class, _class2;\nimport * as THREE from \"three\";\n// import {ShaderMaterialParameters} from \"three/src/materials/ShaderMaterial\";\nimport { ASerializable } from \"../../base\";\nimport { AMaterialModelBase } from \"./AMaterialModel\";\n// import {LineMaterial, LineMaterialParameters} from \"three/examples/jsm/lines/LineMaterial\";\nimport { Color } from \"../../math\";\nimport { AShaderModelBase } from \"./AShaderModel\";\nimport { DefaultMaterials } from \"./MaterialConstants\";\n// import {AThreeJSLineMaterial} from \"./threeMaterials\";\n\nimport { LineMaterial } from \"three/examples/jsm/lines/LineMaterial\";\n// // @ts-ignore\n// THREE.UniformsLib.line = {\n//     worldUnits: { value: 1 },\n//     linewidth: { value: 1 },\n//     resolution: { value: new THREE.Vector2( 1, 1 ) },\n//     dashOffset: { value: 0 },\n//     dashScale: { value: 1 },\n//     dashSize: { value: 1 },\n//     gapSize: { value: 1 } // todo FIX - maybe change to totalSize\n//\n// };\n//\n// ShaderManager.LoadShader('line', 'line/line.vert.glsl', 'line/line.frag.glsl').then((programSounrce:AShaderProgramSource)=>{\n//     // ShaderManager.GetShaderSource('line').sourcesLoadedPromise.then();\n//     programSounrce.sourcesLoadedPromise.then((loadedProgrameSource)=> {\n//         THREE.ShaderLib['line'] = {\n//             uniforms: THREE.UniformsUtils.merge([\n//                 THREE.UniformsLib.common,\n//                 THREE.UniformsLib.fog,\n//                 // @ts-ignore\n//                 THREE.UniformsLib.line\n//             ]),\n//             vertexShader: programSounrce.vertexSource,\n//             fragmentShader: programSounrce.fragSource\n//         };\n//     });\n// });\n//\n//\n// let ShaderLibLineDict = {\n//     uniforms: THREE.UniformsUtils.merge([\n//         THREE.UniformsLib.common,\n//         THREE.UniformsLib.fog,\n//         {\n//             worldUnits: {value: 1},\n//             linewidth: {value: 1},\n//             resolution: {value: new THREE.Vector2(1, 1)},\n//             dashOffset: {value: 0},\n//             dashScale: {value: 1},\n//             dashSize: {value: 1},\n//             gapSize: {value: 1} // todo FIX - maybe change to totalSize\n//         }\n//     ])\n// }\n//\n\nexport let ALineMaterialModel = (_dec = ASerializable(\"ALineMaterialModel\"), _dec(_class = (_class2 = class ALineMaterialModel extends AMaterialModelBase {\n  constructor() {\n    super(DefaultMaterials.LineMaterial, LineMaterial, {}, {\n      // color: undefined,\n      transparent: true,\n      opacity: 1,\n      side: THREE.DoubleSide,\n      depthWrite: true,\n      depthTest: true,\n      linewidth: 0.005,\n      vertexColors: true\n    });\n  }\n  _CreateTHREEJS() {\n    return super._CreateTHREEJS();\n  }\n\n  // _CreateTHREEJS(){\n  //     return new LineMaterial({\n  //         ...this.defaults,\n  //         ...this.sharedParameters\n  //     }, );\n  // }\n\n  get color() {\n    return Color.FromThreeJS(this.sharedParameters['color']);\n  }\n  set color(c) {\n    this.sharedParameters['color'] = c.asThreeJS();\n  }\n  getMaterialGUIParams(material) {\n    const self = this;\n    return {\n      // ...AMaterialModelBase.MaterialGUIColorControl(material),\n      ...AMaterialModelBase.MaterialGUIControl(material, 'opacity', 1, {\n        min: 0,\n        max: 1,\n        step: 0.01\n      }),\n      // @ts-ignore\n      ...AShaderModelBase.ShaderUniformGUIControl(material, 'linewidth', 1.0, {\n        min: 0,\n        max: 5,\n        step: 0.01\n      })\n    };\n  }\n}, _class2.GlobalInstance = void 0, _class2)) || _class);\nALineMaterialModel.GlobalInstance = new ALineMaterialModel();","map":{"version":3,"names":["THREE","ASerializable","AMaterialModelBase","Color","AShaderModelBase","DefaultMaterials","LineMaterial","ALineMaterialModel","constructor","transparent","opacity","side","DoubleSide","depthWrite","depthTest","linewidth","vertexColors","_CreateTHREEJS","color","FromThreeJS","sharedParameters","c","asThreeJS","getMaterialGUIParams","material","self","MaterialGUIControl","min","max","step","ShaderUniformGUIControl","GlobalInstance"],"sources":["/Users/home/Desktop/cs4620-final-project/src/anigraph/rendering/material/ALineMaterialModel.ts"],"sourcesContent":["import * as THREE from \"three\";\n// import {ShaderMaterialParameters} from \"three/src/materials/ShaderMaterial\";\nimport {ASerializable} from \"../../base\";\nimport {AMaterialModelBase} from \"./AMaterialModel\";\n// import {LineMaterial, LineMaterialParameters} from \"three/examples/jsm/lines/LineMaterial\";\nimport {Color} from \"../../math\";\nimport {AMaterial} from \"./AMaterial\";\nimport {AShaderModelBase} from \"./AShaderModel\";\nimport {DefaultMaterials} from \"./MaterialConstants\";\n// import {AThreeJSLineMaterial} from \"./threeMaterials\";\nimport {AShaderProgramSource, ShaderManager} from \"./ShaderManager\";\nimport {AThreeJSLineMaterial, LineMaterialParameters} from \"./threeMaterials\";\nimport {LineMaterial} from \"three/examples/jsm/lines/LineMaterial\";\nimport {Material} from \"three\";\n\n\n// // @ts-ignore\n// THREE.UniformsLib.line = {\n//     worldUnits: { value: 1 },\n//     linewidth: { value: 1 },\n//     resolution: { value: new THREE.Vector2( 1, 1 ) },\n//     dashOffset: { value: 0 },\n//     dashScale: { value: 1 },\n//     dashSize: { value: 1 },\n//     gapSize: { value: 1 } // todo FIX - maybe change to totalSize\n//\n// };\n//\n// ShaderManager.LoadShader('line', 'line/line.vert.glsl', 'line/line.frag.glsl').then((programSounrce:AShaderProgramSource)=>{\n//     // ShaderManager.GetShaderSource('line').sourcesLoadedPromise.then();\n//     programSounrce.sourcesLoadedPromise.then((loadedProgrameSource)=> {\n//         THREE.ShaderLib['line'] = {\n//             uniforms: THREE.UniformsUtils.merge([\n//                 THREE.UniformsLib.common,\n//                 THREE.UniformsLib.fog,\n//                 // @ts-ignore\n//                 THREE.UniformsLib.line\n//             ]),\n//             vertexShader: programSounrce.vertexSource,\n//             fragmentShader: programSounrce.fragSource\n//         };\n//     });\n// });\n//\n//\n// let ShaderLibLineDict = {\n//     uniforms: THREE.UniformsUtils.merge([\n//         THREE.UniformsLib.common,\n//         THREE.UniformsLib.fog,\n//         {\n//             worldUnits: {value: 1},\n//             linewidth: {value: 1},\n//             resolution: {value: new THREE.Vector2(1, 1)},\n//             dashOffset: {value: 0},\n//             dashScale: {value: 1},\n//             dashSize: {value: 1},\n//             gapSize: {value: 1} // todo FIX - maybe change to totalSize\n//         }\n//     ])\n// }\n//\n\n\n\n@ASerializable(\"ALineMaterialModel\")\nexport class  ALineMaterialModel extends AMaterialModelBase<LineMaterialParameters>{\n    static GlobalInstance:ALineMaterialModel;\n    constructor() {\n        super(\n            DefaultMaterials.LineMaterial,\n            LineMaterial,\n            {},\n            {\n                // color: undefined,\n                transparent: true,\n                opacity: 1,\n                side: THREE.DoubleSide,\n                depthWrite: true,\n                depthTest:true,\n                linewidth: 0.005,\n                vertexColors:true\n            });\n    }\n\n\n    _CreateTHREEJS(): Material {\n        return super._CreateTHREEJS();\n    }\n\n    // _CreateTHREEJS(){\n    //     return new LineMaterial({\n    //         ...this.defaults,\n    //         ...this.sharedParameters\n    //     }, );\n    // }\n\n    get color(){\n        return Color.FromThreeJS(this.sharedParameters['color']);\n    }\n    set color(c:Color){\n        this.sharedParameters['color'] = c.asThreeJS();\n    }\n    getMaterialGUIParams(material:AMaterial){\n        const self = this;\n\n        return {\n            // ...AMaterialModelBase.MaterialGUIColorControl(material),\n            ...AMaterialModelBase.MaterialGUIControl(material, 'opacity', 1, {\n                min:0,\n                max:1,\n                step:0.01\n            }),\n            // @ts-ignore\n            ...AShaderModelBase.ShaderUniformGUIControl(material, 'linewidth', 1.0, {\n                min:0,\n                max:5,\n                step:0.01\n            })\n        }\n    }\n}\n\nALineMaterialModel.GlobalInstance = new ALineMaterialModel();\n"],"mappings":";AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B;AACA,SAAQC,aAAa,QAAO,YAAY;AACxC,SAAQC,kBAAkB,QAAO,kBAAkB;AACnD;AACA,SAAQC,KAAK,QAAO,YAAY;AAEhC,SAAQC,gBAAgB,QAAO,gBAAgB;AAC/C,SAAQC,gBAAgB,QAAO,qBAAqB;AACpD;;AAGA,SAAQC,YAAY,QAAO,uCAAuC;AAIlE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA,WACcC,kBAAkB,WAD/BN,aAAa,CAAC,oBAAoB,CAAC,2BAApC,MACcM,kBAAkB,SAASL,kBAAkB,CAAwB;EAE/EM,WAAW,GAAG;IACV,KAAK,CACDH,gBAAgB,CAACC,YAAY,EAC7BA,YAAY,EACZ,CAAC,CAAC,EACF;MACI;MACAG,WAAW,EAAE,IAAI;MACjBC,OAAO,EAAE,CAAC;MACVC,IAAI,EAAEX,KAAK,CAACY,UAAU;MACtBC,UAAU,EAAE,IAAI;MAChBC,SAAS,EAAC,IAAI;MACdC,SAAS,EAAE,KAAK;MAChBC,YAAY,EAAC;IACjB,CAAC,CAAC;EACV;EAGAC,cAAc,GAAa;IACvB,OAAO,KAAK,CAACA,cAAc,EAAE;EACjC;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA,IAAIC,KAAK,GAAE;IACP,OAAOf,KAAK,CAACgB,WAAW,CAAC,IAAI,CAACC,gBAAgB,CAAC,OAAO,CAAC,CAAC;EAC5D;EACA,IAAIF,KAAK,CAACG,CAAO,EAAC;IACd,IAAI,CAACD,gBAAgB,CAAC,OAAO,CAAC,GAAGC,CAAC,CAACC,SAAS,EAAE;EAClD;EACAC,oBAAoB,CAACC,QAAkB,EAAC;IACpC,MAAMC,IAAI,GAAG,IAAI;IAEjB,OAAO;MACH;MACA,GAAGvB,kBAAkB,CAACwB,kBAAkB,CAACF,QAAQ,EAAE,SAAS,EAAE,CAAC,EAAE;QAC7DG,GAAG,EAAC,CAAC;QACLC,GAAG,EAAC,CAAC;QACLC,IAAI,EAAC;MACT,CAAC,CAAC;MACF;MACA,GAAGzB,gBAAgB,CAAC0B,uBAAuB,CAACN,QAAQ,EAAE,WAAW,EAAE,GAAG,EAAE;QACpEG,GAAG,EAAC,CAAC;QACLC,GAAG,EAAC,CAAC;QACLC,IAAI,EAAC;MACT,CAAC;IACL,CAAC;EACL;AACJ,CAAC,UAtDUE,cAAc;AAwDzBxB,kBAAkB,CAACwB,cAAc,GAAG,IAAIxB,kBAAkB,EAAE"},"metadata":{},"sourceType":"module"}