{"ast":null,"code":"var _dec, _class;\nimport { ALoadedModel } from \"../../anigraph/scene/nodes/loaded/ALoadedModel\";\nimport { ASerializable, V3, Vec3 } from \"../../anigraph\";\nimport { ATexture } from \"../..//anigraph/rendering/ATexture\";\nimport { AppConfigs } from \"../AppConfigs\";\nimport { CharacterModel } from \".\";\nexport let LoadedCharacterModel = (_dec = ASerializable(\"LoadedCharacterModel\"), _dec(_class = class LoadedCharacterModel extends ALoadedModel {\n  constructor() {\n    super(...arguments);\n    this.size = void 0;\n    this.requestJump = false;\n    this.horizontalMoving = false;\n    this.mass = 1;\n    this.velocity = V3();\n  }\n  static async Create(obj, diffuseMap, size) {\n    var _size;\n    size = (_size = size) !== null && _size !== void 0 ? _size : AppConfigs.DefaultBotSize;\n    let newmodel = new this(obj, diffuseMap);\n    newmodel.size = size ? size : 0;\n    //await newmodel.init(diffuseMap);\n    return newmodel;\n  }\n  async init(diffuseMap) {\n    this.setMaterial(CharacterModel.ShaderModel.CreateMaterial(diffuseMap instanceof ATexture ? diffuseMap : new ATexture(diffuseMap)));\n  }\n  getFourBounds() {\n    const thisUpperBound = this.position.y + this.size / 2 + 0.5;\n    const thisLowerBound = this.position.y - this.size / 2 + 0.5;\n    const thisLeftBound = this.position.x - this.size / 2;\n    const thisRightBound = this.position.x + this.size / 2;\n    return [thisUpperBound, thisRightBound, thisLowerBound, thisLeftBound];\n  }\n  update(deltaT, listOfTerrains) {\n    if (this.requestJump) {\n      if (AppConfigs.AllowMultiJump || Math.abs(this.velocity.y) < 0.001) {\n        this.velocity.y = AppConfigs.JumpPower;\n      }\n      this.requestJump = false;\n    }\n    this.velocity.y -= AppConfigs.Gravity;\n    if (!this.horizontalMoving) {\n      this.velocity.x /= 1 + AppConfigs.SlowDown;\n    }\n    let realVelX = this.velocity.x;\n    for (let terrain of listOfTerrains) {\n      if (terrain.position.y < -400) continue;\n      const upperBound = terrain.position.y + terrain.sizeY / 2;\n      const lowerBound = terrain.position.y - terrain.sizeY / 2;\n      const leftBound = terrain.position.x - terrain.sizeX / 2;\n      const rightBound = terrain.position.x + terrain.sizeX / 2;\n      const [thisUpperBound, thisRightBound, thisLowerBound, thisLeftBound] = this.getFourBounds();\n      if (thisLowerBound < upperBound && thisLowerBound > lowerBound || thisUpperBound > lowerBound && thisUpperBound < upperBound || Math.abs(thisLowerBound - lowerBound) < .00001 && Math.abs(thisUpperBound - upperBound) < .00001) {\n        if (this.velocity.x > 0 && thisRightBound + this.velocity.x > leftBound && thisLeftBound < rightBound) {\n          realVelX = Math.min(this.velocity.x, leftBound - thisRightBound);\n        }\n        if (this.velocity.x < 0 && thisLeftBound + this.velocity.x < rightBound && thisRightBound > rightBound) {\n          realVelX = Math.max(this.velocity.x, -(thisLeftBound - rightBound));\n        }\n      }\n      if (thisLeftBound < rightBound && thisLeftBound > leftBound || thisRightBound > leftBound && thisRightBound < rightBound || Math.abs(thisRightBound - rightBound) < .00001 && Math.abs(thisLeftBound - leftBound) < .00001) {\n        if (this.velocity.y < 0 && thisLowerBound + this.velocity.y < upperBound && thisUpperBound > upperBound) {\n          this.velocity.y = Math.max(this.velocity.y, -(thisLowerBound - upperBound));\n        }\n        if (this.velocity.y > 0 && thisUpperBound + this.velocity.y > lowerBound && thisLowerBound < lowerBound) {\n          this.velocity.y = Math.min(this.velocity.y, lowerBound - thisUpperBound);\n        }\n      }\n    }\n    this.position = this.position.plus(new Vec3(realVelX, this.velocity.y, 0));\n  }\n  get position() {\n    return this.transform.position;\n  }\n  set position(value) {\n    this.transform.position = value;\n  }\n}) || _class);","map":{"version":3,"names":["ALoadedModel","ASerializable","V3","Vec3","ATexture","AppConfigs","CharacterModel","LoadedCharacterModel","size","requestJump","horizontalMoving","mass","velocity","Create","obj","diffuseMap","DefaultBotSize","newmodel","init","setMaterial","ShaderModel","CreateMaterial","getFourBounds","thisUpperBound","position","y","thisLowerBound","thisLeftBound","x","thisRightBound","update","deltaT","listOfTerrains","AllowMultiJump","Math","abs","JumpPower","Gravity","SlowDown","realVelX","terrain","upperBound","sizeY","lowerBound","leftBound","sizeX","rightBound","min","max","plus","transform","value"],"sources":["/Users/home/Desktop/College/Fall 2022/CS_4620/cs4620-final-project/src/app/BaseClasses/LoadedCharacterModel.ts"],"sourcesContent":["import {ALoadedModel} from \"../../anigraph/scene/nodes/loaded/ALoadedModel\";\nimport {AMaterial, AObject3DModelWrapper, ASerializable, AShaderMaterial, V3, Vec3} from \"../../anigraph\";\nimport {CharacterModelInterface} from \"./CharacterModel\";\nimport {ATexture} from \"../..//anigraph/rendering/ATexture\";\nimport {AppConfigs} from \"../AppConfigs\";\nimport {CharacterModel} from \".\";\nimport {GameTerrainModel} from \"../main/Nodes/GameTerrain/GameTerrainModel\";\n\n@ASerializable(\"LoadedCharacterModel\")\nexport class LoadedCharacterModel extends ALoadedModel implements CharacterModelInterface{\n    size!:number;\n    requestJump: boolean = false;\n    horizontalMoving: boolean = false;\n    static async Create(obj:AObject3DModelWrapper, diffuseMap:AShaderMaterial, size?:number, ...args:any[]){\n        size = size??AppConfigs.DefaultBotSize;\n        let newmodel = new this(obj, diffuseMap);\n        newmodel.size = size? size:0;\n        //await newmodel.init(diffuseMap);\n        return newmodel;\n    }\n\n    async init(diffuseMap:string|ATexture, ...args:any[]){\n        this.setMaterial(CharacterModel.ShaderModel.CreateMaterial(\n            (diffuseMap instanceof ATexture)? diffuseMap:new ATexture(diffuseMap)\n        ));\n    }\n\n    getFourBounds(): [number, number, number, number] {\n      const thisUpperBound = this.position.y + this.size / 2 + 0.5;\n      const thisLowerBound = this.position.y - this.size / 2 + 0.5;\n      const thisLeftBound = this.position.x - this.size / 2;\n      const thisRightBound = this.position.x + this.size / 2;\n      return [thisUpperBound, thisRightBound, thisLowerBound, thisLeftBound];\n    }\n\n    update(deltaT: number, listOfTerrains: GameTerrainModel[]) {\n        if (this.requestJump) {\n          if (AppConfigs.AllowMultiJump || Math.abs(this.velocity.y) < 0.001) {\n            this.velocity.y = AppConfigs.JumpPower;\n          }\n          this.requestJump = false;\n        }\n        this.velocity.y -= AppConfigs.Gravity;\n        if (!this.horizontalMoving) {\n          this.velocity.x /= 1 + AppConfigs.SlowDown;\n        }\n        let realVelX = this.velocity.x;\n        for (let terrain of listOfTerrains) {\n          if (terrain.position.y < -400) continue;\n          const upperBound = terrain.position.y + terrain.sizeY / 2;\n          const lowerBound = terrain.position.y - terrain.sizeY / 2;\n          const leftBound = terrain.position.x - terrain.sizeX / 2;\n          const rightBound = terrain.position.x + terrain.sizeX / 2;\n\n          const [\n            thisUpperBound,\n            thisRightBound,\n            thisLowerBound,\n            thisLeftBound\n          ] = this.getFourBounds();\n\n          if ((thisLowerBound < upperBound && thisLowerBound > lowerBound) ||\n            (thisUpperBound > lowerBound && thisUpperBound < upperBound) ||\n            Math.abs(thisLowerBound - lowerBound) < .00001 && Math.abs(thisUpperBound - upperBound) < .00001) {\n            if (this.velocity.x > 0 && thisRightBound + this.velocity.x > leftBound && thisLeftBound < rightBound) {\n              realVelX = Math.min(this.velocity.x, leftBound - thisRightBound);\n            }\n\n            if (this.velocity.x < 0 && thisLeftBound + this.velocity.x < rightBound && thisRightBound > rightBound) {\n              realVelX = Math.max(this.velocity.x, -(thisLeftBound - rightBound));\n            }\n          }\n\n          if ((thisLeftBound < rightBound && thisLeftBound > leftBound) ||\n            (thisRightBound > leftBound && thisRightBound < rightBound) ||\n            Math.abs(thisRightBound - rightBound) < .00001 && Math.abs(thisLeftBound - leftBound) < .00001) {\n            if (this.velocity.y < 0 && thisLowerBound + this.velocity.y < upperBound && thisUpperBound > upperBound) {\n              this.velocity.y = Math.max(this.velocity.y, -(thisLowerBound - upperBound));\n            }\n\n            if (this.velocity.y > 0 && thisUpperBound + this.velocity.y > lowerBound && thisLowerBound < lowerBound) {\n              this.velocity.y = Math.min(this.velocity.y, lowerBound - thisUpperBound);\n            }\n          }\n\n        }\n\n        this.position = this.position.plus(new Vec3(realVelX, this.velocity.y, 0));\n      }\n\n    mass:number=1;\n    velocity:Vec3 = V3();\n    get position(){\n        return this.transform.position;\n    }\n    set position(value:Vec3){\n        this.transform.position = value;\n    }\n}"],"mappings":";AAAA,SAAQA,YAAY,QAAO,gDAAgD;AAC3E,SAA0CC,aAAa,EAAmBC,EAAE,EAAEC,IAAI,QAAO,gBAAgB;AAEzG,SAAQC,QAAQ,QAAO,oCAAoC;AAC3D,SAAQC,UAAU,QAAO,eAAe;AACxC,SAAQC,cAAc,QAAO,GAAG;AAGhC,WACaC,oBAAoB,WADhCN,aAAa,CAAC,sBAAsB,CAAC,gBAAtC,MACaM,oBAAoB,SAASP,YAAY,CAAmC;EAAA;IAAA;IAAA,KACrFQ,IAAI;IAAA,KACJC,WAAW,GAAY,KAAK;IAAA,KAC5BC,gBAAgB,GAAY,KAAK;IAAA,KA8EjCC,IAAI,GAAQ,CAAC;IAAA,KACbC,QAAQ,GAAQV,EAAE,EAAE;EAAA;EA9EpB,aAAaW,MAAM,CAACC,GAAyB,EAAEC,UAA0B,EAAEP,IAAY,EAAgB;IAAA;IACnGA,IAAI,YAAGA,IAAI,yCAAEH,UAAU,CAACW,cAAc;IACtC,IAAIC,QAAQ,GAAG,IAAI,IAAI,CAACH,GAAG,EAAEC,UAAU,CAAC;IACxCE,QAAQ,CAACT,IAAI,GAAGA,IAAI,GAAEA,IAAI,GAAC,CAAC;IAC5B;IACA,OAAOS,QAAQ;EACnB;EAEA,MAAMC,IAAI,CAACH,UAA0B,EAAgB;IACjD,IAAI,CAACI,WAAW,CAACb,cAAc,CAACc,WAAW,CAACC,cAAc,CACrDN,UAAU,YAAYX,QAAQ,GAAGW,UAAU,GAAC,IAAIX,QAAQ,CAACW,UAAU,CAAC,CACxE,CAAC;EACN;EAEAO,aAAa,GAAqC;IAChD,MAAMC,cAAc,GAAG,IAAI,CAACC,QAAQ,CAACC,CAAC,GAAG,IAAI,CAACjB,IAAI,GAAG,CAAC,GAAG,GAAG;IAC5D,MAAMkB,cAAc,GAAG,IAAI,CAACF,QAAQ,CAACC,CAAC,GAAG,IAAI,CAACjB,IAAI,GAAG,CAAC,GAAG,GAAG;IAC5D,MAAMmB,aAAa,GAAG,IAAI,CAACH,QAAQ,CAACI,CAAC,GAAG,IAAI,CAACpB,IAAI,GAAG,CAAC;IACrD,MAAMqB,cAAc,GAAG,IAAI,CAACL,QAAQ,CAACI,CAAC,GAAG,IAAI,CAACpB,IAAI,GAAG,CAAC;IACtD,OAAO,CAACe,cAAc,EAAEM,cAAc,EAAEH,cAAc,EAAEC,aAAa,CAAC;EACxE;EAEAG,MAAM,CAACC,MAAc,EAAEC,cAAkC,EAAE;IACvD,IAAI,IAAI,CAACvB,WAAW,EAAE;MACpB,IAAIJ,UAAU,CAAC4B,cAAc,IAAIC,IAAI,CAACC,GAAG,CAAC,IAAI,CAACvB,QAAQ,CAACa,CAAC,CAAC,GAAG,KAAK,EAAE;QAClE,IAAI,CAACb,QAAQ,CAACa,CAAC,GAAGpB,UAAU,CAAC+B,SAAS;MACxC;MACA,IAAI,CAAC3B,WAAW,GAAG,KAAK;IAC1B;IACA,IAAI,CAACG,QAAQ,CAACa,CAAC,IAAIpB,UAAU,CAACgC,OAAO;IACrC,IAAI,CAAC,IAAI,CAAC3B,gBAAgB,EAAE;MAC1B,IAAI,CAACE,QAAQ,CAACgB,CAAC,IAAI,CAAC,GAAGvB,UAAU,CAACiC,QAAQ;IAC5C;IACA,IAAIC,QAAQ,GAAG,IAAI,CAAC3B,QAAQ,CAACgB,CAAC;IAC9B,KAAK,IAAIY,OAAO,IAAIR,cAAc,EAAE;MAClC,IAAIQ,OAAO,CAAChB,QAAQ,CAACC,CAAC,GAAG,CAAC,GAAG,EAAE;MAC/B,MAAMgB,UAAU,GAAGD,OAAO,CAAChB,QAAQ,CAACC,CAAC,GAAGe,OAAO,CAACE,KAAK,GAAG,CAAC;MACzD,MAAMC,UAAU,GAAGH,OAAO,CAAChB,QAAQ,CAACC,CAAC,GAAGe,OAAO,CAACE,KAAK,GAAG,CAAC;MACzD,MAAME,SAAS,GAAGJ,OAAO,CAAChB,QAAQ,CAACI,CAAC,GAAGY,OAAO,CAACK,KAAK,GAAG,CAAC;MACxD,MAAMC,UAAU,GAAGN,OAAO,CAAChB,QAAQ,CAACI,CAAC,GAAGY,OAAO,CAACK,KAAK,GAAG,CAAC;MAEzD,MAAM,CACJtB,cAAc,EACdM,cAAc,EACdH,cAAc,EACdC,aAAa,CACd,GAAG,IAAI,CAACL,aAAa,EAAE;MAExB,IAAKI,cAAc,GAAGe,UAAU,IAAIf,cAAc,GAAGiB,UAAU,IAC5DpB,cAAc,GAAGoB,UAAU,IAAIpB,cAAc,GAAGkB,UAAW,IAC5DP,IAAI,CAACC,GAAG,CAACT,cAAc,GAAGiB,UAAU,CAAC,GAAG,MAAM,IAAIT,IAAI,CAACC,GAAG,CAACZ,cAAc,GAAGkB,UAAU,CAAC,GAAG,MAAM,EAAE;QAClG,IAAI,IAAI,CAAC7B,QAAQ,CAACgB,CAAC,GAAG,CAAC,IAAIC,cAAc,GAAG,IAAI,CAACjB,QAAQ,CAACgB,CAAC,GAAGgB,SAAS,IAAIjB,aAAa,GAAGmB,UAAU,EAAE;UACrGP,QAAQ,GAAGL,IAAI,CAACa,GAAG,CAAC,IAAI,CAACnC,QAAQ,CAACgB,CAAC,EAAEgB,SAAS,GAAGf,cAAc,CAAC;QAClE;QAEA,IAAI,IAAI,CAACjB,QAAQ,CAACgB,CAAC,GAAG,CAAC,IAAID,aAAa,GAAG,IAAI,CAACf,QAAQ,CAACgB,CAAC,GAAGkB,UAAU,IAAIjB,cAAc,GAAGiB,UAAU,EAAE;UACtGP,QAAQ,GAAGL,IAAI,CAACc,GAAG,CAAC,IAAI,CAACpC,QAAQ,CAACgB,CAAC,EAAE,EAAED,aAAa,GAAGmB,UAAU,CAAC,CAAC;QACrE;MACF;MAEA,IAAKnB,aAAa,GAAGmB,UAAU,IAAInB,aAAa,GAAGiB,SAAS,IACzDf,cAAc,GAAGe,SAAS,IAAIf,cAAc,GAAGiB,UAAW,IAC3DZ,IAAI,CAACC,GAAG,CAACN,cAAc,GAAGiB,UAAU,CAAC,GAAG,MAAM,IAAIZ,IAAI,CAACC,GAAG,CAACR,aAAa,GAAGiB,SAAS,CAAC,GAAG,MAAM,EAAE;QAChG,IAAI,IAAI,CAAChC,QAAQ,CAACa,CAAC,GAAG,CAAC,IAAIC,cAAc,GAAG,IAAI,CAACd,QAAQ,CAACa,CAAC,GAAGgB,UAAU,IAAIlB,cAAc,GAAGkB,UAAU,EAAE;UACvG,IAAI,CAAC7B,QAAQ,CAACa,CAAC,GAAGS,IAAI,CAACc,GAAG,CAAC,IAAI,CAACpC,QAAQ,CAACa,CAAC,EAAE,EAAEC,cAAc,GAAGe,UAAU,CAAC,CAAC;QAC7E;QAEA,IAAI,IAAI,CAAC7B,QAAQ,CAACa,CAAC,GAAG,CAAC,IAAIF,cAAc,GAAG,IAAI,CAACX,QAAQ,CAACa,CAAC,GAAGkB,UAAU,IAAIjB,cAAc,GAAGiB,UAAU,EAAE;UACvG,IAAI,CAAC/B,QAAQ,CAACa,CAAC,GAAGS,IAAI,CAACa,GAAG,CAAC,IAAI,CAACnC,QAAQ,CAACa,CAAC,EAAEkB,UAAU,GAAGpB,cAAc,CAAC;QAC1E;MACF;IAEF;IAEA,IAAI,CAACC,QAAQ,GAAG,IAAI,CAACA,QAAQ,CAACyB,IAAI,CAAC,IAAI9C,IAAI,CAACoC,QAAQ,EAAE,IAAI,CAAC3B,QAAQ,CAACa,CAAC,EAAE,CAAC,CAAC,CAAC;EAC5E;EAIF,IAAID,QAAQ,GAAE;IACV,OAAO,IAAI,CAAC0B,SAAS,CAAC1B,QAAQ;EAClC;EACA,IAAIA,QAAQ,CAAC2B,KAAU,EAAC;IACpB,IAAI,CAACD,SAAS,CAAC1B,QAAQ,GAAG2B,KAAK;EACnC;AACJ,CAAC"},"metadata":{},"sourceType":"module"}