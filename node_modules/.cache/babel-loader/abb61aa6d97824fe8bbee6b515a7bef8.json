{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["/Users/home/Desktop/College/Fall 2022/CS_4620/cs4620-final-project/src/anigraph/base/amvc/AModelViewMap.ts"],"sourcesContent":["import {AObject} from \"../aobject\";\nimport {AView} from \"./AView\";\nimport {AModelInterface} from \"./AModel\";\nimport {ANodeView} from \"../../scene\";\n\n\nexport type MVMModelMap = {[modelID: string]:AModelInterface};\nexport type MVMViewMap = {[modelID: string]: {[viewID: string]:AView}};\n\n\n\nexport interface HasModelMap extends AObject{\n    get modelMap():MVMModelMap;\n    // _addModel(model:AModelInterface):void;\n    // _removeModel(model:AModelInterface):void;\n    hasModel(model:AModelInterface):boolean;\n    hasModelID(modelID:string):boolean;\n}\n\nexport interface HasModelViewMap{\n    get viewMap():MVMViewMap;\n    addView(view:AView):void;\n    removeView(view:AView):void;\n    getViewListForModel(model:AModelInterface):AView[];\n    hasView(view:AView):boolean;\n}\n\n// export class AModelViewMap extends AObject implements HasModelViewMap{\n//     protected _modelMap:MVMModelMap = {};\n//     protected _viewMap: MVMViewMap = {};\n//\n//     /** Get set map */\n//     get modelMap(){return this._modelMap;}\n//     get viewMap(){return this._viewMap;}\n//\n//     hasModel(model:AModelInterface){\n//         return (model.uid in this.modelMap);\n//     }\n//\n//     _hasModelID(modelID:string){\n//         return (modelID in this.modelMap);\n//     }\n//\n//     addModel(model:AModelInterface){\n//         if(this.hasModel(model)){\n//             throw new Error(`Model ${model} with uid ${model.uid} already in AModelViewMap`)\n//         }\n//         this.modelMap[model.uid]=model;\n//         this.viewMap[model.uid]={};\n//     }\n//\n//     removeModel(model:AModelInterface){\n//         delete this._modelMap[model.uid];\n//         delete this._viewMap[model.uid];\n//     }\n//\n//     hasView(view:AView){\n//         return (this._hasModelID(view.modelID) && view.uid in this.modelMap);\n//     }\n//\n//     addView(view:AView){\n//         let modelViews = this.viewMap[view.modelID][view.uid]=view;\n//     }\n//\n//     removeView(view:AView){\n//         delete this.viewMap[view.modelID][view.uid];\n//     }\n//\n//     getViewListForModel(model:AModelInterface){\n//         if(this.hasModel(model)) {\n//             return Object.values(this.viewMap[model.uid]);\n//         }\n//         else{\n//             return [];\n//         }\n//     }\n// }\n\n"],"mappings":""},"metadata":{},"sourceType":"module"}