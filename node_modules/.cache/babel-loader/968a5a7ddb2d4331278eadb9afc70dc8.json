{"ast":null,"code":"import * as THREE from \"three\";\nimport { VectorBase, Vec2, Vec3, Vec4, Mat3, Mat4, V4, V3 } from \"../math\";\nimport { Color } from \"../math\";\n// import {BufferAttribute} from \"three/src/core/BufferAttribute\";\n// import {InterleavedBufferAttribute} from \"three/src/core/InterleavedBufferAttribute\";\n\nexport class VertexAttributeArray extends VectorBase {\n  push(vertex) {\n    for (let i = 0; i < vertex.elements.length; i++) {\n      this.elements.push(vertex.elements[i]);\n    }\n  }\n  unshift(vertex) {\n    this.elements.unshift(...vertex.elements);\n  }\n  unshiftArray(vertices) {\n    let newcoords = [];\n    for (let v of vertices) {\n      newcoords.push(...v.elements);\n    }\n    this.elements.unshift(...newcoords);\n  }\n  pushArray(vertices) {\n    let newcoords = [];\n    for (let v of vertices) {\n      newcoords.push(...v.elements);\n    }\n    this.elements = this.elements.concat(newcoords);\n  }\n  Float32Array() {\n    return new Float32Array(this.elements);\n  }\n  BufferAttribute(itemSize) {\n    itemSize = itemSize !== undefined ? itemSize : -1;\n    return new THREE.Float32BufferAttribute(new Float32Array(this.elements), itemSize);\n  }\n  InstancedBufferAttribute(itemSize) {\n    itemSize = itemSize !== undefined ? itemSize : -1;\n    return new THREE.InstancedBufferAttribute(new Float32Array(this.elements), itemSize);\n  }\n}\nVertexAttributeArray.ElementsPerVertex = -1;\nexport class VertexAttributeArray2D extends VertexAttributeArray {\n  // constructor(elements?:number[])\n  // constructor(...args:any[]) {\n  //     super(...args);\n  // }\n\n  getElementsSlice() {\n    // return this.elements.slice(0,this.nVerts*VertexAttributeArray2D.ElementsPerVertex);\n    return this.elements.slice();\n  }\n  static FromThreeJS(attr) {\n    return new this(Array.from(attr.array));\n  }\n  push(vertex) {\n    this.elements.push(vertex.elements[0]);\n    this.elements.push(vertex.elements[1]);\n  }\n  getAt(i) {\n    return new Vec2(this.elements[i * 2], this.elements[i * 2 + 1]);\n  }\n  setAt(i, vertex) {\n    let elements = vertex instanceof Vec2 ? vertex.elements : vertex;\n    this.elements[i * 2] = elements[0];\n    this.elements[i * 2 + 1] = elements[1];\n  }\n  BufferAttribute() {\n    let itemSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 2;\n    return new THREE.BufferAttribute(new Float32Array(this.elements), itemSize);\n  }\n  InstancedBufferAttribute() {\n    let itemSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 2;\n    return new THREE.InstancedBufferAttribute(new Float32Array(this.elements), itemSize);\n  }\n  get nVerts() {\n    return this.elements.length / 2;\n  }\n}\nVertexAttributeArray2D.ElementsPerVertex = 2;\nexport class VertexAttributeArray3D extends VertexAttributeArray {\n  getAt(i) {\n    return new Vec3(this.elements[i * 3], this.elements[i * 3 + 1], this.elements[i * 3 + 2]);\n  }\n  getElementsSlice() {\n    // return this.elements.slice(0,this.nVerts*VertexAttributeArray3D.ElementsPerVertex);\n    return this.elements.slice();\n  }\n  static FromThreeJS(attr) {\n    return new this(Array.from(attr.array));\n  }\n  setAt(i, vertex) {\n    let elements = vertex instanceof Vec3 ? vertex.elements : vertex;\n    this.elements[i * 3] = elements[0];\n    this.elements[i * 3 + 1] = elements[1];\n    this.elements[i * 3 + 2] = elements[2];\n  }\n  pushArray(vertices) {\n    let newcoords = [];\n    for (let v of vertices) {\n      newcoords.push(...v.elements);\n    }\n    this.elements = this.elements.concat(newcoords);\n  }\n  BufferAttribute() {\n    let itemSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 3;\n    return new THREE.BufferAttribute(new Float32Array(this.elements), itemSize);\n  }\n  InstancedBufferAttribute() {\n    let itemSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 3;\n    return new THREE.InstancedBufferAttribute(new Float32Array(this.elements), itemSize);\n  }\n  get nVerts() {\n    return this.elements.length / 3;\n  }\n  ApplyMatrix(m) {\n    m = m instanceof Mat4 ? m : Mat4.From2DMat3(m);\n    for (let v = 0; v < this.nVerts; v++) {\n      this.setAt(v, m.times(this.getAt(v).Point3DH).Point3D);\n    }\n    return this;\n  }\n  GetTransformedByMatrix(m) {\n    let rval = this.deepCopy();\n    return rval.ApplyMatrix(m);\n  }\n}\nVertexAttributeArray3D.ElementsPerVertex = 3;\nexport class VertexAttributeArray4D extends VertexAttributeArray {\n  constructor() {\n    super(...arguments);\n    this._defaultH = 0;\n  }\n  getElementsSlice() {\n    // return this.elements.slice(0,this.nVerts*VertexAttributeArray4D.ElementsPerVertex);\n    return this.elements.slice();\n  }\n  static FromThreeJS(attr) {\n    return new this(Array.from(attr.array));\n  }\n  getAt(i) {\n    return new Vec4(this.elements[i * 4], this.elements[i * 4 + 1], this.elements[i * 4 + 2], this.elements[i * 4 + 3]);\n  }\n  setAt(i, vertex) {\n    if (vertex instanceof Vec3) {\n      vertex = vertex.Point3DH;\n    }\n    let elements = vertex instanceof Vec4 ? vertex.elements : vertex;\n    this.elements[i * 4] = elements[0];\n    this.elements[i * 4 + 1] = elements[1];\n    this.elements[i * 4 + 2] = elements[2];\n    this.elements[i * 4 + 3] = elements[3];\n  }\n  BufferAttribute() {\n    let itemSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 4;\n    return new THREE.BufferAttribute(new Float32Array(this.elements), itemSize);\n  }\n  InstancedBufferAttribute() {\n    let itemSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 4;\n    return new THREE.InstancedBufferAttribute(new Float32Array(this.elements), itemSize);\n  }\n  get nVerts() {\n    return this.elements.length / 4;\n  }\n  ApplyMatrix(m) {\n    m = m instanceof Mat4 ? m : Mat4.From2DMat3(m);\n    // let rval = this.clone();\n    for (let v = 0; v < this.nVerts; v++) {\n      this.setAt(v, m.times(this.getAt(v)));\n    }\n    return this;\n  }\n  GetTransformedByMatrix(m) {\n    let rval = this.deepCopy();\n    return rval.ApplyMatrix(m);\n  }\n  push(vertex) {\n    this.elements.push(vertex.elements[0]);\n    this.elements.push(vertex.elements[1]);\n    this.elements.push(vertex.elements[2]);\n    if (vertex.elements.length === 3) {\n      this.elements.push(this._defaultH);\n    } else if (vertex.elements.length === 4) {\n      this.elements.push(vertex.elements[3]);\n    } else {\n      throw new Error(`Can't push ${vertex} onto ${this}`);\n    }\n  }\n}\nVertexAttributeArray4D.ElementsPerVertex = 4;\nexport class VertexAttributeColor3DArray extends VertexAttributeArray {\n  static FromThreeJS(attr) {\n    return new this(Array.from(attr.array));\n  }\n  getElementsSlice() {\n    // return this.elements.slice(0,this.nVerts*VertexAttributeColorArray.ElementsPerVertex);\n    return this.elements.slice();\n  }\n  getAt(i) {\n    return new Color(this.elements[i * VertexAttributeColor3DArray.ElementsPerVertex], this.elements[i * VertexAttributeColor3DArray.ElementsPerVertex + 1], this.elements[i * VertexAttributeColor3DArray.ElementsPerVertex + 2]);\n  }\n  getVec4At(i) {\n    return V4(this.elements[i * VertexAttributeColor3DArray.ElementsPerVertex], this.elements[i * VertexAttributeColor3DArray.ElementsPerVertex + 1], this.elements[i * VertexAttributeColor3DArray.ElementsPerVertex + 2], 1);\n  }\n  setAt(i, vertex) {\n    if (vertex instanceof Color) {\n      vertex = V3(vertex.r, vertex.g, vertex.b);\n    }\n    let elements = vertex instanceof Vec3 ? vertex.elements : vertex;\n    this.elements[i * VertexAttributeColor3DArray.ElementsPerVertex] = elements[0];\n    this.elements[i * VertexAttributeColor3DArray.ElementsPerVertex + 1] = elements[1];\n    this.elements[i * VertexAttributeColor3DArray.ElementsPerVertex + 2] = elements[2];\n  }\n  BufferAttribute() {\n    let itemSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 3;\n    return new THREE.BufferAttribute(new Float32Array(this.elements), itemSize);\n  }\n  InstancedBufferAttribute() {\n    let itemSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 3;\n    return new THREE.InstancedBufferAttribute(new Float32Array(this.elements), itemSize);\n  }\n  get nVerts() {\n    return this.elements.length / VertexAttributeColor3DArray.ElementsPerVertex;\n  }\n\n  // ApplyMatrix(m: Mat3) {\n  //   let rval = this.clone();\n  //   for (let v = 0; v < this.nVerts; v++) {\n  //     rval.setAt(v, m.times(this.getAt(v)).elements);\n  //   }\n  //   return rval;\n  // }\n\n  push(vertex) {\n    this.elements.push(vertex.elements[0]);\n    this.elements.push(vertex.elements[1]);\n    this.elements.push(vertex.elements[2]);\n  }\n  pushArray(vertices) {\n    let newcoords = [];\n    for (let v of vertices) {\n      newcoords.push(...v.elements);\n    }\n    // vertices.map((v:VectorBase)=>{\n    //   newcoords.push(...v.elements);\n    //   // if(v.elements.length===3){\n    //   //   newcoords.push(this._defaultAlpha);\n    //   // }\n    // });\n    this.elements = this.elements.concat(newcoords);\n  }\n}\nVertexAttributeColor3DArray.ElementsPerVertex = 3;\nexport class VertexAttributeColorArray extends VertexAttributeArray {\n  constructor() {\n    super(...arguments);\n    this._defaultAlpha = 1;\n  }\n  static FromThreeJS(attr) {\n    return new this(Array.from(attr.array));\n  }\n  getElementsSlice() {\n    // return this.elements.slice(0,this.nVerts*VertexAttributeColorArray.ElementsPerVertex);\n    return this.elements.slice();\n  }\n  getAt(i) {\n    return Color.FromRGBA(this.elements[i * 4], this.elements[i * 4 + 1], this.elements[i * 4 + 2], this.elements[i * 4 + 3]);\n  }\n  getVec4At(i) {\n    return V4(this.elements[i * 4], this.elements[i * 4 + 1], this.elements[i * 4 + 2], this.elements[i * 4 + 3]);\n  }\n  setAt(i, vertex) {\n    if (vertex instanceof Vec3) {\n      vertex = vertex.Point3DH;\n    }\n    if (vertex instanceof Color) {\n      vertex = vertex.Vec4;\n    }\n    let elements = vertex instanceof Vec4 ? vertex.elements : vertex;\n    this.elements[i * 4] = elements[0];\n    this.elements[i * 4 + 1] = elements[1];\n    this.elements[i * 4 + 2] = elements[2];\n    this.elements[i * 4 + 3] = elements[3];\n  }\n  BufferAttribute() {\n    let itemSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 4;\n    return new THREE.BufferAttribute(new Float32Array(this.elements), itemSize);\n  }\n  InstancedBufferAttribute() {\n    let itemSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 4;\n    return new THREE.InstancedBufferAttribute(new Float32Array(this.elements), itemSize);\n  }\n  get nVerts() {\n    return this.elements.length / 4;\n  }\n  ApplyMatrix(m) {\n    m = m instanceof Mat4 ? m : Mat4.From2DMat3(m);\n    // let rval = this.clone();\n    for (let v = 0; v < this.nVerts; v++) {\n      this.setAt(v, m.times(this.getVec4At(v)));\n    }\n    return this;\n  }\n  push(vertex) {\n    this.elements.push(vertex.elements[0]);\n    this.elements.push(vertex.elements[1]);\n    this.elements.push(vertex.elements[2]);\n    if (vertex.elements.length === 3) {\n      this.elements.push(this._defaultAlpha);\n    } else if (vertex.elements.length === 4) {\n      this.elements.push(vertex.elements[3]);\n    } else {\n      throw new Error(`Can't push ${vertex} onto ${this}`);\n    }\n  }\n  pushArray(vertices) {\n    let newcoords = [];\n    for (let v of vertices) {\n      newcoords.push(...v.elements);\n      if (v.elements.length === 3) {\n        newcoords.push(this._defaultAlpha);\n      }\n    }\n    // vertices.map((v:VectorBase)=>{\n    //   newcoords.push(...v.elements);\n    //   if(v.elements.length===3){\n    //     newcoords.push(this._defaultAlpha);\n    //   }\n    // });\n    this.elements = this.elements.concat(newcoords);\n  }\n}\nVertexAttributeColorArray.ElementsPerVertex = 4;\nexport class VertexPositionArray2DH extends VertexAttributeArray3D {\n  constructor() {\n    super(...arguments);\n    this._defaultZ = 0;\n  }\n  // constructor(elements?:number[])\n  // constructor(...args:any[]) {\n  //     super(...args);\n  // }\n\n  static FromThreeJS(attr) {\n    return new this(Array.from(attr.array));\n  }\n  push(vertex) {\n    let newcoords = vertex.elements.slice();\n    // this.elements.push(vertex.elements[0]);\n    // this.elements.push(vertex.elements[1]);\n    if (vertex.elements.length === 2) {\n      // this.elements.push(this._defaultZ);\n      newcoords.push(this._defaultZ);\n    }\n    this.elements = this.elements.concat(newcoords);\n    // else if(vertex.elements.length===3){\n    //     this.elements.push(vertex.elements[2]);\n    // }else{\n    //     throw new Error(`Can't push ${vertex} onto ${this}`);\n    // }\n  }\n\n  pushArray(vertices) {\n    let newcoords = [];\n    vertices.map(v => {\n      newcoords.push(...v.elements);\n      if (v.elements.length === 2) {\n        newcoords.push(this._defaultZ);\n      }\n      return;\n    });\n    this.elements = this.elements.concat(newcoords);\n  }\n  unshift(vertex) {\n    let newcoords = vertex.elements.slice();\n    if (vertex.elements.length === 2) {\n      newcoords.push(this._defaultZ);\n    }\n    this.elements.unshift(...newcoords);\n  }\n  unshiftArray(vertices) {\n    let newcoords = [];\n    for (let v of vertices) {\n      newcoords.push(...v.elements);\n      if (v.elements.length === 2) {\n        newcoords.push(this._defaultZ);\n      }\n    }\n    // vertices.map((v:Vec2|Vec3)=>{\n    //   newcoords.push(...v.elements);\n    //   if (v.elements.length === 2) {\n    //     newcoords.push(this._defaultZ);\n    //   }\n    // });\n    this.elements.unshift(...newcoords);\n  }\n  get nVerts() {\n    return this.elements.length / 3;\n  }\n  getAt(i) {\n    return new Vec3(this.elements[i * 3], this.elements[i * 3 + 1], this.elements[i * 3 + 2]);\n  }\n  getPoint2DAt(i) {\n    return this.getAt(i).Point2D;\n  }\n  setAt(i, vertex) {\n    let elements = Array.isArray(vertex) ? vertex : vertex.elements;\n    this.elements[i * 3] = elements[0];\n    this.elements[i * 3 + 1] = elements[1];\n    if (elements.length === 2) {\n      this.elements[i * 3 + 2] = this._defaultZ;\n    } else {\n      this.elements[i * 3 + 2] = elements[2];\n    }\n  }\n  ApplyMatrix(m) {\n    // let rval = this.clone();\n    if (m instanceof Mat3) {\n      for (let v = 0; v < this.nVerts; v++) {\n        this.setAt(v, m.times(this.getAt(v).Point2D));\n      }\n    } else {\n      for (let v = 0; v < this.nVerts; v++) {\n        this.setAt(v, m.times(this.getAt(v).Point3DH).Point3D);\n      }\n    }\n    return this;\n  }\n  GetTransformedByMatrix(m) {\n    let rval = this.deepCopy();\n    return rval.ApplyMatrix(m);\n  }\n}\nexport class VertexPositionArray3DH extends VertexAttributeArray4D {\n  constructor() {\n    super(...arguments);\n    this._defaultH = 1;\n  }\n  // constructor(elements?:number[])\n  // constructor(...args:any[]) {\n  //     super(...args);\n  // }\n\n  static FromThreeJS(attr) {\n    return new this(Array.from(attr.array));\n  }\n  getAt(i) {\n    return new Vec4(this.elements[i * 4], this.elements[i * 4 + 1], this.elements[i * 4 + 2], this.elements[i * 4 + 3]);\n  }\n  setAt(i, vertex) {\n    let elements = Array.isArray(vertex) ? vertex : vertex.elements;\n    this.elements[i * 4] = elements[0];\n    this.elements[i * 4 + 1] = elements[1];\n    this.elements[i * 4 + 2] = elements[2];\n    if (elements.length === 3) {\n      this.elements[i * 4 + 3] = this._defaultH;\n    } else {\n      this.elements[i * 4 + 3] = elements[3];\n    }\n  }\n}\nexport function VertexAttributeArrayFromThreeJS(threeattribute) {\n  switch (threeattribute.itemSize) {\n    case 2:\n      return VertexAttributeArray2D.FromThreeJS(threeattribute);\n    // break;\n    case 3:\n      return VertexAttributeArray3D.FromThreeJS(threeattribute);\n    // break;\n    case 4:\n      return VertexAttributeArray4D.FromThreeJS(threeattribute);\n    // break;\n    default:\n      throw new Error(\"What kind of attribute dis?\");\n    // break;\n  }\n}\n_c = VertexAttributeArrayFromThreeJS;\nvar _c;\n$RefreshReg$(_c, \"VertexAttributeArrayFromThreeJS\");","map":{"version":3,"names":["THREE","VectorBase","Vec2","Vec3","Vec4","Mat3","Mat4","V4","V3","Color","VertexAttributeArray","push","vertex","i","elements","length","unshift","unshiftArray","vertices","newcoords","v","pushArray","concat","Float32Array","BufferAttribute","itemSize","undefined","Float32BufferAttribute","InstancedBufferAttribute","ElementsPerVertex","VertexAttributeArray2D","getElementsSlice","slice","FromThreeJS","attr","Array","from","array","getAt","setAt","nVerts","VertexAttributeArray3D","ApplyMatrix","m","From2DMat3","times","Point3DH","Point3D","GetTransformedByMatrix","rval","deepCopy","VertexAttributeArray4D","_defaultH","Error","VertexAttributeColor3DArray","getVec4At","r","g","b","VertexAttributeColorArray","_defaultAlpha","FromRGBA","VertexPositionArray2DH","_defaultZ","map","getPoint2DAt","Point2D","isArray","VertexPositionArray3DH","VertexAttributeArrayFromThreeJS","threeattribute"],"sources":["/Users/home/Desktop/cs4620-final-project/src/anigraph/geometry/VertexAttributeArray.ts"],"sourcesContent":["import * as THREE from \"three\";\nimport {VectorBase, Vec2, Vec3, Vec4, Mat3, Mat4, V4, V3} from \"../math\";\nimport {Color} from \"../math\";\n// import {BufferAttribute} from \"three/src/core/BufferAttribute\";\n// import {InterleavedBufferAttribute} from \"three/src/core/InterleavedBufferAttribute\";\n\nexport abstract class VertexAttributeArray<V extends VectorBase> extends VectorBase {\n  static ElementsPerVertex: number = -1;\n  abstract getAt(i: number): V;\n  abstract setAt(i: number, vertex: V): void;\n\n  abstract get nVerts(): number;\n\n  abstract getElementsSlice():number[];\n\n\n  push(vertex: V) {\n    for (let i = 0; i < vertex.elements.length; i++) {\n      this.elements.push(vertex.elements[i]);\n    }\n  }\n\n  unshift(vertex: V) {\n    this.elements.unshift(...vertex.elements);\n  }\n  unshiftArray(vertices: V[]) {\n    let newcoords:number[] = [];\n    for(let v of vertices){\n      newcoords.push(...v.elements);\n    }\n    this.elements.unshift(...newcoords);\n  }\n\n  pushArray(vertices:V[]){\n    let newcoords:number[] = [];\n    for(let v of vertices){\n      newcoords.push(...v.elements);\n    }\n    this.elements = this.elements.concat(newcoords);\n  }\n\n  Float32Array() {\n    return new Float32Array(this.elements);\n  }\n\n  BufferAttribute(itemSize?: number) {\n    itemSize = itemSize !== undefined ? itemSize : -1;\n    return new THREE.Float32BufferAttribute(\n      new Float32Array(this.elements),\n      itemSize\n    );\n  }\n  InstancedBufferAttribute(itemSize?: number) {\n    itemSize = itemSize !== undefined ? itemSize : -1;\n    return new THREE.InstancedBufferAttribute(\n      new Float32Array(this.elements),\n      itemSize\n    );\n  }\n}\n\nexport class VertexAttributeArray2D extends VertexAttributeArray<Vec2> {\n  static ElementsPerVertex: number = 2;\n  // constructor(elements?:number[])\n  // constructor(...args:any[]) {\n  //     super(...args);\n  // }\n\n  getElementsSlice(){\n    // return this.elements.slice(0,this.nVerts*VertexAttributeArray2D.ElementsPerVertex);\n    return this.elements.slice();\n  }\n\n  static FromThreeJS(\n    attr: THREE.BufferAttribute | THREE.InterleavedBufferAttribute\n  ) {\n    return new this(Array.from(attr.array));\n  }\n\n  push(vertex: Vec2) {\n    this.elements.push(vertex.elements[0]);\n    this.elements.push(vertex.elements[1]);\n  }\n\n  getAt(i: number) {\n    return new Vec2(this.elements[i * 2], this.elements[i * 2 + 1]);\n  }\n\n  setAt(i: number, vertex: Vec2 | number[]) {\n    let elements = vertex instanceof Vec2 ? vertex.elements : vertex;\n    this.elements[i * 2] = elements[0];\n    this.elements[i * 2 + 1] = elements[1];\n  }\n\n  BufferAttribute(itemSize: number = 2) {\n    return new THREE.BufferAttribute(new Float32Array(this.elements), itemSize);\n  }\n  InstancedBufferAttribute(itemSize: number = 2) {\n    return new THREE.InstancedBufferAttribute(\n      new Float32Array(this.elements),\n      itemSize\n    );\n  }\n\n  get nVerts() {\n    return this.elements.length / 2;\n  }\n}\n\nexport class VertexAttributeArray3D extends VertexAttributeArray<Vec3> {\n  static ElementsPerVertex: number = 3;\n  getAt(i: number) {\n    return new Vec3(\n      this.elements[i * 3],\n      this.elements[i * 3 + 1],\n      this.elements[i * 3 + 2]\n    );\n  }\n\n  getElementsSlice(){\n    // return this.elements.slice(0,this.nVerts*VertexAttributeArray3D.ElementsPerVertex);\n    return this.elements.slice();\n  }\n\n  static FromThreeJS(\n    attr: THREE.BufferAttribute | THREE.InterleavedBufferAttribute\n  ) {\n    return new this(Array.from(attr.array));\n  }\n\n  setAt(i: number, vertex: Vec3 | number[]) {\n    let elements = vertex instanceof Vec3 ? vertex.elements : vertex;\n    this.elements[i * 3] = elements[0];\n    this.elements[i * 3 + 1] = elements[1];\n    this.elements[i * 3 + 2] = elements[2];\n  }\n\n  pushArray(vertices: Vec3[]) {\n    let newcoords:number[] = [];\n    for(let v of vertices){\n      newcoords.push(...v.elements);\n    }\n    this.elements = this.elements.concat(newcoords);\n  }\n\n  BufferAttribute(itemSize: number = 3) {\n    return new THREE.BufferAttribute(new Float32Array(this.elements), itemSize);\n  }\n\n  InstancedBufferAttribute(itemSize: number = 3) {\n    return new THREE.InstancedBufferAttribute(\n      new Float32Array(this.elements),\n      itemSize\n    );\n  }\n\n  get nVerts() {\n    return this.elements.length / 3;\n  }\n\n  ApplyMatrix(m: Mat4 | Mat3) {\n    m = m instanceof Mat4 ? m : Mat4.From2DMat3(m);\n    for (let v = 0; v < this.nVerts; v++) {\n      this.setAt(v, m.times(this.getAt(v).Point3DH).Point3D);\n    }\n    return this;\n  }\n\n  GetTransformedByMatrix(m:Mat3|Mat4){\n    let rval = this.deepCopy();\n    return rval.ApplyMatrix(m);\n  }\n\n}\n\nexport class VertexAttributeArray4D extends VertexAttributeArray<Vec4> {\n  static ElementsPerVertex: number = 4;\n  _defaultH = 0;\n\n  getElementsSlice(){\n    // return this.elements.slice(0,this.nVerts*VertexAttributeArray4D.ElementsPerVertex);\n    return this.elements.slice();\n  }\n\n  static FromThreeJS(\n    attr: THREE.BufferAttribute | THREE.InterleavedBufferAttribute\n  ) {\n    return new this(Array.from(attr.array));\n  }\n\n  getAt(i: number) {\n    return new Vec4(\n      this.elements[i * 4],\n      this.elements[i * 4 + 1],\n      this.elements[i * 4 + 2],\n      this.elements[i * 4 + 3]\n    );\n  }\n  setAt(i: number, vertex: Vec4 | Vec3 | number[]) {\n    if (vertex instanceof Vec3) {\n      vertex = vertex.Point3DH;\n    }\n    let elements = vertex instanceof Vec4 ? vertex.elements : vertex;\n    this.elements[i * 4] = elements[0];\n    this.elements[i * 4 + 1] = elements[1];\n    this.elements[i * 4 + 2] = elements[2];\n    this.elements[i * 4 + 3] = elements[3];\n  }\n\n  BufferAttribute(itemSize: number = 4) {\n    return new THREE.BufferAttribute(new Float32Array(this.elements), itemSize);\n  }\n\n  InstancedBufferAttribute(itemSize: number = 4) {\n    return new THREE.InstancedBufferAttribute(\n      new Float32Array(this.elements),\n      itemSize\n    );\n  }\n\n  get nVerts() {\n    return this.elements.length / 4;\n  }\n\n  ApplyMatrix(m: Mat4 | Mat3) {\n    m = m instanceof Mat4 ? m : Mat4.From2DMat3(m);\n    // let rval = this.clone();\n    for (let v = 0; v < this.nVerts; v++) {\n      this.setAt(v, m.times(this.getAt(v)));\n    }\n    return this;\n  }\n\n  GetTransformedByMatrix(m:Mat3|Mat4){\n    let rval = this.deepCopy();\n    return rval.ApplyMatrix(m);\n  }\n\n\n  push(vertex: Vec4 | Vec3) {\n    this.elements.push(vertex.elements[0]);\n    this.elements.push(vertex.elements[1]);\n    this.elements.push(vertex.elements[2]);\n    if (vertex.elements.length === 3) {\n      this.elements.push(this._defaultH);\n    } else if (vertex.elements.length === 4) {\n      this.elements.push(vertex.elements[3]);\n    } else {\n      throw new Error(`Can't push ${vertex} onto ${this}`);\n    }\n  }\n}\n\n\nexport class VertexAttributeColor3DArray extends VertexAttributeArray<Color> {\n  static ElementsPerVertex: number = 3;\n  static FromThreeJS(\n      attr: THREE.BufferAttribute | THREE.InterleavedBufferAttribute\n  ) {\n    return new this(Array.from(attr.array));\n  }\n\n  getElementsSlice(){\n    // return this.elements.slice(0,this.nVerts*VertexAttributeColorArray.ElementsPerVertex);\n    return this.elements.slice()\n  }\n\n  getAt(i: number):Color{\n    return new Color(\n        this.elements[i * VertexAttributeColor3DArray.ElementsPerVertex],\n        this.elements[i * VertexAttributeColor3DArray.ElementsPerVertex + 1],\n        this.elements[i * VertexAttributeColor3DArray.ElementsPerVertex + 2]\n    );\n  }\n\n  getVec4At(i: number) {\n    return V4(\n        this.elements[i * VertexAttributeColor3DArray.ElementsPerVertex],\n        this.elements[i * VertexAttributeColor3DArray.ElementsPerVertex + 1],\n        this.elements[i * VertexAttributeColor3DArray.ElementsPerVertex + 2],\n        1\n    );\n  }\n\n  setAt(i: number, vertex: Color | Vec3 | number[]) {\n    if(vertex instanceof Color){\n      vertex = V3(vertex.r, vertex.g, vertex.b);\n    }\n    let elements = vertex instanceof Vec3 ? vertex.elements : vertex;\n    this.elements[i * VertexAttributeColor3DArray.ElementsPerVertex] = elements[0];\n    this.elements[i * VertexAttributeColor3DArray.ElementsPerVertex + 1] = elements[1];\n    this.elements[i * VertexAttributeColor3DArray.ElementsPerVertex + 2] = elements[2];\n  }\n\n  BufferAttribute(itemSize: number = 3) {\n    return new THREE.BufferAttribute(new Float32Array(this.elements), itemSize);\n  }\n\n  InstancedBufferAttribute(itemSize: number = 3) {\n    return new THREE.InstancedBufferAttribute(\n        new Float32Array(this.elements),\n        itemSize\n    );\n  }\n\n  get nVerts() {\n    return this.elements.length / VertexAttributeColor3DArray.ElementsPerVertex;\n  }\n\n  // ApplyMatrix(m: Mat3) {\n  //   let rval = this.clone();\n  //   for (let v = 0; v < this.nVerts; v++) {\n  //     rval.setAt(v, m.times(this.getAt(v)).elements);\n  //   }\n  //   return rval;\n  // }\n\n  push(vertex: Color | Vec4 | Vec3) {\n    this.elements.push(vertex.elements[0]);\n    this.elements.push(vertex.elements[1]);\n    this.elements.push(vertex.elements[2]);\n  }\n\n  pushArray(vertices:Vec3[]|Vec4[]|Color[]){\n    let newcoords:number[] = [];\n    for(let v of vertices){\n      newcoords.push(...v.elements);\n    }\n    // vertices.map((v:VectorBase)=>{\n    //   newcoords.push(...v.elements);\n    //   // if(v.elements.length===3){\n    //   //   newcoords.push(this._defaultAlpha);\n    //   // }\n    // });\n    this.elements = this.elements.concat(newcoords);\n  }\n}\n\nexport class VertexAttributeColorArray extends VertexAttributeArray<Color> {\n  static ElementsPerVertex: number = 4;\n  _defaultAlpha = 1;\n\n  static FromThreeJS(\n      attr: THREE.BufferAttribute | THREE.InterleavedBufferAttribute\n  ) {\n    return new this(Array.from(attr.array));\n  }\n\n  getElementsSlice(){\n    // return this.elements.slice(0,this.nVerts*VertexAttributeColorArray.ElementsPerVertex);\n    return this.elements.slice();\n  }\n\n  getAt(i: number) {\n    return Color.FromRGBA(\n        this.elements[i * 4],\n        this.elements[i * 4 + 1],\n        this.elements[i * 4 + 2],\n        this.elements[i * 4 + 3]\n    );\n  }\n\n  getVec4At(i: number) {\n    return V4(\n        this.elements[i * 4],\n        this.elements[i * 4 + 1],\n        this.elements[i * 4 + 2],\n        this.elements[i * 4 + 3]\n    );\n  }\n\n  setAt(i: number, vertex: Color | Vec4 | Vec3 | number[]) {\n    if (vertex instanceof Vec3) {\n      vertex = vertex.Point3DH;\n    }\n    if(vertex instanceof Color){\n      vertex = vertex.Vec4;\n    }\n    let elements = vertex instanceof Vec4 ? vertex.elements : vertex;\n    this.elements[i * 4] = elements[0];\n    this.elements[i * 4 + 1] = elements[1];\n    this.elements[i * 4 + 2] = elements[2];\n    this.elements[i * 4 + 3] = elements[3];\n  }\n\n  BufferAttribute(itemSize: number = 4) {\n    return new THREE.BufferAttribute(new Float32Array(this.elements), itemSize);\n  }\n\n  InstancedBufferAttribute(itemSize: number = 4) {\n    return new THREE.InstancedBufferAttribute(\n        new Float32Array(this.elements),\n        itemSize\n    );\n  }\n\n  get nVerts() {\n    return this.elements.length / 4;\n  }\n\n  ApplyMatrix(m: Mat4 | Mat3) {\n    m = m instanceof Mat4 ? m : Mat4.From2DMat3(m);\n    // let rval = this.clone();\n    for (let v = 0; v < this.nVerts; v++) {\n      this.setAt(v, m.times(this.getVec4At(v)));\n    }\n    return this;\n  }\n\n\n\n  push(vertex: Color | Vec4 | Vec3) {\n    this.elements.push(vertex.elements[0]);\n    this.elements.push(vertex.elements[1]);\n    this.elements.push(vertex.elements[2]);\n    if (vertex.elements.length === 3) {\n      this.elements.push(this._defaultAlpha);\n    } else if (vertex.elements.length === 4) {\n      this.elements.push(vertex.elements[3]);\n    } else {\n      throw new Error(`Can't push ${vertex} onto ${this}`);\n    }\n  }\n\n  pushArray(vertices:Vec3[]|Vec4[]|Color[]){\n    let newcoords:number[] = [];\n    for(let v of vertices){\n      newcoords.push(...v.elements);\n      if(v.elements.length===3){\n        newcoords.push(this._defaultAlpha);\n      }\n    }\n    // vertices.map((v:VectorBase)=>{\n    //   newcoords.push(...v.elements);\n    //   if(v.elements.length===3){\n    //     newcoords.push(this._defaultAlpha);\n    //   }\n    // });\n    this.elements = this.elements.concat(newcoords);\n  }\n}\n\n\nexport class VertexPositionArray2DH extends VertexAttributeArray3D {\n  public _defaultZ: number = 0;\n  // constructor(elements?:number[])\n  // constructor(...args:any[]) {\n  //     super(...args);\n  // }\n\n  static FromThreeJS(\n    attr: THREE.BufferAttribute | THREE.InterleavedBufferAttribute\n  ) {\n    return new this(Array.from(attr.array));\n  }\n\n  push(vertex: Vec3 | Vec2) {\n    let newcoords = vertex.elements.slice();\n    // this.elements.push(vertex.elements[0]);\n    // this.elements.push(vertex.elements[1]);\n    if (vertex.elements.length === 2) {\n      // this.elements.push(this._defaultZ);\n      newcoords.push(this._defaultZ);\n    }\n    this.elements = this.elements.concat(newcoords);\n    // else if(vertex.elements.length===3){\n    //     this.elements.push(vertex.elements[2]);\n    // }else{\n    //     throw new Error(`Can't push ${vertex} onto ${this}`);\n    // }\n  }\n\n  pushArray(vertices: Vec3[] | Vec2[]) {\n    let newcoords:number[] = [];\n    vertices.map((v:Vec2|Vec3)=>{\n      newcoords.push(...v.elements);\n      if (v.elements.length === 2) {\n        newcoords.push(this._defaultZ);\n      }\n      return\n    });\n    this.elements = this.elements.concat(newcoords);\n  }\n\n  unshift(vertex: Vec3 | Vec2) {\n    let newcoords = vertex.elements.slice();\n    if (vertex.elements.length === 2) {\n      newcoords.push(this._defaultZ);\n    }\n    this.elements.unshift(...newcoords);\n  }\n  unshiftArray(vertices: Vec3[] | Vec2[]) {\n    let newcoords:number[] = [];\n    for(let v of vertices){\n      newcoords.push(...v.elements);\n      if (v.elements.length === 2) {\n        newcoords.push(this._defaultZ);\n      }\n    }\n    // vertices.map((v:Vec2|Vec3)=>{\n    //   newcoords.push(...v.elements);\n    //   if (v.elements.length === 2) {\n    //     newcoords.push(this._defaultZ);\n    //   }\n    // });\n    this.elements.unshift(...newcoords);\n  }\n\n\n  get nVerts() {\n    return this.elements.length / 3;\n  }\n\n  getAt(i: number) {\n    return new Vec3(\n      this.elements[i * 3],\n      this.elements[i * 3 + 1],\n      this.elements[i * 3 + 2]\n    );\n  }\n\n  getPoint2DAt(i: number) {\n    return this.getAt(i).Point2D;\n  }\n\n  setAt(i: number, vertex: Vec2 | Vec3 | number[]) {\n    let elements = Array.isArray(vertex) ? vertex : vertex.elements;\n    this.elements[i * 3] = elements[0];\n    this.elements[i * 3 + 1] = elements[1];\n    if (elements.length === 2) {\n      this.elements[i * 3 + 2] = this._defaultZ;\n    } else {\n      this.elements[i * 3 + 2] = elements[2];\n    }\n  }\n\n  ApplyMatrix(m: Mat3 | Mat4) {\n    // let rval = this.clone();\n    if (m instanceof Mat3) {\n      for (let v = 0; v < this.nVerts; v++) {\n        this.setAt(v, m.times(this.getAt(v).Point2D));\n      }\n    } else {\n      for (let v = 0; v < this.nVerts; v++) {\n        this.setAt(v, m.times(this.getAt(v).Point3DH).Point3D);\n      }\n    }\n    return this;\n  }\n\n  GetTransformedByMatrix(m:Mat3|Mat4){\n    let rval = this.deepCopy();\n    return rval.ApplyMatrix(m);\n  }\n\n}\n\nexport class VertexPositionArray3DH extends VertexAttributeArray4D {\n  public _defaultH: number = 1;\n  // constructor(elements?:number[])\n  // constructor(...args:any[]) {\n  //     super(...args);\n  // }\n\n  static FromThreeJS(\n    attr: THREE.BufferAttribute | THREE.InterleavedBufferAttribute\n  ) {\n    return new this(Array.from(attr.array));\n  }\n\n  getAt(i: number) {\n    return new Vec4(\n      this.elements[i * 4],\n      this.elements[i * 4 + 1],\n      this.elements[i * 4 + 2],\n      this.elements[i * 4 + 3]\n    );\n  }\n  setAt(i: number, vertex: Vec4 | Vec3 | number[]) {\n    let elements = Array.isArray(vertex) ? vertex : vertex.elements;\n    this.elements[i * 4] = elements[0];\n    this.elements[i * 4 + 1] = elements[1];\n    this.elements[i * 4 + 2] = elements[2];\n    if (elements.length === 3) {\n      this.elements[i * 4 + 3] = this._defaultH;\n    } else {\n      this.elements[i * 4 + 3] = elements[3];\n    }\n  }\n}\n\nexport function VertexAttributeArrayFromThreeJS(\n  threeattribute: THREE.BufferAttribute | THREE.InterleavedBufferAttribute\n) {\n  switch (threeattribute.itemSize) {\n    case 2:\n      return VertexAttributeArray2D.FromThreeJS(threeattribute);\n    // break;\n    case 3:\n      return VertexAttributeArray3D.FromThreeJS(threeattribute);\n    // break;\n    case 4:\n      return VertexAttributeArray4D.FromThreeJS(threeattribute);\n    // break;\n    default:\n      throw new Error(\"What kind of attribute dis?\");\n    // break;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}