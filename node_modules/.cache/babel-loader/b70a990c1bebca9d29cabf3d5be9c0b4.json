{"ast":null,"code":"import * as THREE from \"three\";\nexport class PixelData {\n  get nChannels() {\n    return this._nChannels;\n  }\n  get _threeformat() {\n    return THREE.LuminanceFormat;\n  }\n  get _threetype() {\n    return THREE.UnsignedByteType;\n  }\n\n  // abstract getPixel(x:number,y:number):number[];\n  constructor(width, height, nChannels, data) {\n    this.data = void 0;\n    this.width = void 0;\n    this.height = void 0;\n    this._nChannels = 1;\n    if (width) {\n      this.width = width;\n    }\n    ;\n    if (height) {\n      this.height = height;\n    }\n    ;\n    if (data) {\n      this.data = data;\n    }\n    if (nChannels) {\n      this._nChannels = nChannels;\n    }\n    ;\n  }\n  getPixelNN(x, y) {\n    let hi = Math.round(y);\n    let wi = Math.round(x);\n    // @ts-ignore\n    return this.data.slice((hi * this.width + wi) * this.nChannels, (hi * this.width + wi + 1) * this.nChannels);\n    // let rval:number[]=[];\n    // return this.data[(hi*(this.width)+wi)*this.nChannels];\n  }\n\n  setPixelNN(x, y, value) {\n    let hi = Math.round(y);\n    let wi = Math.round(x);\n    // @ts-ignore\n    this.data.set(value, (hi * this.width + wi) * this.nChannels);\n    // this.data[(hi*(this.width)+wi)*this.nChannels]=value;\n  }\n\n  static CreateBlock(width, height, data) {\n    for (var _len = arguments.length, args = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {\n      args[_key - 3] = arguments[_key];\n    }\n    return new this(width, height, data, ...args);\n  }\n  GetTHREEDataTexture() {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n    return new THREE.DataTexture(this.data, this.width, this.height, this._threeformat, this._threetype, ...args);\n  }\n\n  // static CreateBlock<T>(width:number, height:number, nChannels:number, data:T, ...args:any[]){\n  //     return new this(width, height, nChannels, data, ...args);\n  // }\n}","map":{"version":3,"names":["THREE","PixelData","nChannels","_nChannels","_threeformat","LuminanceFormat","_threetype","UnsignedByteType","constructor","width","height","data","getPixelNN","x","y","hi","Math","round","wi","slice","setPixelNN","value","set","CreateBlock","args","GetTHREEDataTexture","DataTexture"],"sources":["/Users/home/Desktop/College/Fall 2022/CS_4620/cs4620-final-project/src/anigraph/rendering/image/pixeldata/PixelData.ts"],"sourcesContent":["import * as THREE from \"three\";\n\nexport class PixelData<T extends ArrayBufferView>{\n    data!:T;\n    width!:number;\n    height!:number;\n    get nChannels(){return this._nChannels;}\n    _nChannels:number=1;\n\n    get _threeformat(){\n        return THREE.LuminanceFormat;\n    }\n    get _threetype(){\n        return THREE.UnsignedByteType;\n    }\n\n\n    // abstract getPixel(x:number,y:number):number[];\n    constructor(width?:number, height?:number, nChannels?:number, data?:T, ...args:any[]) {\n        if(width){this.width = width};\n        if(height){this.height = height};\n        if(data){this.data =data;}\n        if(nChannels){this._nChannels=nChannels};\n    }\n\n    getPixelNN(x:number,y:number){\n        let hi = Math.round(y);\n        let wi = Math.round(x);\n        // @ts-ignore\n        return this.data.slice((hi*(this.width)+wi)*this.nChannels, (hi*(this.width)+wi+1)*this.nChannels);\n        // let rval:number[]=[];\n        // return this.data[(hi*(this.width)+wi)*this.nChannels];\n    }\n\n    setPixelNN(x:number,y:number, value:ArrayLike<number>|number){\n        let hi = Math.round(y);\n        let wi = Math.round(x);\n        // @ts-ignore\n        this.data.set(value, (hi*(this.width)+wi)*this.nChannels)\n        // this.data[(hi*(this.width)+wi)*this.nChannels]=value;\n    }\n\n    static CreateBlock(width:number, height:number, data:any, ...args:any[]){\n        return new this(width, height, data, ...args);\n    }\n\n    GetTHREEDataTexture(...args:any[]){\n        return new THREE.DataTexture(this.data, this.width, this.height, this._threeformat, this._threetype, ...args);\n    }\n\n    // static CreateBlock<T>(width:number, height:number, nChannels:number, data:T, ...args:any[]){\n    //     return new this(width, height, nChannels, data, ...args);\n    // }\n}\n\n\n\n"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAE9B,OAAO,MAAMC,SAAS,CAA2B;EAI7C,IAAIC,SAAS,GAAE;IAAC,OAAO,IAAI,CAACC,UAAU;EAAC;EAGvC,IAAIC,YAAY,GAAE;IACd,OAAOJ,KAAK,CAACK,eAAe;EAChC;EACA,IAAIC,UAAU,GAAE;IACZ,OAAON,KAAK,CAACO,gBAAgB;EACjC;;EAGA;EACAC,WAAW,CAACC,KAAa,EAAEC,MAAc,EAAER,SAAiB,EAAES,IAAO,EAAiB;IAAA,KAftFA,IAAI;IAAA,KACJF,KAAK;IAAA,KACLC,MAAM;IAAA,KAENP,UAAU,GAAQ,CAAC;IAYf,IAAGM,KAAK,EAAC;MAAC,IAAI,CAACA,KAAK,GAAGA,KAAK;IAAA;IAAC;IAC7B,IAAGC,MAAM,EAAC;MAAC,IAAI,CAACA,MAAM,GAAGA,MAAM;IAAA;IAAC;IAChC,IAAGC,IAAI,EAAC;MAAC,IAAI,CAACA,IAAI,GAAEA,IAAI;IAAC;IACzB,IAAGT,SAAS,EAAC;MAAC,IAAI,CAACC,UAAU,GAACD,SAAS;IAAA;IAAC;EAC5C;EAEAU,UAAU,CAACC,CAAQ,EAACC,CAAQ,EAAC;IACzB,IAAIC,EAAE,GAAGC,IAAI,CAACC,KAAK,CAACH,CAAC,CAAC;IACtB,IAAII,EAAE,GAAGF,IAAI,CAACC,KAAK,CAACJ,CAAC,CAAC;IACtB;IACA,OAAO,IAAI,CAACF,IAAI,CAACQ,KAAK,CAAC,CAACJ,EAAE,GAAE,IAAI,CAACN,KAAM,GAACS,EAAE,IAAE,IAAI,CAAChB,SAAS,EAAE,CAACa,EAAE,GAAE,IAAI,CAACN,KAAM,GAACS,EAAE,GAAC,CAAC,IAAE,IAAI,CAAChB,SAAS,CAAC;IAClG;IACA;EACJ;;EAEAkB,UAAU,CAACP,CAAQ,EAACC,CAAQ,EAAEO,KAA8B,EAAC;IACzD,IAAIN,EAAE,GAAGC,IAAI,CAACC,KAAK,CAACH,CAAC,CAAC;IACtB,IAAII,EAAE,GAAGF,IAAI,CAACC,KAAK,CAACJ,CAAC,CAAC;IACtB;IACA,IAAI,CAACF,IAAI,CAACW,GAAG,CAACD,KAAK,EAAE,CAACN,EAAE,GAAE,IAAI,CAACN,KAAM,GAACS,EAAE,IAAE,IAAI,CAAChB,SAAS,CAAC;IACzD;EACJ;;EAEA,OAAOqB,WAAW,CAACd,KAAY,EAAEC,MAAa,EAAEC,IAAQ,EAAgB;IAAA,kCAAXa,IAAI;MAAJA,IAAI;IAAA;IAC7D,OAAO,IAAI,IAAI,CAACf,KAAK,EAAEC,MAAM,EAAEC,IAAI,EAAE,GAAGa,IAAI,CAAC;EACjD;EAEAC,mBAAmB,GAAe;IAAA,mCAAXD,IAAI;MAAJA,IAAI;IAAA;IACvB,OAAO,IAAIxB,KAAK,CAAC0B,WAAW,CAAC,IAAI,CAACf,IAAI,EAAE,IAAI,CAACF,KAAK,EAAE,IAAI,CAACC,MAAM,EAAE,IAAI,CAACN,YAAY,EAAE,IAAI,CAACE,UAAU,EAAE,GAAGkB,IAAI,CAAC;EACjH;;EAEA;EACA;EACA;AACJ"},"metadata":{},"sourceType":"module"}