{"ast":null,"code":"import { useLayoutEffect as e } from \"@radix-ui/react-use-layout-effect\";\nimport { useComposedRefs as n } from \"@radix-ui/react-compose-refs\";\nimport * as t from \"react\";\nexport const Presence = u => {\n  const {\n      present: o,\n      children: i\n    } = u,\n    s = function (n) {\n      const [u, o] = t.useState(),\n        i = t.useRef({}),\n        s = t.useRef(n),\n        c = t.useRef(\"none\"),\n        a = n ? \"mounted\" : \"unmounted\",\n        [d, m] = function (e, n) {\n          return t.useReducer((e, t) => {\n            const r = n[e][t];\n            return null != r ? r : e;\n          }, e);\n        }(a, {\n          mounted: {\n            UNMOUNT: \"unmounted\",\n            ANIMATION_OUT: \"unmountSuspended\"\n          },\n          unmountSuspended: {\n            MOUNT: \"mounted\",\n            ANIMATION_END: \"unmounted\"\n          },\n          unmounted: {\n            MOUNT: \"mounted\"\n          }\n        });\n      return t.useEffect(() => {\n        const e = r(i.current);\n        c.current = \"mounted\" === d ? e : \"none\";\n      }, [d]), e(() => {\n        const e = i.current,\n          t = s.current;\n        if (t !== n) {\n          const u = c.current,\n            o = r(e);\n          if (n) m(\"MOUNT\");else if (\"none\" === o || \"none\" === (null == e ? void 0 : e.display)) m(\"UNMOUNT\");else {\n            const e = u !== o;\n            m(t && e ? \"ANIMATION_OUT\" : \"UNMOUNT\");\n          }\n          s.current = n;\n        }\n      }, [n, m]), e(() => {\n        if (u) {\n          const e = e => {\n              const n = r(i.current).includes(e.animationName);\n              e.target === u && n && m(\"ANIMATION_END\");\n            },\n            n = e => {\n              e.target === u && (c.current = r(i.current));\n            };\n          return u.addEventListener(\"animationstart\", n), u.addEventListener(\"animationcancel\", e), u.addEventListener(\"animationend\", e), () => {\n            u.removeEventListener(\"animationstart\", n), u.removeEventListener(\"animationcancel\", e), u.removeEventListener(\"animationend\", e);\n          };\n        }\n      }, [u, m]), {\n        isPresent: [\"mounted\", \"unmountSuspended\"].includes(d),\n        ref: t.useCallback(e => {\n          e && (i.current = getComputedStyle(e)), o(e);\n        }, [])\n      };\n    }(o),\n    c = \"function\" == typeof i ? i({\n      present: s.isPresent\n    }) : t.Children.only(i),\n    a = n(s.ref, c.ref);\n  return \"function\" == typeof i || s.isPresent ? /*#__PURE__*/t.cloneElement(c, {\n    ref: a\n  }) : null;\n};\nfunction r(e) {\n  return (null == e ? void 0 : e.animationName) || \"none\";\n}\nPresence.displayName = \"Presence\";","map":null,"metadata":{},"sourceType":"module"}