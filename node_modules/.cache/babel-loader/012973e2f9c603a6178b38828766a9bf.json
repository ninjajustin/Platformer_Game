{"ast":null,"code":"import { NodeTransform3D, Quaternion } from \"../../../../anigraph\";\nimport { AInstancedParticleSystemGraphic } from \"../../../../anigraph/effects/particles/InstancedParticles\";\nimport { InstancedParticleSystemView } from \"../../../BaseClasses/InstancedParticlesStarter/InstancedParticleSystemView\";\nexport class BillboardParticleSystemView extends InstancedParticleSystemView {\n  get particlesElement() {\n    return this._particlesElement;\n  }\n  get model() {\n    return this._model;\n  }\n  createParticlesElement() {\n    return AInstancedParticleSystemGraphic.Create(BillboardParticleSystemView.MAX_PARTICLES);\n  }\n  init() {\n    super.init();\n  }\n  update() {\n    super.update(...arguments);\n  }\n\n  /**\n   * This function should return the color to be applied to the particle associated with the provided particle index\n   * @param particle\n   */\n  getColorForParticleIndex(i) {\n    // throw new Error(\"Method not implemented.\");\n    return this.model.particles[i].color;\n  }\n\n  /**\n   * This function should return the transformation to be applied to geometry associated with the provided particle\n   * @param particle\n   */\n  getTransformForParticleIndex(i) {\n    // throw new Error(\"Method not implemented.\");\n    let particle = this.model.particles[i];\n    let nt = new NodeTransform3D(particle.position, new Quaternion(), particle.size);\n    return nt.getMat4();\n  }\n}\nBillboardParticleSystemView.MAX_PARTICLES = 300;","map":{"version":3,"names":["NodeTransform3D","Quaternion","AInstancedParticleSystemGraphic","InstancedParticleSystemView","BillboardParticleSystemView","particlesElement","_particlesElement","model","_model","createParticlesElement","Create","MAX_PARTICLES","init","update","getColorForParticleIndex","i","particles","color","getTransformForParticleIndex","particle","nt","position","size","getMat4"],"sources":["/Users/home/Desktop/cs4620-final-project/src/app/main/Nodes/BillboardParticleSystem/BillboardParticleSystemView.ts"],"sourcesContent":["import {AParticle3D} from \"../../../../anigraph/physics/AParticle3D\";\nimport {BillboardParticleSystemModel} from \"./BillboardParticleSystemModel\";\nimport {Color, Mat4, NodeTransform3D, Quaternion, Vec3} from \"../../../../anigraph\";\nimport {\n    AInstancedParticleSystemGraphic,\n} from \"../../../../anigraph/effects/particles/InstancedParticles\";\nimport {BillboardParticleSystemGraphic} from \"./BillboardParticleSystemGraphic\";\nimport {\n    InstancedParticleSystemView\n} from \"../../../BaseClasses/InstancedParticlesStarter/InstancedParticleSystemView\";\nimport {BillboardParticle} from \"./BillboardParticle\";\n\nexport class BillboardParticleSystemView extends InstancedParticleSystemView<BillboardParticle>{\n    static MAX_PARTICLES = 300;\n\n    get particlesElement():BillboardParticleSystemGraphic{\n        return this._particlesElement as BillboardParticleSystemGraphic;\n    }\n    get model():BillboardParticleSystemModel{\n        return this._model as BillboardParticleSystemModel;\n    }\n\n    createParticlesElement(...args:any[]): BillboardParticleSystemGraphic {\n        return AInstancedParticleSystemGraphic.Create(BillboardParticleSystemView.MAX_PARTICLES);\n    }\n\n    init() {\n        super.init();\n    }\n\n    update(...args:any[]) {\n        super.update(...args);\n    }\n\n    /**\n     * This function should return the color to be applied to the particle associated with the provided particle index\n     * @param particle\n     */\n    getColorForParticleIndex(i: number): Color {\n        // throw new Error(\"Method not implemented.\");\n        return this.model.particles[i].color;\n    }\n\n    /**\n     * This function should return the transformation to be applied to geometry associated with the provided particle\n     * @param particle\n     */\n    getTransformForParticleIndex(i: number): Mat4 {\n        // throw new Error(\"Method not implemented.\");\n        let particle = this.model.particles[i];\n        let nt=new NodeTransform3D(particle.position,new Quaternion(), particle.size);\n        return nt.getMat4();\n    }\n}\n"],"mappings":"AAEA,SAAqBA,eAAe,EAAEC,UAAU,QAAa,sBAAsB;AACnF,SACIC,+BAA+B,QAC5B,2DAA2D;AAElE,SACIC,2BAA2B,QACxB,4EAA4E;AAGnF,OAAO,MAAMC,2BAA2B,SAASD,2BAA2B,CAAmB;EAG3F,IAAIE,gBAAgB,GAAiC;IACjD,OAAO,IAAI,CAACC,iBAAiB;EACjC;EACA,IAAIC,KAAK,GAA+B;IACpC,OAAO,IAAI,CAACC,MAAM;EACtB;EAEAC,sBAAsB,GAAgD;IAClE,OAAOP,+BAA+B,CAACQ,MAAM,CAACN,2BAA2B,CAACO,aAAa,CAAC;EAC5F;EAEAC,IAAI,GAAG;IACH,KAAK,CAACA,IAAI,EAAE;EAChB;EAEAC,MAAM,GAAgB;IAClB,KAAK,CAACA,MAAM,CAAC,YAAO,CAAC;EACzB;;EAEA;AACJ;AACA;AACA;EACIC,wBAAwB,CAACC,CAAS,EAAS;IACvC;IACA,OAAO,IAAI,CAACR,KAAK,CAACS,SAAS,CAACD,CAAC,CAAC,CAACE,KAAK;EACxC;;EAEA;AACJ;AACA;AACA;EACIC,4BAA4B,CAACH,CAAS,EAAQ;IAC1C;IACA,IAAII,QAAQ,GAAG,IAAI,CAACZ,KAAK,CAACS,SAAS,CAACD,CAAC,CAAC;IACtC,IAAIK,EAAE,GAAC,IAAIpB,eAAe,CAACmB,QAAQ,CAACE,QAAQ,EAAC,IAAIpB,UAAU,EAAE,EAAEkB,QAAQ,CAACG,IAAI,CAAC;IAC7E,OAAOF,EAAE,CAACG,OAAO,EAAE;EACvB;AACJ;AAzCanB,2BAA2B,CAC7BO,aAAa,GAAG,GAAG"},"metadata":{},"sourceType":"module"}