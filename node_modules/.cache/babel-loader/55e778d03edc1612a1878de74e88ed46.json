{"ast":null,"code":"import * as THREE from \"three\";\nimport { AView } from \"../base\";\nexport class ASceneView extends AView {\n  get controller() {\n    return this._controller;\n  }\n  get model() {\n    return this.controller.model;\n  }\n  get modelID() {\n    return this.model.uid;\n  }\n  get viewMap() {\n    return this._viewMap;\n  }\n  get threejs() {\n    return this._threejs;\n  }\n  setModel(model) {\n    throw new Error(\"Should not setModel directly on scene view. It should access model through the controller.\");\n  }\n  constructor(controller) {\n    super();\n    this._viewMap = {};\n    this._controller = void 0;\n    this._threejs = void 0;\n    this._controller = controller;\n    this._threejs = new THREE.Scene();\n  }\n  hasModel(model) {\n    return this.controller.hasModel(model);\n  }\n  hasView(view) {\n    return view.uid in this.viewMap[view.modelID];\n  }\n  addView(view) {\n    if (this.viewMap[view.modelID] === undefined) {\n      this.viewMap[view.modelID] = {};\n    }\n    this.viewMap[view.modelID][view.uid] = view;\n    // this.threejs.add(view._threejs);\n  }\n\n  removeView(view) {\n    // this.threejs.remove(view._threejs);\n    delete this.viewMap[view.modelID][view.uid];\n  }\n  getViewListForModel(model) {\n    if (this.hasModel(model)) {\n      return Object.values(this.viewMap[model.uid]);\n    } else {\n      return [];\n    }\n  }\n  setBackgroundColor(color) {\n    this.threejs.background = color.asThreeJS();\n  }\n  loadSkyBox(basePath) {\n    let format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '.jpg';\n    let path = basePath !== null && basePath !== void 0 ? basePath : './images/cube/MilkyWay/dark-s_';\n    const urls = [path + 'px' + format, path + 'nx' + format, path + 'py' + format, path + 'ny' + format, path + 'pz' + format, path + 'nz' + format];\n    // const urls = [\n    //     path + 'nx' + format, path + 'px' + format,\n    //     path + 'ny' + format, path + 'py' + format,\n    //     path + 'nz' + format, path + 'pz' + format\n    // ];\n    const reflectionCube = new THREE.CubeTextureLoader().load(urls);\n    reflectionCube.rotation = Math.PI * 0.25;\n    // refractionCube.mapping = THREE.CubeRefractionMapping;\n    this.threejs.background = reflectionCube;\n  }\n}","map":{"version":3,"names":["THREE","AView","ASceneView","controller","_controller","model","modelID","uid","viewMap","_viewMap","threejs","_threejs","setModel","Error","constructor","Scene","hasModel","hasView","view","addView","undefined","removeView","getViewListForModel","Object","values","setBackgroundColor","color","background","asThreeJS","loadSkyBox","basePath","format","path","urls","reflectionCube","CubeTextureLoader","load","rotation","Math","PI"],"sources":["/Users/home/Desktop/College/Fall 2022/CS_4620/cs4620-final-project/src/anigraph/scene/ASceneView.ts"],"sourcesContent":["import * as THREE from \"three\";\nimport {AModelInterface, AView, HasModelViewMap, MVMViewMap} from \"../base\";\nimport {ASceneController} from \"./ASceneController\";\nimport {ANodeView} from \"./nodeView\";\nimport {ASceneModel} from \"./ASceneModel\";\nimport {Color} from \"../math\";\n\n\nexport class ASceneView extends AView implements HasModelViewMap {\n    protected _viewMap: MVMViewMap = {};\n    protected _controller!:ASceneController;\n    get controller(){return this._controller;}\n    get model(){return this.controller.model;}\n    get modelID(){return this.model.uid;}\n    get viewMap(){return this._viewMap;}\n    _threejs!:THREE.Object3D;\n    get threejs():THREE.Scene{\n        return this._threejs as THREE.Scene;\n    }\n\n    setModel(model:ASceneModel){\n        throw new Error(\"Should not setModel directly on scene view. It should access model through the controller.\")\n    }\n\n    constructor(controller:ASceneController) {\n        super();\n        this._controller = controller;\n        this._threejs = new THREE.Scene();\n    }\n\n    hasModel(model:AModelInterface){return this.controller.hasModel(model);};\n    hasView(view:AView){\n        return (view.uid in this.viewMap[view.modelID]);\n    }\n    addView(view:AView){\n        if(this.viewMap[view.modelID]===undefined){\n            this.viewMap[view.modelID]={};\n        }\n        this.viewMap[view.modelID][view.uid]=view;\n        // this.threejs.add(view._threejs);\n    }\n    removeView(view:AView){\n        // this.threejs.remove(view._threejs);\n        delete this.viewMap[view.modelID][view.uid];\n    }\n    getViewListForModel(model:AModelInterface):AView[]{\n        if(this.hasModel(model)) {\n            return Object.values(this.viewMap[model.uid]);\n        }\n        else{\n            return [];\n        }\n    }\n\n    setBackgroundColor(color:Color){\n        this.threejs.background = color.asThreeJS();\n    }\n\n    loadSkyBox(basePath?:string, format:string='.jpg'){\n        let path = basePath??'./images/cube/MilkyWay/dark-s_';\n        const urls = [\n            path + 'px' + format, path + 'nx' + format,\n            path + 'py' + format, path + 'ny' + format,\n            path + 'pz' + format, path + 'nz' + format\n        ];\n        // const urls = [\n        //     path + 'nx' + format, path + 'px' + format,\n        //     path + 'ny' + format, path + 'py' + format,\n        //     path + 'nz' + format, path + 'pz' + format\n        // ];\n        const reflectionCube = new THREE.CubeTextureLoader().load( urls );\n        reflectionCube.rotation = Math.PI*0.25;\n        // refractionCube.mapping = THREE.CubeRefractionMapping;\n        this.threejs.background = reflectionCube;\n    }\n\n\n\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}