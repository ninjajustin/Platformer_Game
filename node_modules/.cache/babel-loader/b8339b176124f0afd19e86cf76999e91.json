{"ast":null,"code":"var _dec, _class, _class2;\n/**\n * Player Controls. An InteractionMode that activates interactions with a given DOM element.\n * You can create custom controls by subclassing to define your own:\n * onMouseMove: callback for mouse movement\n * onKeyDown & onKeyUp: callbacks for when keys are pressed and released\n */\n\nimport { AClickInteraction } from \"../../interaction\";\nimport { ASerializable } from \"../../base\";\nimport { ASceneInteractionMode } from \"./ASceneInteractionMode\";\nexport let PointerLockEvents;\n(function (PointerLockEvents) {\n  PointerLockEvents[\"Lock\"] = \"PointerLock_Lock\";\n  PointerLockEvents[\"Unlock\"] = \"PointerLock_Unlock\";\n})(PointerLockEvents || (PointerLockEvents = {}));\nexport let AScenePointerLockInteractionMode = (_dec = ASerializable(\"AScenePointerLockInteractionMode\"), _dec(_class = (_class2 = class AScenePointerLockInteractionMode extends ASceneInteractionMode {\n  constructor() {\n    super(...arguments);\n    this.isLocked = false;\n    this._onLock = void 0;\n    this._onUnlock = void 0;\n  }\n  onLock() {\n    if (this._onLock) {\n      this._onLock(...arguments);\n    }\n  }\n  onUnlock() {\n    if (this._onUnlock) {\n      this._onUnlock(...arguments);\n    }\n  }\n  init(owner) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    super.init(owner, ...args);\n    this._initPointerLock();\n    this.onPointerlockChange = this.onPointerlockChange.bind(this);\n    this.onPointerlockError = this.onPointerlockError.bind(this);\n  }\n  _initPointerLock() {\n    const self = this;\n    this.addInteraction(AClickInteraction.Create(this.domElement, () => {\n      self.lockPointer();\n    }));\n  }\n  beforeActivate() {\n    this.connect();\n  }\n  beforeDeactivate() {\n    this.onUnlock();\n    this.disconnect();\n  }\n  connect() {\n    const self = this;\n    // self.domElement.ownerDocument.addEventListener( 'mousemove', self.onMouseMove );\n    self.domElement.ownerDocument.addEventListener('pointerlockchange', self.onPointerlockChange);\n    self.domElement.ownerDocument.addEventListener('pointerlockerror', self.onPointerlockError);\n  }\n  disconnect() {\n    const self = this;\n    // self.domElement.ownerDocument.removeEventListener( 'mousemove', self.onMouseMove );\n    self.domElement.ownerDocument.removeEventListener('pointerlockchange', self.onPointerlockChange);\n    self.domElement.ownerDocument.removeEventListener('pointerlockerror', self.onPointerlockError);\n  }\n  lockPointer() {\n    this.domElement.requestPointerLock();\n    this.onLock();\n  }\n  unlockPointer() {\n    this.domElement.ownerDocument.exitPointerLock();\n    this.onUnlock();\n  }\n  dispose() {\n    this.disconnect();\n  }\n  onPointerlockChange() {\n    const self = this;\n    if (self.domElement.ownerDocument.pointerLockElement === self.domElement) {\n      self.owner.signalEvent(AScenePointerLockInteractionMode.LockEvents.Lock);\n      self.isLocked = true;\n    } else {\n      self.owner.signalEvent(AScenePointerLockInteractionMode.LockEvents.Unlock);\n      self.isLocked = false;\n    }\n  }\n  onPointerlockError() {\n    console.error('Unable to use Pointer Lock API');\n  }\n  onMouseMove(event, interaction) {\n    // console.log(event);\n    if (this.isLocked === false) return;\n    let webEvent = event.DOMEvent;\n    // @ts-ignore\n    const movementX = webEvent.movementX || webEvent.mozMovementX || webEvent.webkitMovementX || 0;\n    // @ts-ignore\n    const movementY = webEvent.movementY || webEvent.mozMovementY || webEvent.webkitMovementY || 0;\n  }\n}, _class2.LockEvents = PointerLockEvents, _class2)) || _class);","map":{"version":3,"names":["AClickInteraction","ASerializable","ASceneInteractionMode","PointerLockEvents","AScenePointerLockInteractionMode","isLocked","_onLock","_onUnlock","onLock","onUnlock","init","owner","args","_initPointerLock","onPointerlockChange","bind","onPointerlockError","self","addInteraction","Create","domElement","lockPointer","beforeActivate","connect","beforeDeactivate","disconnect","ownerDocument","addEventListener","removeEventListener","requestPointerLock","unlockPointer","exitPointerLock","dispose","pointerLockElement","signalEvent","LockEvents","Lock","Unlock","console","error","onMouseMove","event","interaction","webEvent","DOMEvent","movementX","mozMovementX","webkitMovementX","movementY","mozMovementY","webkitMovementY"],"sources":["/Users/home/Desktop/cs4620-final-project/src/anigraph/scene/interactionmodes/AScenePointerLockInteractionMode.ts"],"sourcesContent":["/**\n * Player Controls. An InteractionMode that activates interactions with a given DOM element.\n * You can create custom controls by subclassing to define your own:\n * onMouseMove: callback for mouse movement\n * onKeyDown & onKeyUp: callbacks for when keys are pressed and released\n */\n\nimport {\n    ADragInteraction,\n    AKeyboardInteraction,\n    SetInteractionCallbacks,\n    AInteractionEvent,\n    AInteractionMode,\n    ADOMPointerMoveInteraction, AClickInteraction\n} from \"../../interaction\";\nimport {ACamera} from \"../../math\";\nimport {ACameraModel} from \"../camera\";\nimport {ASerializable} from \"../../base\";\nimport {Vec2, V2} from \"../../math\";\nimport {AWheelInteraction, AWheelInteractionCallback} from \"../../interaction/AWheelInteraction\";\nimport {ASceneController} from \"../ASceneController\";\nimport type {HasInteractionModeCallbacks} from \"../../interaction\";\nimport {ASceneInteractionMode} from \"./ASceneInteractionMode\";\nimport {CallbackType} from \"../../basictypes\";\n\nexport enum PointerLockEvents{\n    Lock=\"PointerLock_Lock\",\n    Unlock=\"PointerLock_Unlock\",\n}\n\n@ASerializable(\"AScenePointerLockInteractionMode\")\nexport class AScenePointerLockInteractionMode extends ASceneInteractionMode implements HasInteractionModeCallbacks {\n    isLocked: boolean=false;\n    static LockEvents=PointerLockEvents;\n    _onLock!:CallbackType;\n    _onUnlock!:CallbackType;\n    onLock(...args:any[]){if(this._onLock){this._onLock(...args);}}\n    onUnlock(...args:any[]){if(this._onUnlock){this._onUnlock(...args);}}\n\n\n    init(owner: ASceneController, ...args: any[]){\n        super.init(owner, ...args);\n        this._initPointerLock();\n        this.onPointerlockChange = this.onPointerlockChange.bind(this);\n        this.onPointerlockError = this.onPointerlockError.bind(this);\n    }\n\n    _initPointerLock(){\n        const self = this;\n        this.addInteraction(AClickInteraction.Create(this.domElement, ()=>{\n            self.lockPointer();\n        }))\n    }\n\n    beforeActivate(...args:any[]) {\n        this.connect();\n    }\n    beforeDeactivate(...args:any[]) {\n        this.onUnlock();\n        this.disconnect();\n    }\n\n    connect(){\n        const self = this;\n        // self.domElement.ownerDocument.addEventListener( 'mousemove', self.onMouseMove );\n        self.domElement.ownerDocument.addEventListener( 'pointerlockchange', self.onPointerlockChange );\n        self.domElement.ownerDocument.addEventListener( 'pointerlockerror', self.onPointerlockError );\n    }\n\n    disconnect(){\n        const self = this;\n        // self.domElement.ownerDocument.removeEventListener( 'mousemove', self.onMouseMove );\n        self.domElement.ownerDocument.removeEventListener( 'pointerlockchange', self.onPointerlockChange );\n        self.domElement.ownerDocument.removeEventListener( 'pointerlockerror', self.onPointerlockError );\n\n    }\n    lockPointer(){\n        this.domElement.requestPointerLock();\n        this.onLock();\n    }\n\n    unlockPointer(){\n        this.domElement.ownerDocument.exitPointerLock();\n        this.onUnlock();\n    }\n\n    dispose(){\n        this.disconnect();\n    };\n\n\n    onPointerlockChange() {\n        const self = this;\n        if ( self.domElement.ownerDocument.pointerLockElement === self.domElement ) {\n            self.owner.signalEvent(AScenePointerLockInteractionMode.LockEvents.Lock);\n            self.isLocked = true;\n        } else {\n            self.owner.signalEvent(AScenePointerLockInteractionMode.LockEvents.Unlock);\n            self.isLocked = false;\n        }\n    }\n\n    onPointerlockError(){\n        console.error( 'Unable to use Pointer Lock API' );\n    }\n\n    onMouseMove(event:AInteractionEvent, interaction:ADOMPointerMoveInteraction ) {\n        // console.log(event);\n        if ( this.isLocked === false ) return;\n\n        let webEvent = (event.DOMEvent as MouseEvent);\n        // @ts-ignore\n        const movementX = webEvent.movementX || webEvent.mozMovementX || webEvent.webkitMovementX || 0;\n        // @ts-ignore\n        const movementY = webEvent.movementY || webEvent.mozMovementY || webEvent.webkitMovementY || 0;\n    }\n}\n\n\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}