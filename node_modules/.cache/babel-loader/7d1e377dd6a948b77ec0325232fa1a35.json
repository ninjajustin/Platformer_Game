{"ast":null,"code":"import { AInteractionMode, BasicInteractionModes } from \"./AInteractionMode\";\n// export enum BasicInteractionModes{\n//     default='default'\n// }\n\nexport class AInteractionModeMap {\n  getGUISelectableModesOptions() {\n    let rval = {};\n    // let rval = [];\n    for (let m in this.modes) {\n      if (this.modes[m].isGUISelectable) {\n        rval[m] = m;\n      }\n    }\n    return rval;\n  }\n  getGUISelectableModesList() {\n    let rval = [];\n    for (let m in this.modes) {\n      if (this.modes[m].isGUISelectable) {\n        rval.push(m);\n      }\n    }\n    return rval;\n  }\n  constructor(owner) {\n    this.modes = {};\n    this._activeModeNames = [];\n    this.owner = void 0;\n    this.owner = owner;\n    this.defineMode(BasicInteractionModes.Default);\n    this.setActiveMode(BasicInteractionModes.Default);\n  }\n  defineMode(name, mode) {\n    if (name in this.modes) {\n      console.warn(`you are redefining interaction mode ${name}`);\n      this.modes[name].deactivate();\n    }\n    if (mode === undefined) {\n      this.modes[name] = new AInteractionMode(name, this.owner);\n    } else {\n      this.modes[name] = mode;\n    }\n  }\n  modeIsDefined(name) {\n    return name in this.modes;\n  }\n  undefineMode(name) {\n    if (name in this.modes) {\n      this.modes[name].deactivate();\n      delete this.modes[name];\n    } else {\n      console.warn(`you are trying to undefine interaction mode ${name} that doesn't exist`);\n    }\n  }\n  _getActiveModes() {\n    const activeModes = [];\n    for (const mode in this.modes) {\n      if (this.modes[mode].active) {\n        activeModes.push(this.modes[mode]);\n      }\n    }\n    return activeModes;\n  }\n  _setActiveInteractionModes(modeNames) {\n    const oldActiveModes = this._getActiveModes();\n    for (const oldmode of oldActiveModes) {\n      if (!modeNames.includes(oldmode.name)) {\n        oldmode.deactivate();\n      }\n    }\n    for (let modeName of modeNames) {\n      // if(!this.modes[modeName]){\n      //     console.log(modeName);\n      // }\n      if (!this.modes[modeName].active) {\n        this.modes[modeName].activate();\n      }\n    }\n    this._activeModeNames = modeNames;\n  }\n  setActiveMode(modeName) {\n    this._setActiveInteractionModes([modeName]);\n  }\n  _activateAllModes() {\n    this._setActiveInteractionModes(Object.keys(this.modes));\n  }\n  deactivateAll() {\n    this._setActiveInteractionModes([]);\n  }\n  dispose() {\n    this.deactivateAll();\n  }\n}","map":{"version":3,"names":["AInteractionMode","BasicInteractionModes","AInteractionModeMap","getGUISelectableModesOptions","rval","m","modes","isGUISelectable","getGUISelectableModesList","push","constructor","owner","_activeModeNames","defineMode","Default","setActiveMode","name","mode","console","warn","deactivate","undefined","modeIsDefined","undefineMode","_getActiveModes","activeModes","active","_setActiveInteractionModes","modeNames","oldActiveModes","oldmode","includes","modeName","activate","_activateAllModes","Object","keys","deactivateAll","dispose"],"sources":["/Users/home/Desktop/cs4620-final-project/src/anigraph/interaction/AInteractionModeMap.ts"],"sourcesContent":["import {AInteractionMode, BasicInteractionModes} from \"./AInteractionMode\";\nimport {HasInteractions} from \"../base/amvc/HasInteractions\";\n\n// export enum BasicInteractionModes{\n//     default='default'\n// }\n\nexport class AInteractionModeMap{\n    public modes:{[name:string]:AInteractionMode}={};\n    private _activeModeNames:string[]=[];\n    public owner:HasInteractions;\n\n\n    getGUISelectableModesOptions(){\n        let rval:{[name:string]:string}={}\n        // let rval = [];\n        for(let m in this.modes){\n            if(this.modes[m].isGUISelectable){\n                rval[m]=m;\n            }\n        }\n        return rval;\n    }\n    getGUISelectableModesList(){\n        let rval = [];\n        for(let m in this.modes){\n            if(this.modes[m].isGUISelectable){\n                rval.push(m);\n            }\n        }\n        return rval;\n    }\n\n\n    constructor(owner:HasInteractions){\n        this.owner = owner;\n        this.defineMode(BasicInteractionModes.Default);\n        this.setActiveMode(BasicInteractionModes.Default);\n    }\n\n    defineMode(name:string, mode?:AInteractionMode){\n        if(name in this.modes){\n            console.warn(`you are redefining interaction mode ${name}`);\n            this.modes[name].deactivate();\n        }\n        if(mode ===undefined){\n            this.modes[name]=new AInteractionMode(name, this.owner);\n        }else{\n            this.modes[name]=mode;\n        }\n\n    }\n\n    modeIsDefined(name:string){\n        return name in this.modes;\n    }\n\n    undefineMode(name:string){\n        if(name in this.modes){\n            this.modes[name].deactivate();\n            delete this.modes[name];\n        }else{\n            console.warn(`you are trying to undefine interaction mode ${name} that doesn't exist`);\n        }\n    }\n    _getActiveModes(){\n        const activeModes = [];\n        for(const mode in this.modes){\n            if(this.modes[mode].active){\n                activeModes.push(this.modes[mode]);\n            }\n        }\n        return activeModes;\n    }\n    _setActiveInteractionModes(modeNames:string[]){\n        const oldActiveModes = this._getActiveModes();\n        for(const oldmode of oldActiveModes){\n            if(!modeNames.includes(oldmode.name)){\n                oldmode.deactivate();\n            }\n        }\n        for(let modeName of modeNames){\n\n            // if(!this.modes[modeName]){\n            //     console.log(modeName);\n            // }\n            if(!this.modes[modeName].active){\n                this.modes[modeName].activate();\n            }\n        }\n        this._activeModeNames=modeNames;\n    }\n    setActiveMode(modeName:string){\n        this._setActiveInteractionModes([modeName]);\n    }\n    _activateAllModes(){\n        this._setActiveInteractionModes(Object.keys(this.modes));\n    }\n    deactivateAll(){\n        this._setActiveInteractionModes([]);\n    }\n\n    dispose(){\n        this.deactivateAll();\n    }\n\n}\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}