{"ast":null,"code":"import { VectorBase } from \"../math\";\nexport class VertexIndexArray extends VectorBase {\n  constructor() {\n    let vertsPerElement = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 3;\n    super();\n    this.VertsPerElement = void 0;\n    this.VertsPerElement = vertsPerElement;\n  }\n  getAt(i) {\n    let rval = [];\n    for (let j = 0; j < this.VertsPerElement; j++) {\n      rval.push(i * this.VertsPerElement + j);\n    }\n    return rval;\n  }\n  setAt(i, inds) {\n    let startIndex = i * this.VertsPerElement;\n    for (let j = 0; j < this.VertsPerElement; j++) {\n      this.elements[startIndex + j] = inds[j];\n    }\n  }\n  get nVerts() {\n    return this.elements.length / this.VertsPerElement;\n  }\n  push(inds) {\n    let newinds = inds.slice();\n    this.elements = this.elements.concat(newinds);\n  }\n  clone() {\n    let rval = super.clone();\n    rval.VertsPerElement = this.VertsPerElement;\n    return rval;\n  }\n  static FromThreeJS(index) {\n    let iar = new VertexIndexArray();\n    if (index) {\n      iar.elements = Array.from(index.array);\n    }\n    return iar;\n  }\n}","map":{"version":3,"names":["VectorBase","VertexIndexArray","constructor","vertsPerElement","VertsPerElement","getAt","i","rval","j","push","setAt","inds","startIndex","elements","nVerts","length","newinds","slice","concat","clone","FromThreeJS","index","iar","Array","from","array"],"sources":["/Users/home/Desktop/cs4620-final-project/src/anigraph/geometry/VertexIndexArray.ts"],"sourcesContent":["import { VectorBase} from \"../math\";\n\nexport class VertexIndexArray extends VectorBase {\n  public VertsPerElement: number;\n  constructor(vertsPerElement: number = 3) {\n    super();\n    this.VertsPerElement = vertsPerElement;\n  }\n  getAt(i: number) {\n    let rval = [];\n    for (let j = 0; j < this.VertsPerElement; j++) {\n      rval.push(i * this.VertsPerElement + j);\n    }\n    return rval;\n  }\n\n  setAt(i: number, inds: number[]) {\n    let startIndex = i * this.VertsPerElement;\n    for (let j = 0; j < this.VertsPerElement; j++) {\n      this.elements[startIndex + j] = inds[j];\n    }\n  }\n\n  get nVerts() {\n    return this.elements.length / this.VertsPerElement;\n  }\n\n  push(inds: number[]) {\n    let newinds = inds.slice();\n    this.elements = this.elements.concat(newinds);\n  }\n\n  clone() {\n    let rval = super.clone();\n    rval.VertsPerElement = this.VertsPerElement;\n    return rval;\n  }\n\n  static FromThreeJS(index: THREE.BufferAttribute | null) {\n    let iar = new VertexIndexArray();\n    if (index) {\n      iar.elements = Array.from(index.array);\n    }\n    return iar;\n  }\n}\n"],"mappings":"AAAA,SAASA,UAAU,QAAO,SAAS;AAEnC,OAAO,MAAMC,gBAAgB,SAASD,UAAU,CAAC;EAE/CE,WAAW,GAA8B;IAAA,IAA7BC,eAAuB,uEAAG,CAAC;IACrC,KAAK,EAAE;IAAC,KAFHC,eAAe;IAGpB,IAAI,CAACA,eAAe,GAAGD,eAAe;EACxC;EACAE,KAAK,CAACC,CAAS,EAAE;IACf,IAAIC,IAAI,GAAG,EAAE;IACb,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACJ,eAAe,EAAEI,CAAC,EAAE,EAAE;MAC7CD,IAAI,CAACE,IAAI,CAACH,CAAC,GAAG,IAAI,CAACF,eAAe,GAAGI,CAAC,CAAC;IACzC;IACA,OAAOD,IAAI;EACb;EAEAG,KAAK,CAACJ,CAAS,EAAEK,IAAc,EAAE;IAC/B,IAAIC,UAAU,GAAGN,CAAC,GAAG,IAAI,CAACF,eAAe;IACzC,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACJ,eAAe,EAAEI,CAAC,EAAE,EAAE;MAC7C,IAAI,CAACK,QAAQ,CAACD,UAAU,GAAGJ,CAAC,CAAC,GAAGG,IAAI,CAACH,CAAC,CAAC;IACzC;EACF;EAEA,IAAIM,MAAM,GAAG;IACX,OAAO,IAAI,CAACD,QAAQ,CAACE,MAAM,GAAG,IAAI,CAACX,eAAe;EACpD;EAEAK,IAAI,CAACE,IAAc,EAAE;IACnB,IAAIK,OAAO,GAAGL,IAAI,CAACM,KAAK,EAAE;IAC1B,IAAI,CAACJ,QAAQ,GAAG,IAAI,CAACA,QAAQ,CAACK,MAAM,CAACF,OAAO,CAAC;EAC/C;EAEAG,KAAK,GAAG;IACN,IAAIZ,IAAI,GAAG,KAAK,CAACY,KAAK,EAAE;IACxBZ,IAAI,CAACH,eAAe,GAAG,IAAI,CAACA,eAAe;IAC3C,OAAOG,IAAI;EACb;EAEA,OAAOa,WAAW,CAACC,KAAmC,EAAE;IACtD,IAAIC,GAAG,GAAG,IAAIrB,gBAAgB,EAAE;IAChC,IAAIoB,KAAK,EAAE;MACTC,GAAG,CAACT,QAAQ,GAAGU,KAAK,CAACC,IAAI,CAACH,KAAK,CAACI,KAAK,CAAC;IACxC;IACA,OAAOH,GAAG;EACZ;AACF"},"metadata":{},"sourceType":"module"}