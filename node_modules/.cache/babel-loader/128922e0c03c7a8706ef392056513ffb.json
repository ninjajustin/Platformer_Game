{"ast":null,"code":"import { composeRefs as e } from \"@radix-ui/react-compose-refs\";\nimport * as t from \"react\";\nimport r from \"@babel/runtime/helpers/esm/extends\";\nexport const Slot = /*#__PURE__*/t.forwardRef((e, o) => {\n  const {\n    children: a,\n    ...s\n  } = e;\n  return t.Children.toArray(a).some(l) ? /*#__PURE__*/t.createElement(t.Fragment, null, t.Children.map(a, e => l(e) ? /*#__PURE__*/t.createElement(n, r({}, s, {\n    ref: o\n  }), e.props.children) : e)) : /*#__PURE__*/t.createElement(n, r({}, s, {\n    ref: o\n  }), a);\n});\nSlot.displayName = \"Slot\";\nconst n = /*#__PURE__*/t.forwardRef((r, n) => {\n  const {\n    children: l,\n    ...a\n  } = r; /*#__PURE__*/\n  return t.isValidElement(l) ? /*#__PURE__*/t.cloneElement(l, {\n    ...o(a, l.props),\n    ref: e(n, l.ref)\n  }) : t.Children.count(l) > 1 ? t.Children.only(null) : null;\n});\nn.displayName = \"SlotClone\";\nexport const Slottable = _ref => {\n  let {\n    children: e\n  } = _ref;\n  return /*#__PURE__*/t.createElement(t.Fragment, null, e);\n};\nfunction l(e) {\n  /*#__PURE__*/return t.isValidElement(e) && e.type === Slottable;\n}\nfunction o(e, t) {\n  const r = {\n    ...t\n  };\n  for (const n in t) {\n    const l = e[n],\n      o = t[n];\n    /^on[A-Z]/.test(n) ? r[n] = function () {\n      null == o || o(...arguments), null == l || l(...arguments);\n    } : \"style\" === n ? r[n] = {\n      ...l,\n      ...o\n    } : \"className\" === n && (r[n] = [l, o].filter(Boolean).join(\" \"));\n  }\n  return {\n    ...e,\n    ...r\n  };\n}\nexport const Root = Slot;","map":null,"metadata":{},"sourceType":"module"}