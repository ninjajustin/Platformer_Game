{"ast":null,"code":"import { AInteraction, PointerEvents } from \"./AInteraction\";\n// export type ADragSelectionCallback = (interaction:ADragInteraction, currentModelData:GenericDict, event?:any)=>any;\nvar DragInteractionStates;\n(function (DragInteractionStates) {\n  DragInteractionStates[\"CURSOR_START_POSITION\"] = \"CURSOR_START_POSITION\";\n  DragInteractionStates[\"CURSOR_LAST_POSITION\"] = \"CURSOR_START_POSITION\";\n})(DragInteractionStates || (DragInteractionStates = {}));\nexport class ADragInteractionBase extends AInteraction {\n  constructor() {\n    super(...arguments);\n    this._dragCallbacks = {};\n    this._dragSetCallback = void 0;\n    this._mouseDownEventListener = void 0;\n    this._mouseMoveEventListener = void 0;\n    this._mouseUpEventListener = void 0;\n    this.dragStartEvent = void 0;\n    this.isDragging = false;\n  }\n  get cursorStartPosition() {\n    return this.getInteractionState(\"CURSOR_START_POSITION\");\n  }\n  set cursorStartPosition(value) {\n    this.setInteractionState(\"CURSOR_START_POSITION\", value);\n  }\n  dispose() {\n    this._removeDragListeners();\n    this.clearInteractionState();\n    super.dispose();\n  }\n  activate() {\n    this._removeDragListeners();\n    this._addDragListeners();\n    this._mouseDownEventListener.addListener();\n    this.active = true;\n  }\n  deactivate() {\n    this.clearInteractionState();\n    super.deactivate();\n  }\n  setDragStartCallback(dragStartCallback) {\n    if (this._dragCallbacks === undefined) {\n      this._dragCallbacks = {};\n    }\n    this._dragCallbacks['start'] = dragStartCallback;\n    if (this.active) {\n      this._updateDragListeners();\n    }\n  }\n  getDragStartCallback() {\n    return this._dragCallbacks['start'];\n  }\n  callDragStartCallback(event) {\n    return this._dragCallbacks['start'](event, this);\n  }\n  setDragMoveCallback(dragMoveCallback) {\n    if (this._dragCallbacks === undefined) {\n      this._dragCallbacks = {};\n    }\n    this._dragCallbacks['move'] = dragMoveCallback;\n    if (this.active) {\n      this._updateDragListeners();\n    }\n  }\n  getDragMoveCallback() {\n    return this._dragCallbacks['move'];\n  }\n  callDragMoveCallback(event) {\n    return this._dragCallbacks['move'](event, this);\n  }\n  setDragEndCallback(dragEndCallback) {\n    if (this._dragCallbacks === undefined) {\n      this._dragCallbacks = {};\n    }\n    if (dragEndCallback) {\n      this._dragCallbacks['end'] = dragEndCallback;\n    } else {\n      this._dragCallbacks['end'] = event => {};\n    }\n    if (this.active) {\n      this._updateDragListeners();\n    }\n  }\n  getDragEndCallback() {\n    return this._dragCallbacks['end'];\n  }\n  callDragEndCallback(event) {\n    return this._dragCallbacks['end'](event, this);\n  }\n  _updateDragListeners() {\n    this._removeDragListeners();\n    this._addDragListeners();\n  }\n  _removeDragListeners() {\n    this.clearEventListeners();\n  }\n  _addDragListeners() {\n    if (this._dragSetCallback === undefined) {\n      this._dragSetCallback = null;\n    }\n    if (this._dragSetCallback !== null) {\n      this._removeDragListeners();\n    }\n    const interaction = this;\n    const self = this;\n    function dragmovingcallback(event) {\n      event.preventDefault();\n      interaction.callDragMoveCallback(event);\n    }\n    // if(this.element instanceof THREE.Object3D) {\n    //     self._mouseMoveEventListener = self.addSceneEventListener(PointerEvents.POINTER_MOVE, dragmovingcallback);\n    // }else{\n    // element is a DOM element...\n    self._mouseMoveEventListener = self.addDOMEventListener(PointerEvents.POINTER_MOVE, dragmovingcallback);\n    // }\n\n    function dragendcallback(event) {\n      event.preventDefault();\n      interaction.callDragEndCallback(event);\n      self._mouseMoveEventListener.removeListener();\n      self.isDragging = false;\n      // interaction.dragStartEvent = undefined;\n      // startCallback();\n    }\n\n    self._mouseUpEventListener = self.addDOMEventListener(PointerEvents.POINTER_UP, dragendcallback, {\n      once: true\n    });\n\n    // self._mouseUpEventListener = self.addWindowEventListener(PointerEvents.POINTER_UP, dragendcallback);\n\n    this._dragSetCallback = function (event) {\n      if (self.onlyOnFirstIntersection && !event.onFirstIntersection) {\n        event.preventDefault();\n      } else {\n        event.preventDefault();\n        if (!self._shouldIgnoreEvent(event._event)) {\n          interaction.callDragStartCallback(event);\n          interaction.dragStartEvent = event;\n          interaction.isDragging = true;\n          self._mouseMoveEventListener.addListener();\n          self._mouseUpEventListener.addListener();\n        }\n      }\n    };\n\n    // startCallback();\n    if (interaction._dragSetCallback) {\n      self._mouseDownEventListener = self.addEventListener(PointerEvents.POINTER_DOWN, interaction._dragSetCallback);\n    }\n  }\n}\nexport class ADragInteraction extends ADragInteractionBase {\n  /**\n   * Adds a drag interaction to a specified threejs object with the given callbacks.\n   * Most of the time you probably want to leave out the handle argument, unless you know what you are doing\n   * and it's for debugging.\n   *\n   * @param element - a THREE.Object3D, (or Mesh, or any other object that inherits THREE.Object3D)\n   * @param dragStartCallback\n   * @param dragMoveCallback\n   * @param dragEndCallback\n   * @param handle\n   * @returns {ADragInteraction}\n   * @constructor\n   */\n  static Create(element, dragStartCallback, dragMoveCallback, dragEndCallback, handle) {\n    const interaction = new this(element, undefined, handle);\n    interaction.setDragStartCallback(dragStartCallback);\n    interaction.setDragMoveCallback(dragMoveCallback);\n    interaction.setDragEndCallback(dragEndCallback);\n    interaction.bindMethods();\n    //Finally, return the interaction\n    return interaction;\n  }\n}","map":{"version":3,"names":["AInteraction","PointerEvents","DragInteractionStates","ADragInteractionBase","_dragCallbacks","_dragSetCallback","_mouseDownEventListener","_mouseMoveEventListener","_mouseUpEventListener","dragStartEvent","isDragging","cursorStartPosition","getInteractionState","value","setInteractionState","dispose","_removeDragListeners","clearInteractionState","activate","_addDragListeners","addListener","active","deactivate","setDragStartCallback","dragStartCallback","undefined","_updateDragListeners","getDragStartCallback","callDragStartCallback","event","setDragMoveCallback","dragMoveCallback","getDragMoveCallback","callDragMoveCallback","setDragEndCallback","dragEndCallback","getDragEndCallback","callDragEndCallback","clearEventListeners","interaction","self","dragmovingcallback","preventDefault","addDOMEventListener","POINTER_MOVE","dragendcallback","removeListener","POINTER_UP","once","onlyOnFirstIntersection","onFirstIntersection","_shouldIgnoreEvent","_event","addEventListener","POINTER_DOWN","ADragInteraction","Create","element","handle","bindMethods"],"sources":["/Users/home/Desktop/cs4620-final-project/src/anigraph/interaction/ADragInteraction.ts"],"sourcesContent":["import {AInteraction, AInteractionEvent, AInteractionEventListener, PointerEvents,} from \"./AInteraction\";\nimport {CallbackType} from \"../basictypes\";\nimport {Vec2} from \"../math\";\n\n\nexport type ADragInteractionCallback = (event:AInteractionEvent, interaction:ADragInteraction)=>any;\n// export type ADragSelectionCallback = (interaction:ADragInteraction, currentModelData:GenericDict, event?:any)=>any;\n\nenum DragInteractionStates{\n    CURSOR_START_POSITION=\"CURSOR_START_POSITION\",\n    CURSOR_LAST_POSITION=\"CURSOR_START_POSITION\",\n}\n\nexport class ADragInteractionBase extends AInteraction{\n    public _dragCallbacks:{[name:string]:CallbackType}={};\n    public _dragSetCallback!:CallbackType|null;\n    public _mouseDownEventListener!:AInteractionEventListener;\n    public _mouseMoveEventListener!:AInteractionEventListener;\n    public _mouseUpEventListener!:AInteractionEventListener;\n    // public dragStartPosition!:Vec2;\n    public dragStartEvent!:AInteractionEvent;\n    public isDragging:boolean=false;\n\n    get cursorStartPosition(){\n        return this.getInteractionState(\"CURSOR_START_POSITION\")\n    }\n    set cursorStartPosition(value:Vec2){\n        this.setInteractionState(\"CURSOR_START_POSITION\", value);\n    }\n\n\n    dispose(){\n        this._removeDragListeners();\n        this.clearInteractionState();\n        super.dispose();\n    }\n\n    activate(){\n        this._removeDragListeners();\n        this._addDragListeners();\n        this._mouseDownEventListener.addListener();\n        this.active = true;\n    }\n\n    deactivate(){\n        this.clearInteractionState();\n        super.deactivate();\n    }\n\n    setDragStartCallback(dragStartCallback:CallbackType){\n        if(this._dragCallbacks===undefined){\n            this._dragCallbacks = {};\n        }\n        this._dragCallbacks['start'] = dragStartCallback;\n        if(this.active){this._updateDragListeners();}\n    }\n\n    getDragStartCallback(){return this._dragCallbacks['start'];}\n    callDragStartCallback(event:any){\n        return this._dragCallbacks['start'](event, this)\n    }\n\n    setDragMoveCallback(dragMoveCallback:CallbackType){\n        if(this._dragCallbacks===undefined){\n            this._dragCallbacks = {};\n        }\n        this._dragCallbacks['move'] = dragMoveCallback;\n        if(this.active){this._updateDragListeners();}\n    }\n    getDragMoveCallback(){return this._dragCallbacks['move'];}\n    callDragMoveCallback(event:any){\n        return this._dragCallbacks['move'](event, this)\n    }\n\n    setDragEndCallback(dragEndCallback?:CallbackType){\n        if(this._dragCallbacks===undefined){\n            this._dragCallbacks = {};\n        }\n        if(dragEndCallback) {\n            this._dragCallbacks['end'] = dragEndCallback;\n        }else{\n            this._dragCallbacks['end'] = (event:Event)=>{};\n        }\n        if(this.active){this._updateDragListeners();}\n    }\n    getDragEndCallback(){return this._dragCallbacks['end'];}\n    callDragEndCallback(event:any){\n        return this._dragCallbacks['end'](event, this)\n    }\n\n    _updateDragListeners(){\n        this._removeDragListeners();\n        this._addDragListeners();\n    }\n    _removeDragListeners(){\n        this.clearEventListeners();\n    }\n    _addDragListeners(){\n        if(this._dragSetCallback===undefined){\n            this._dragSetCallback=null;\n        }\n        if(this._dragSetCallback!==null){\n            this._removeDragListeners();\n        }\n        const interaction = this;\n        const self = this;\n\n        function dragmovingcallback(event:AInteractionEvent) {\n            event.preventDefault();\n            interaction.callDragMoveCallback(event);\n        }\n        // if(this.element instanceof THREE.Object3D) {\n        //     self._mouseMoveEventListener = self.addSceneEventListener(PointerEvents.POINTER_MOVE, dragmovingcallback);\n        // }else{\n            // element is a DOM element...\n        self._mouseMoveEventListener =self.addDOMEventListener(PointerEvents.POINTER_MOVE, dragmovingcallback);\n        // }\n\n        function dragendcallback(event:AInteractionEvent) {\n            event.preventDefault();\n            interaction.callDragEndCallback(event);\n            self._mouseMoveEventListener.removeListener();\n            self.isDragging = false;\n            // interaction.dragStartEvent = undefined;\n            // startCallback();\n        }\n\n        self._mouseUpEventListener =self.addDOMEventListener(PointerEvents.POINTER_UP, dragendcallback, {once:true});\n\n        // self._mouseUpEventListener = self.addWindowEventListener(PointerEvents.POINTER_UP, dragendcallback);\n\n\n        this._dragSetCallback = function(event:AInteractionEvent){\n            if(self.onlyOnFirstIntersection && !event.onFirstIntersection){\n                event.preventDefault();\n            }else{\n                event.preventDefault();\n                if(!self._shouldIgnoreEvent(event._event)){\n                    interaction.callDragStartCallback(event);\n                    interaction.dragStartEvent = event;\n                    interaction.isDragging = true;\n                    self._mouseMoveEventListener.addListener();\n                    self._mouseUpEventListener.addListener();\n                }\n            }\n        }\n\n        // startCallback();\n        if(interaction._dragSetCallback) {\n            self._mouseDownEventListener = self.addEventListener(PointerEvents.POINTER_DOWN, interaction._dragSetCallback);\n        }\n    }\n}\n\nexport class ADragInteraction extends ADragInteractionBase{\n    /**\n     * Adds a drag interaction to a specified threejs object with the given callbacks.\n     * Most of the time you probably want to leave out the handle argument, unless you know what you are doing\n     * and it's for debugging.\n     *\n     * @param element - a THREE.Object3D, (or Mesh, or any other object that inherits THREE.Object3D)\n     * @param dragStartCallback\n     * @param dragMoveCallback\n     * @param dragEndCallback\n     * @param handle\n     * @returns {ADragInteraction}\n     * @constructor\n     */\n    static Create(element:any,\n                  dragStartCallback:ADragInteractionCallback,\n                  dragMoveCallback:ADragInteractionCallback,\n                  dragEndCallback?:ADragInteractionCallback,\n                  handle?:string){\n        const interaction = new this(element, undefined, handle);\n        interaction.setDragStartCallback(dragStartCallback);\n        interaction.setDragMoveCallback(dragMoveCallback);\n        interaction.setDragEndCallback(dragEndCallback);\n        interaction.bindMethods();\n        //Finally, return the interaction\n        return interaction;\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}