{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar proxyCompare = require('proxy-compare');\nvar VERSION = process.env.NODE_ENV !== \"production\" ? Symbol('VERSION') : Symbol();\nvar LISTENERS = process.env.NODE_ENV !== \"production\" ? Symbol('LISTENERS') : Symbol();\nvar SNAPSHOT = process.env.NODE_ENV !== \"production\" ? Symbol('SNAPSHOT') : Symbol();\nvar HANDLER = process.env.NODE_ENV !== \"production\" ? Symbol('HANDLER') : Symbol();\nvar PROMISE_RESULT = process.env.NODE_ENV !== \"production\" ? Symbol('PROMISE_RESULT') : Symbol();\nvar PROMISE_ERROR = process.env.NODE_ENV !== \"production\" ? Symbol('PROMISE_ERROR') : Symbol();\nvar refSet = new WeakSet();\nfunction ref(o) {\n  refSet.add(o);\n  return o;\n}\nvar isObject = function isObject(x) {\n  return typeof x === 'object' && x !== null;\n};\nvar canProxy = function canProxy(x) {\n  return isObject(x) && !refSet.has(x) && (Array.isArray(x) || !(Symbol.iterator in x)) && !(x instanceof WeakMap) && !(x instanceof WeakSet) && !(x instanceof Error) && !(x instanceof Number) && !(x instanceof Date) && !(x instanceof String) && !(x instanceof RegExp) && !(x instanceof ArrayBuffer);\n};\nvar proxyCache = new WeakMap();\nvar globalVersion = 1;\nvar snapshotCache = new WeakMap();\nfunction proxy(initialObject) {\n  if (initialObject === void 0) {\n    initialObject = {};\n  }\n  if (!isObject(initialObject)) {\n    throw new Error('object required');\n  }\n  var found = proxyCache.get(initialObject);\n  if (found) {\n    return found;\n  }\n  var version = globalVersion;\n  var listeners = new Set();\n  var notifyUpdate = function notifyUpdate(op, nextVersion) {\n    if (nextVersion === void 0) {\n      nextVersion = ++globalVersion;\n    }\n    if (version !== nextVersion) {\n      version = nextVersion;\n      listeners.forEach(function (listener) {\n        return listener(op, nextVersion);\n      });\n    }\n  };\n  var propListeners = new Map();\n  var getPropListener = function getPropListener(prop) {\n    var propListener = propListeners.get(prop);\n    if (!propListener) {\n      propListener = function propListener(op, nextVersion) {\n        var newOp = [].concat(op);\n        newOp[1] = [prop].concat(newOp[1]);\n        notifyUpdate(newOp, nextVersion);\n      };\n      propListeners.set(prop, propListener);\n    }\n    return propListener;\n  };\n  var popPropListener = function popPropListener(prop) {\n    var propListener = propListeners.get(prop);\n    propListeners.delete(prop);\n    return propListener;\n  };\n  var createSnapshot = function createSnapshot(target, receiver) {\n    var cache = snapshotCache.get(receiver);\n    if ((cache == null ? void 0 : cache[0]) === version) {\n      return cache[1];\n    }\n    var snapshot = Array.isArray(target) ? [] : Object.create(Object.getPrototypeOf(target));\n    proxyCompare.markToTrack(snapshot, true);\n    snapshotCache.set(receiver, [version, snapshot]);\n    Reflect.ownKeys(target).forEach(function (key) {\n      var value = Reflect.get(target, key, receiver);\n      if (refSet.has(value)) {\n        proxyCompare.markToTrack(value, false);\n        snapshot[key] = value;\n      } else if (value instanceof Promise) {\n        if (PROMISE_RESULT in value) {\n          snapshot[key] = value[PROMISE_RESULT];\n        } else {\n          var errorOrPromise = value[PROMISE_ERROR] || value;\n          Object.defineProperty(snapshot, key, {\n            get: function get() {\n              if (PROMISE_RESULT in value) {\n                return value[PROMISE_RESULT];\n              }\n              throw errorOrPromise;\n            }\n          });\n        }\n      } else if (value != null && value[LISTENERS]) {\n        snapshot[key] = value[SNAPSHOT];\n      } else {\n        snapshot[key] = value;\n      }\n    });\n    Object.freeze(snapshot);\n    return snapshot;\n  };\n  var baseObject = Array.isArray(initialObject) ? [] : Object.create(Object.getPrototypeOf(initialObject));\n  var handler = {\n    get: function get(target, prop, receiver) {\n      if (prop === VERSION) {\n        return version;\n      }\n      if (prop === LISTENERS) {\n        return listeners;\n      }\n      if (prop === SNAPSHOT) {\n        return createSnapshot(target, receiver);\n      }\n      if (prop === HANDLER) {\n        return handler;\n      }\n      return Reflect.get(target, prop, receiver);\n    },\n    deleteProperty: function deleteProperty(target, prop) {\n      var prevValue = Reflect.get(target, prop);\n      var childListeners = prevValue == null ? void 0 : prevValue[LISTENERS];\n      if (childListeners) {\n        childListeners.delete(popPropListener(prop));\n      }\n      var deleted = Reflect.deleteProperty(target, prop);\n      if (deleted) {\n        notifyUpdate(['delete', [prop], prevValue]);\n      }\n      return deleted;\n    },\n    is: Object.is,\n    canProxy: canProxy,\n    set: function set(target, prop, value, receiver) {\n      var _Object$getOwnPropert, _value;\n      var hasPrevValue = Reflect.has(target, prop);\n      var prevValue = Reflect.get(target, prop, receiver);\n      if (hasPrevValue && this.is(prevValue, value)) {\n        return true;\n      }\n      var childListeners = prevValue == null ? void 0 : prevValue[LISTENERS];\n      if (childListeners) {\n        childListeners.delete(popPropListener(prop));\n      }\n      if (isObject(value)) {\n        value = proxyCompare.getUntracked(value) || value;\n      }\n      var nextValue;\n      if ((_Object$getOwnPropert = Object.getOwnPropertyDescriptor(target, prop)) != null && _Object$getOwnPropert.set) {\n        nextValue = value;\n      } else if (value instanceof Promise) {\n        nextValue = value.then(function (v) {\n          nextValue[PROMISE_RESULT] = v;\n          notifyUpdate(['resolve', [prop], v]);\n          return v;\n        }).catch(function (e) {\n          nextValue[PROMISE_ERROR] = e;\n          notifyUpdate(['reject', [prop], e]);\n        });\n      } else if ((_value = value) != null && _value[LISTENERS]) {\n        nextValue = value;\n        nextValue[LISTENERS].add(getPropListener(prop));\n      } else if (this.canProxy(value)) {\n        nextValue = proxy(value);\n        nextValue[LISTENERS].add(getPropListener(prop));\n      } else {\n        nextValue = value;\n      }\n      Reflect.set(target, prop, nextValue, receiver);\n      notifyUpdate(['set', [prop], value, prevValue]);\n      return true;\n    }\n  };\n  var proxyObject = new Proxy(baseObject, handler);\n  proxyCache.set(initialObject, proxyObject);\n  Reflect.ownKeys(initialObject).forEach(function (key) {\n    var desc = Object.getOwnPropertyDescriptor(initialObject, key);\n    if (desc.get || desc.set) {\n      Object.defineProperty(baseObject, key, desc);\n    } else {\n      proxyObject[key] = initialObject[key];\n    }\n  });\n  return proxyObject;\n}\nfunction getVersion(proxyObject) {\n  return isObject(proxyObject) ? proxyObject[VERSION] : undefined;\n}\nfunction subscribe(proxyObject, callback, notifyInSync) {\n  if (process.env.NODE_ENV !== \"production\" && !(proxyObject != null && proxyObject[LISTENERS])) {\n    console.warn('Please use proxy object');\n  }\n  var promise;\n  var ops = [];\n  var listener = function listener(op) {\n    ops.push(op);\n    if (notifyInSync) {\n      callback(ops.splice(0));\n      return;\n    }\n    if (!promise) {\n      promise = Promise.resolve().then(function () {\n        promise = undefined;\n        callback(ops.splice(0));\n      });\n    }\n  };\n  proxyObject[LISTENERS].add(listener);\n  return function () {\n    proxyObject[LISTENERS].delete(listener);\n  };\n}\nfunction snapshot(proxyObject) {\n  if (process.env.NODE_ENV !== \"production\" && !(proxyObject != null && proxyObject[SNAPSHOT])) {\n    console.warn('Please use proxy object');\n  }\n  return proxyObject[SNAPSHOT];\n}\nfunction getHandler(proxyObject) {\n  if (process.env.NODE_ENV !== \"production\" && !(proxyObject != null && proxyObject[HANDLER])) {\n    console.warn('Please use proxy object');\n  }\n  return proxyObject[HANDLER];\n}\nexports.getHandler = getHandler;\nexports.getVersion = getVersion;\nexports.proxy = proxy;\nexports.ref = ref;\nexports.snapshot = snapshot;\nexports.subscribe = subscribe;","map":null,"metadata":{},"sourceType":"script"}