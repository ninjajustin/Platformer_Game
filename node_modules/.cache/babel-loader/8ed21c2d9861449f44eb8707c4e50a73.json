{"ast":null,"code":"var _dec, _class;\nimport { AObject, ASerializable } from \"../../base\";\nimport * as THREE from \"three\";\nimport { ATexture } from \"../ATexture\";\nexport let ARenderTarget = (_dec = ASerializable(\"ARenderPassData\"), _dec(_class = class ARenderTarget extends AObject {\n  useAsRenderTarget(renderer) {\n    renderer.setRenderTarget(this.target);\n  }\n  render(renderer, scene, camera) {\n    this.useAsRenderTarget(renderer);\n    renderer.render(scene, camera);\n  }\n  get target() {\n    return this._target;\n  }\n  get targetTexture() {\n    return this._targetTexture;\n  }\n  set target(target) {\n    this._target = target;\n    if (this._target) {\n      this._targetTexture = new ATexture(this._target.texture);\n    }\n  }\n  constructor(width, height, options) {\n    super();\n    this.name = void 0;\n    this._target = null;\n    this._targetTexture = void 0;\n    let defaultOptions = {\n      format: THREE.RGBAFormat,\n      type: THREE.FloatType\n    };\n    let op = defaultOptions;\n    if (options) {\n      op = {\n        ...op,\n        ...options\n      };\n    }\n    this.target = new THREE.WebGLRenderTarget(width, height, {\n      ...op\n    });\n  }\n  GetTargetPixels(renderer) {\n    let target = this.target;\n    if (target === null) {\n      return;\n    }\n    // let pixels = new Uint8Array(target.width * target.height * 4);\n    let pixels = new Float32Array(target.width * target.height * 4);\n    renderer.readRenderTargetPixels(target, 0, 0, target.width, target.height, pixels);\n    return pixels;\n  }\n  dispose() {\n    if (this.target) {\n      this.target.dispose();\n    }\n    super.release();\n  }\n}) || _class);","map":{"version":3,"names":["AObject","ASerializable","THREE","ATexture","ARenderTarget","useAsRenderTarget","renderer","setRenderTarget","target","render","scene","camera","_target","targetTexture","_targetTexture","texture","constructor","width","height","options","name","defaultOptions","format","RGBAFormat","type","FloatType","op","WebGLRenderTarget","GetTargetPixels","pixels","Float32Array","readRenderTargetPixels","dispose","release"],"sources":["/Users/home/Desktop/cs4620-final-project/src/anigraph/rendering/multipass/ARenderTarget.ts"],"sourcesContent":["import {AObject, ASerializable} from \"../../base\";\nimport * as THREE from \"three\";\nimport {ATexture} from \"../ATexture\";\nimport type {WebGLRenderTargetOptions} from \"three/src/renderers/WebGLRenderTarget\";\nimport {RenderTargetInterface} from \"../../scene\";\n\n\n@ASerializable(\"ARenderPassData\")\nexport class ARenderTarget extends AObject implements RenderTargetInterface{\n    name!: string;\n    _target: THREE.WebGLRenderTarget | null = null;\n    _targetTexture!:ATexture;\n\n\n    useAsRenderTarget(renderer: THREE.WebGLRenderer){\n        renderer.setRenderTarget(this.target);\n    }\n\n    render(renderer: THREE.WebGLRenderer, scene: THREE.Scene, camera: THREE.Camera) {\n        this.useAsRenderTarget(renderer);\n        renderer.render(scene, camera);\n    }\n\n    get target() {\n        return this._target;\n    }\n\n    get targetTexture(){\n        return this._targetTexture;\n    }\n\n    set target(target: THREE.WebGLRenderTarget | null) {\n        this._target = target;\n        if (this._target) {\n            this._targetTexture = new ATexture(this._target.texture);\n        }\n    }\n\n    constructor(width:number, height:number, options?:WebGLRenderTargetOptions) {\n        super();\n        let defaultOptions = {\n            format: THREE.RGBAFormat,\n            type: THREE.FloatType,\n        }\n        let op = defaultOptions;\n        if(options){\n            op = {...op, ...options};\n        }\n        this.target = new THREE.WebGLRenderTarget(width, height, {...op});\n    }\n\n    GetTargetPixels(renderer: THREE.WebGLRenderer) {\n        let target = this.target;\n        if (target === null) {\n            return;\n        }\n        // let pixels = new Uint8Array(target.width * target.height * 4);\n        let pixels = new Float32Array(target.width * target.height * 4)\n        renderer.readRenderTargetPixels(target, 0, 0, target.width, target.height, pixels);\n        return pixels;\n    }\n\n    dispose() {\n        if (this.target) {\n            this.target.dispose();\n        }\n        super.release();\n    }\n}\n"],"mappings":";AAAA,SAAQA,OAAO,EAAEC,aAAa,QAAO,YAAY;AACjD,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,SAAQC,QAAQ,QAAO,aAAa;AAKpC,WACaC,aAAa,WADzBH,aAAa,CAAC,iBAAiB,CAAC,gBAAjC,MACaG,aAAa,SAASJ,OAAO,CAAiC;EAMvEK,iBAAiB,CAACC,QAA6B,EAAC;IAC5CA,QAAQ,CAACC,eAAe,CAAC,IAAI,CAACC,MAAM,CAAC;EACzC;EAEAC,MAAM,CAACH,QAA6B,EAAEI,KAAkB,EAAEC,MAAoB,EAAE;IAC5E,IAAI,CAACN,iBAAiB,CAACC,QAAQ,CAAC;IAChCA,QAAQ,CAACG,MAAM,CAACC,KAAK,EAAEC,MAAM,CAAC;EAClC;EAEA,IAAIH,MAAM,GAAG;IACT,OAAO,IAAI,CAACI,OAAO;EACvB;EAEA,IAAIC,aAAa,GAAE;IACf,OAAO,IAAI,CAACC,cAAc;EAC9B;EAEA,IAAIN,MAAM,CAACA,MAAsC,EAAE;IAC/C,IAAI,CAACI,OAAO,GAAGJ,MAAM;IACrB,IAAI,IAAI,CAACI,OAAO,EAAE;MACd,IAAI,CAACE,cAAc,GAAG,IAAIX,QAAQ,CAAC,IAAI,CAACS,OAAO,CAACG,OAAO,CAAC;IAC5D;EACJ;EAEAC,WAAW,CAACC,KAAY,EAAEC,MAAa,EAAEC,OAAiC,EAAE;IACxE,KAAK,EAAE;IAAC,KA9BZC,IAAI;IAAA,KACJR,OAAO,GAAmC,IAAI;IAAA,KAC9CE,cAAc;IA6BV,IAAIO,cAAc,GAAG;MACjBC,MAAM,EAAEpB,KAAK,CAACqB,UAAU;MACxBC,IAAI,EAAEtB,KAAK,CAACuB;IAChB,CAAC;IACD,IAAIC,EAAE,GAAGL,cAAc;IACvB,IAAGF,OAAO,EAAC;MACPO,EAAE,GAAG;QAAC,GAAGA,EAAE;QAAE,GAAGP;MAAO,CAAC;IAC5B;IACA,IAAI,CAACX,MAAM,GAAG,IAAIN,KAAK,CAACyB,iBAAiB,CAACV,KAAK,EAAEC,MAAM,EAAE;MAAC,GAAGQ;IAAE,CAAC,CAAC;EACrE;EAEAE,eAAe,CAACtB,QAA6B,EAAE;IAC3C,IAAIE,MAAM,GAAG,IAAI,CAACA,MAAM;IACxB,IAAIA,MAAM,KAAK,IAAI,EAAE;MACjB;IACJ;IACA;IACA,IAAIqB,MAAM,GAAG,IAAIC,YAAY,CAACtB,MAAM,CAACS,KAAK,GAAGT,MAAM,CAACU,MAAM,GAAG,CAAC,CAAC;IAC/DZ,QAAQ,CAACyB,sBAAsB,CAACvB,MAAM,EAAE,CAAC,EAAE,CAAC,EAAEA,MAAM,CAACS,KAAK,EAAET,MAAM,CAACU,MAAM,EAAEW,MAAM,CAAC;IAClF,OAAOA,MAAM;EACjB;EAEAG,OAAO,GAAG;IACN,IAAI,IAAI,CAACxB,MAAM,EAAE;MACb,IAAI,CAACA,MAAM,CAACwB,OAAO,EAAE;IACzB;IACA,KAAK,CAACC,OAAO,EAAE;EACnB;AACJ,CAAC"},"metadata":{},"sourceType":"module"}