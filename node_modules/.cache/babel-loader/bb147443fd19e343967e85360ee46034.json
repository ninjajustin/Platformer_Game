{"ast":null,"code":"var _dec, _class, _class2;\nimport { ASerializable } from \"./index\";\nimport { Color } from \"../math/Color\";\nimport { AHandlesEvents } from \"./aobject/AHandlesEvents\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { proxy } from \"valtio/vanilla\";\nvar _appState;\nexport function SetAppState(appState) {\n  if (_appState !== undefined) {\n    throw new Error(`Already set the app state to ${_appState}`);\n  }\n  _appState = appState;\n  _appState.init();\n  return _appState;\n}\n_c = SetAppState;\nvar AppStateKeys;\n(function (AppStateKeys) {\n  AppStateKeys[\"InteractionMode\"] = \"InteractionMode\";\n  AppStateKeys[\"GUI_KEY\"] = \"GUI_KEY\";\n  AppStateKeys[\"AmbientLight\"] = \"ambient\";\n})(AppStateKeys || (AppStateKeys = {}));\nexport let AppStateEvents;\n(function (AppStateEvents) {\n  AppStateEvents[\"TRIGGER_CONTROL_PANEL_UPDATE\"] = \"TRIGGER_CONTROL_PANEL_UPDATE\";\n})(AppStateEvents || (AppStateEvents = {}));\nexport let AAppState = (_dec = ASerializable(\"AAppState\"), _dec(_class = (_class2 = class AAppState extends AHandlesEvents {\n  init() {}\n\n  /** Get set guiKey */\n  set _guiKey(value) {\n    this.stateValues[AAppState.AppStateDefaultKeys.GUI_KEY] = value;\n  }\n  get _guiKey() {\n    return this.stateValues[AAppState.AppStateDefaultKeys.GUI_KEY];\n  }\n  getState(key) {\n    return this.stateValues[key];\n  }\n  setState(name, value) {\n    this.stateValues[name] = value;\n    this.signalEvent(AAppState.GetEventKeyForName(name), value);\n  }\n  constructor() {\n    super();\n    this.stateValues = void 0;\n    this.GUIControlSpecs = {};\n    this.stateValues = proxy({});\n    this.setState(AAppState.AppStateDefaultKeys.GUI_KEY, uuidv4());\n    this.setState(AAppState.AppStateDefaultKeys.AmbientLight, 0.1);\n  }\n  updateControlPanel() {\n    this.signalEvent(AAppState.AppStateEvents.TRIGGER_CONTROL_PANEL_UPDATE);\n  }\n  addControlPanelListener(callback, handle) {\n    let synchronous = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    return this.addEventListener(AAppState.AppStateEvents.TRIGGER_CONTROL_PANEL_UPDATE, callback, handle);\n  }\n  _GetOnChangeForName(parameterName) {\n    const self = this;\n    return v => {\n      self.setState(parameterName, v);\n    };\n  }\n  _MakeSliderSpec(name, initialValue, min, max, step, otherSpecs) {\n    const self = this;\n    let specs = {\n      value: initialValue,\n      onChange: self._GetOnChangeForName(name),\n      ...otherSpecs\n    };\n    if (min !== undefined) {\n      specs['min'] = min;\n    }\n    if (max !== undefined) {\n      specs['max'] = max;\n    }\n    if (step !== undefined) {\n      specs['step'] = step;\n    }\n    return specs;\n  }\n  _MakeColorPickerSpec(name, initialValue, otherSpecs) {\n    const self = this;\n    let specs = {\n      value: initialValue.toHexString(),\n      onChange: v => {\n        return self._GetOnChangeForName(name)(Color.FromString(v));\n      },\n      ...otherSpecs\n    };\n    return specs;\n  }\n  _MakeSelectionSpec(name, initialValue, options, otherSpecs) {\n    const self = this;\n    let specs = {\n      value: initialValue,\n      options: options,\n      onChange: v => {\n        self._GetOnChangeForName(name)(v);\n      },\n      ...otherSpecs\n    };\n    return specs;\n  }\n  static GetEventKeyForName(name) {\n    return `Parameter_${name}_update_event`;\n  }\n  setGUIControlSpecKey(name, spec) {\n    this.GUIControlSpecs[name] = spec;\n    this.updateControlPanel();\n  }\n\n  // setGUIControlSpecKeyGroup(name:string, spec:GUIControlSpec){\n  //     this.GUIControlSpecs[name]= folder();\n  //     this.updateControlPanel();\n  // }\n\n  addSliderControl(name, initialValue, min, max, step) {\n    this.setGUIControlSpecKey(name, this._MakeSliderSpec(name, initialValue, min, max, step));\n  }\n  addColorControl(name, initialValue) {\n    this.setGUIControlSpecKey(name, this._MakeColorPickerSpec(name, initialValue));\n  }\n  setSelectionControl(name, initialValue, options, otherSpecs) {\n    this.setGUIControlSpecKey(name, this._MakeSelectionSpec(name, initialValue, options, otherSpecs));\n  }\n  addStateValueListener(stateName, callback, handle) {\n    return this.addEventListener(AAppState.GetEventKeyForName(stateName), callback, handle);\n  }\n  addControlSpec(controlSpec) {\n    this.GUIControlSpecs = {\n      ...this.GUIControlSpecs,\n      ...controlSpec\n    };\n  }\n\n  /**\n   * A helper function that will check whether the control panel currently has a given slider control in it.\n   * If the control is not there, then we will add it with the provided parameters.\n   * @param name\n   * @param initialValue: initial value for app state\n   * @param min: minimum value of slider\n   * @param max: maximum value of slider\n   * @param step: step size of slider\n   */\n  addSliderIfMissing(name, initialValue, min, max, step) {\n    if (this.getState(name) === undefined) {\n      this.addSliderControl(name, initialValue !== null && initialValue !== void 0 ? initialValue : 1.0, min, max, step);\n    }\n  }\n}, _class2.AppStateEvents = AppStateEvents, _class2.AppStateDefaultKeys = AppStateKeys, _class2)) || _class);\nexport function CheckAppState() {\n  return _appState;\n}\n_c2 = CheckAppState;\nexport function GetAppState() {\n  if (_appState === undefined) {\n    throw new Error(\"Must set app state!\");\n    // _appState = new AAppState();\n  }\n\n  return _appState;\n}\n_c3 = GetAppState;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"SetAppState\");\n$RefreshReg$(_c2, \"CheckAppState\");\n$RefreshReg$(_c3, \"GetAppState\");","map":{"version":3,"names":["ASerializable","Color","AHandlesEvents","v4","uuidv4","proxy","_appState","SetAppState","appState","undefined","Error","init","AppStateKeys","AppStateEvents","AAppState","_guiKey","value","stateValues","AppStateDefaultKeys","GUI_KEY","getState","key","setState","name","signalEvent","GetEventKeyForName","constructor","GUIControlSpecs","AmbientLight","updateControlPanel","TRIGGER_CONTROL_PANEL_UPDATE","addControlPanelListener","callback","handle","synchronous","addEventListener","_GetOnChangeForName","parameterName","self","v","_MakeSliderSpec","initialValue","min","max","step","otherSpecs","specs","onChange","_MakeColorPickerSpec","toHexString","FromString","_MakeSelectionSpec","options","setGUIControlSpecKey","spec","addSliderControl","addColorControl","setSelectionControl","addStateValueListener","stateName","addControlSpec","controlSpec","addSliderIfMissing","CheckAppState","GetAppState"],"sources":["/Users/home/Desktop/cs4620-final-project/src/anigraph/base/AAppState.ts"],"sourcesContent":["import {AObject, ASerializable} from \"./index\";\nimport {Color} from \"../math/Color\";\nimport {AHandlesEvents} from \"./aobject/AHandlesEvents\";\nimport {v4 as uuidv4} from \"uuid\";\nimport {proxy} from \"valtio/vanilla\";\nimport {folder} from \"leva\";\n\n\n\n\ntype _GUIControlSpec={[name:string]:any};\n\nexport type AppStateValueChangeCallback =(v:any)=>void;\n\nexport interface GUIControlSpec extends _GUIControlSpec{\n    value:any;\n    onChange:AppStateValueChangeCallback;\n}\nvar _appState:AAppState;\n\n\n\nexport function SetAppState(appState:AAppState):AAppState{\n    if(_appState !== undefined){\n        throw new Error(`Already set the app state to ${_appState}`);\n    }\n    _appState = appState;\n    _appState.init();\n    return _appState;\n}\n\nenum AppStateKeys{\n    InteractionMode=\"InteractionMode\",\n    GUI_KEY=\"GUI_KEY\",\n    AmbientLight=\"ambient\"\n}\n\nexport enum AppStateEvents{\n    TRIGGER_CONTROL_PANEL_UPDATE='TRIGGER_CONTROL_PANEL_UPDATE'\n}\n\n@ASerializable(\"AAppState\")\nexport class AAppState extends AHandlesEvents{\n    stateValues:{[name:string]:any};\n    GUIControlSpecs:{[name:string]:GUIControlSpec}={};\n    static AppStateEvents=AppStateEvents\n    static AppStateDefaultKeys=AppStateKeys;\n\n    init(){}\n\n    /** Get set guiKey */\n    set _guiKey(value){this.stateValues[AAppState.AppStateDefaultKeys.GUI_KEY]=value;}\n    get _guiKey(){return this.stateValues[AAppState.AppStateDefaultKeys.GUI_KEY];}\n\n    getState(key:string){\n        return this.stateValues[key];\n    }\n\n    setState(name:string, value:any){\n        this.stateValues[name]=value;\n        this.signalEvent(AAppState.GetEventKeyForName(name), value);\n    }\n\n    constructor() {\n        super();\n        this.stateValues=proxy({});\n        this.setState(AAppState.AppStateDefaultKeys.GUI_KEY, uuidv4());\n        this.setState(AAppState.AppStateDefaultKeys.AmbientLight, 0.1);\n    }\n\n    updateControlPanel(){\n        this.signalEvent(AAppState.AppStateEvents.TRIGGER_CONTROL_PANEL_UPDATE);\n    }\n\n    addControlPanelListener(callback:(self:AObject)=>void, handle?:string, synchronous:boolean=true){\n        return this.addEventListener(AAppState.AppStateEvents.TRIGGER_CONTROL_PANEL_UPDATE, callback, handle);\n    }\n\n\n    _GetOnChangeForName(parameterName:string):AppStateValueChangeCallback{\n        const self = this;\n        return (v:any)=>{\n            self.setState(parameterName, v);\n        }\n\n    }\n\n    _MakeSliderSpec(name:string, initialValue:any, min?:number, max?:number, step?:number, otherSpecs?:{[name:string]:any}):GUIControlSpec{\n        const self = this;\n        let specs:GUIControlSpec = {\n            value: initialValue,\n            onChange: self._GetOnChangeForName(name),\n            ...otherSpecs\n        }\n        if(min!==undefined){\n            specs['min']=min;\n        }\n        if(max!==undefined){\n            specs['max']=max;\n        }\n        if(step!==undefined){\n            specs['step']=step;\n        }\n        return specs;\n    }\n\n    _MakeColorPickerSpec(name:string, initialValue:Color, otherSpecs?:{[name:string]:any}):GUIControlSpec{\n        const self = this;\n        let specs:GUIControlSpec = {\n            value: initialValue.toHexString(),\n            onChange: (v:string)=>{return self._GetOnChangeForName(name)(Color.FromString(v));},\n            ...otherSpecs\n        }\n        return specs;\n    }\n\n    _MakeSelectionSpec(name:string, initialValue:any, options:any[], otherSpecs?:{[name:string]:any}):GUIControlSpec{\n        const self = this;\n        let specs:GUIControlSpec={\n                value: initialValue,\n                options: options,\n                onChange: (v: any) => {\n                self._GetOnChangeForName(name)(v);\n            },\n            ...otherSpecs\n        }\n        return specs;\n    }\n\n\n    static GetEventKeyForName(name:string):string{\n        return `Parameter_${name}_update_event`;\n    }\n\n    setGUIControlSpecKey(name:string, spec:GUIControlSpec){\n        this.GUIControlSpecs[name]= spec;\n        this.updateControlPanel();\n    }\n\n    // setGUIControlSpecKeyGroup(name:string, spec:GUIControlSpec){\n    //     this.GUIControlSpecs[name]= folder();\n    //     this.updateControlPanel();\n    // }\n\n    addSliderControl(name:string, initialValue:any, min?:number, max?:number, step?:number){\n        this.setGUIControlSpecKey(name, this._MakeSliderSpec(name, initialValue, min, max, step))\n    }\n\n    addColorControl(name:string, initialValue:Color){\n        this.setGUIControlSpecKey(name,this._MakeColorPickerSpec(name, initialValue));\n    }\n\n    setSelectionControl(name:string, initialValue:any, options:any[], otherSpecs?:{[name:string]:any}){\n        this.setGUIControlSpecKey(name,this._MakeSelectionSpec(name, initialValue, options, otherSpecs));\n    }\n\n\n    addStateValueListener(\n        stateName: string,\n        callback: AppStateValueChangeCallback,\n        handle?: string\n    ) {\n        return this.addEventListener(\n            AAppState.GetEventKeyForName(stateName),\n            callback,\n            handle,\n            );\n    }\n\n    addControlSpec(controlSpec:{[name:string]:GUIControlSpec}){\n        this.GUIControlSpecs = {\n            ...this.GUIControlSpecs,\n            ...controlSpec\n        };\n    }\n\n    /**\n     * A helper function that will check whether the control panel currently has a given slider control in it.\n     * If the control is not there, then we will add it with the provided parameters.\n     * @param name\n     * @param initialValue: initial value for app state\n     * @param min: minimum value of slider\n     * @param max: maximum value of slider\n     * @param step: step size of slider\n     */\n    addSliderIfMissing(name:string, initialValue?:number, min?:number, max?:number, step?:number){\n        if(this.getState(name)===undefined){\n            this.addSliderControl(name, initialValue??1.0, min, max, step);\n        }\n    }\n\n}\n\nexport function CheckAppState():AAppState|undefined{\n    return _appState;\n}\n\n\nexport function GetAppState():AAppState{\n    if(_appState===undefined){\n        throw new Error(\"Must set app state!\");\n        // _appState = new AAppState();\n    }\n    return _appState;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}