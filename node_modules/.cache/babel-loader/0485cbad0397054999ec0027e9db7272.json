{"ast":null,"code":"import _initializerDefineProperty from \"/Users/home/Desktop/cs4620-final-project/node_modules/@babel/runtime/helpers/esm/initializerDefineProperty.js\";\nimport _applyDecoratedDescriptor from \"/Users/home/Desktop/cs4620-final-project/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor.js\";\nimport _initializerWarningHelper from \"/Users/home/Desktop/cs4620-final-project/node_modules/@babel/runtime/helpers/esm/initializerWarningHelper.js\";\nvar _dec, _class, _class2, _descriptor;\n/**\n * @file Manages the configuration settings for the widget.\n * @author Abe Davis\n * @description Defines AGLRenderWindow class, which connects an AGLContext with a HTMLElement and provides functionality for window image capture.\n */\nimport { AObject, AObjectState, ASerializable } from \"../../base\";\nexport let AGLRenderWindow = (_dec = ASerializable(\"AGLRenderWindow\"), _dec(_class = (_class2 = class AGLRenderWindow extends AObject {\n  get contextElement() {\n    return this.context.renderer.domElement;\n  }\n  get aspect() {\n    return this.container.clientWidth / this.container.clientHeight;\n  }\n  constructor(context, delegate, container) {\n    super();\n    _initializerDefineProperty(this, \"isRendering\", _descriptor, this);\n    this._frameRequested = false;\n    this._delegate = void 0;\n    this.container = void 0;\n    this._context = void 0;\n    this._recordNextFrame = false;\n    this._recordNextFrameCallback = void 0;\n    this.isRendering = false;\n    if (context) {\n      this.setContext(context);\n    }\n    if (container) {\n      this.setContainer(container);\n    }\n    if (delegate) {\n      this.setDelegate(delegate);\n      // this._delegate = delegate;\n      // this.delegate.initRendering(this);\n    }\n\n    this.bindMethods();\n    const self = this;\n    window.addEventListener(\"resize\", () => {\n      if (self.delegate) {\n        self.delegate.onResize(self);\n      }\n    });\n  }\n  get delegate() {\n    return this._delegate;\n  }\n  get context() {\n    return this._context;\n  }\n  get renderer() {\n    return this.context.renderer;\n  }\n  setContainer(container) {\n    this.container = container;\n    this.container.appendChild(this.renderer.domElement);\n    this.renderer.setSize(this.container.clientWidth, this.container.clientWidth);\n  }\n  setContext(context) {\n    this._context = context;\n  }\n  async setDelegate(delegate) {\n    this._delegate = delegate;\n    this._delegate.PreloadAssets().then(() => {\n      delegate.initRendering(this);\n      // delegate.setReadyToRender(true);\n    });\n    // this.delegate.initRendering()\n  }\n\n  bindMethods() {\n    this.render = this.render.bind(this);\n    this._saveSingleFrameCallback = this._saveSingleFrameCallback.bind(this);\n  }\n  recordNextFrame(callback) {\n    if (callback === undefined) {\n      this._recordNextFrameCallback = this._saveSingleFrameCallback;\n    } else {\n      this._recordNextFrameCallback = callback;\n    }\n    this._recordNextFrame = true;\n  }\n  _saveSingleFrameCallback(imageBlob) {\n    // @ts-ignore\n    saveAs(imageBlob, `${this.serializationLabel}.png`);\n  }\n  stopRendering() {\n    this.isRendering = false;\n  }\n  startRendering() {\n    if (!this.isRendering) {\n      this.isRendering = true;\n      this.render();\n    }\n  }\n  render() {\n    if (this.isRendering) {\n      requestAnimationFrame(() => this.render());\n      this._frameRequested = true;\n      if (this.delegate.isReadyToRender) {\n        this.delegate.onAnimationFrameCallback(this.context);\n        if (this._recordNextFrame === true) {\n          this._recordNextFrame = false;\n          let self = this;\n          this.renderer.domElement.toBlob(function (blob) {\n            self._recordNextFrameCallback(blob);\n          });\n          console.warn(\"May be using DOM element resolution for saving frame...\");\n        }\n      }\n    }\n  }\n}, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, \"isRendering\", [AObjectState], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n})), _class2)) || _class);","map":{"version":3,"names":["AObject","AObjectState","ASerializable","AGLRenderWindow","contextElement","context","renderer","domElement","aspect","container","clientWidth","clientHeight","constructor","delegate","_frameRequested","_delegate","_context","_recordNextFrame","_recordNextFrameCallback","isRendering","setContext","setContainer","setDelegate","bindMethods","self","window","addEventListener","onResize","appendChild","setSize","PreloadAssets","then","initRendering","render","bind","_saveSingleFrameCallback","recordNextFrame","callback","undefined","imageBlob","saveAs","serializationLabel","stopRendering","startRendering","requestAnimationFrame","isReadyToRender","onAnimationFrameCallback","toBlob","blob","console","warn"],"sources":["/Users/home/Desktop/cs4620-final-project/src/anigraph/rendering/context/AGLRenderWindow.ts"],"sourcesContent":["/**\n * @file Manages the configuration settings for the widget.\n * @author Abe Davis\n * @description Defines AGLRenderWindow class, which connects an AGLContext with a HTMLElement and provides functionality for window image capture.\n */\nimport {AObject, AObjectState, ASerializable} from \"../../base\";\nimport {AGLContext} from \"./AGLContext\";\nimport * as ARenderDelegate from \"./ARenderDelegate\";\n\n\n@ASerializable(\"AGLRenderWindow\")\nexport class AGLRenderWindow extends AObject {\n    @AObjectState isRendering:boolean;\n    protected _frameRequested:boolean=false;\n    protected _delegate!:ARenderDelegate.ARenderDelegate;\n    public container!: HTMLElement;\n    protected _context!: AGLContext;\n\n    get contextElement(){\n        return this.context.renderer.domElement;\n    }\n\n    protected _recordNextFrame: boolean = false;\n    protected _recordNextFrameCallback!: (imageBlob: Blob | null) => void;\n\n    get aspect(){\n        return this.container.clientWidth/this.container.clientHeight;\n    }\n\n    constructor(context?:AGLContext, delegate?: ARenderDelegate.ARenderDelegate, container?:HTMLElement,){\n        super();\n        this.isRendering=false;\n        if(context) {\n            this.setContext(context);\n        }\n        if(container){\n            this.setContainer(container);\n        }\n        if(delegate) {\n            this.setDelegate(delegate);\n            // this._delegate = delegate;\n            // this.delegate.initRendering(this);\n        }\n        this.bindMethods();\n\n        const self = this;\n        window.addEventListener(\"resize\", ()=>{\n            if(self.delegate) {\n                self.delegate.onResize(self);\n            }\n        });\n    }\n\n    get delegate(){return this._delegate;}\n    get context(): AGLContext {return this._context;}\n    get renderer() {return this.context.renderer;}\n\n\n    setContainer(container:HTMLElement){\n        this.container = container;\n        this.container.appendChild(this.renderer.domElement);\n        this.renderer.setSize(this.container.clientWidth, this.container.clientWidth);\n    }\n\n    setContext(context:AGLContext){\n        this._context = context;\n    }\n\n\n    async setDelegate(delegate:ARenderDelegate.ARenderDelegate){\n        this._delegate = delegate;\n        this._delegate.PreloadAssets().then(()=>{\n            delegate.initRendering(this);\n            // delegate.setReadyToRender(true);\n        });\n        // this.delegate.initRendering()\n    }\n\n    bindMethods(){\n        this.render = this.render.bind(this);\n        this._saveSingleFrameCallback = this._saveSingleFrameCallback.bind(this);\n    }\n\n    recordNextFrame(callback?:(imageBlob:Blob|null)=>void){\n        if(callback===undefined){\n            this._recordNextFrameCallback = this._saveSingleFrameCallback;\n        }else{\n            this._recordNextFrameCallback=callback;\n        }\n        this._recordNextFrame = true;\n    }\n\n    _saveSingleFrameCallback(imageBlob:Blob|null){\n        // @ts-ignore\n        saveAs(imageBlob, `${this.serializationLabel}.png`);\n    }\n\n    stopRendering(){\n        this.isRendering = false;\n    }\n\n    startRendering(){\n        if(!this.isRendering){\n            this.isRendering=true;\n            this.render();\n        }\n    }\n\n    render(){\n        if(this.isRendering){\n            requestAnimationFrame(()=>this.render());\n            this._frameRequested=true;\n            if(this.delegate.isReadyToRender) {\n                this.delegate.onAnimationFrameCallback(this.context);\n                if (this._recordNextFrame === true) {\n                    this._recordNextFrame = false;\n                    let self = this;\n                    this.renderer.domElement.toBlob(function (blob: Blob | null) {\n                        self._recordNextFrameCallback(blob);\n                    });\n                    console.warn(\"May be using DOM element resolution for saving frame...\")\n                }\n            }\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}