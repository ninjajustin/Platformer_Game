{"ast":null,"code":"var _dec, _class;\nimport { Mat3, Mat4 } from \"../../math\";\nimport { ASerializable } from \"../../base\";\nexport let AGraphicObject = (_dec = ASerializable(\"AGraphicObject\"), _dec(_class = class AGraphicObject {\n  /**\n   * This should be what is added to the threejs scenevis\n   */\n\n  onMaterialUpdate(newMaterial) {\n    // console.log(\"Material Update!\")\n  }\n  onMaterialChange(newMaterial) {}\n  setColor(color) {}\n  setObject3DName(name) {\n    this.threejs.name = name;\n  }\n\n  /**\n   * This should be whatever receives events\n   */\n  // get eventHandler(){return this.threejs;}\n\n  setMatrix(mat) {\n    if (mat instanceof Mat3) {\n      Mat4.From2DMat3(mat).assignTo(this.threejs.matrix);\n      ;\n    } else {\n      mat.assignTo(this.threejs.matrix);\n    }\n  }\n  getMatrix() {\n    return;\n    Mat4.FromThreeJS(this.threejs.matrix);\n  }\n  get uid() {\n    return this.threejs.uuid;\n  }\n  add(toAdd) {\n    this.threejs.add(toAdd.threejs);\n  }\n  remove(toRemove) {\n    this.threejs.remove(toRemove.threejs);\n  }\n  get serializationLabel() {\n    // @ts-ignore\n    return this.constructor._serializationLabel;\n  }\n\n  /** Get set visible */\n  set visible(value) {\n    this.threejs.visible = value;\n  }\n  get visible() {\n    return this.threejs.visible;\n  }\n  setTransform(T) {\n    let mat = T.getMatrix();\n    if (mat instanceof Mat3) {\n      mat = Mat4.From2DMat3(mat);\n    }\n    mat.assignTo(this.threejs.matrix);\n  }\n  dispose() {\n    if (this.threejs) {\n      var _this$threejs$parent;\n      // this._mesh.dispose();\n      (_this$threejs$parent = this.threejs.parent) === null || _this$threejs$parent === void 0 ? void 0 : _this$threejs$parent.remove(this.threejs);\n    }\n  }\n}) || _class);","map":{"version":3,"names":["Mat3","Mat4","ASerializable","AGraphicObject","onMaterialUpdate","newMaterial","onMaterialChange","setColor","color","setObject3DName","name","threejs","setMatrix","mat","From2DMat3","assignTo","matrix","getMatrix","FromThreeJS","uid","uuid","add","toAdd","remove","toRemove","serializationLabel","constructor","_serializationLabel","visible","value","setTransform","T","dispose","parent"],"sources":["/Users/home/Desktop/cs4620-final-project/src/anigraph/rendering/graphicobject/AGraphicObject.ts"],"sourcesContent":["import * as THREE from \"three\";\nimport {Color, Mat3, Mat4, TransformationInterface, Vec3} from \"../../math\";\nimport {AMaterial} from \"../material\";\nimport {ASerializable} from \"../../base\";\n\nexport interface HasThreeJSObject{\n    threejs:THREE.Object3D;\n}\n\n\n@ASerializable(\"AGraphicObject\")\nexport abstract class AGraphicObject implements HasThreeJSObject{\n    /**\n     * This should be what is added to the threejs scenevis\n     */\n    abstract get threejs():THREE.Object3D;\n\n    onMaterialUpdate(newMaterial:AMaterial, ...args:any[]){\n        // console.log(\"Material Update!\")\n    }\n    onMaterialChange(newMaterial:AMaterial, ...args:any[]){\n    }\n    setColor(color:Color){\n    }\n\n\n    setObject3DName(name:string){\n        this.threejs.name = name;\n    }\n\n    /**\n     * This should be whatever receives events\n     */\n    // get eventHandler(){return this.threejs;}\n\n    setMatrix(mat:Mat3|Mat4){\n        if(mat instanceof Mat3){\n            Mat4.From2DMat3(mat).assignTo(this.threejs.matrix);;\n        }else{\n            mat.assignTo(this.threejs.matrix);\n        }\n\n    }\n\n    getMatrix(){return\n        Mat4.FromThreeJS(this.threejs.matrix);\n    }\n\n    get uid(){\n        return this.threejs.uuid;\n    }\n\n    add(toAdd:AGraphicObject){\n        this.threejs.add(toAdd.threejs);\n    }\n    remove(toRemove:AGraphicObject){\n        this.threejs.remove(toRemove.threejs);\n    }\n\n    get serializationLabel(){\n        // @ts-ignore\n        return this.constructor._serializationLabel\n    }\n\n    /** Get set visible */\n    set visible(value){this.threejs.visible = value;}\n    get visible(){return this.threejs.visible;}\n\n    public setTransform(T:TransformationInterface){\n        let mat = T.getMatrix();\n        if(mat instanceof Mat3){\n            mat = Mat4.From2DMat3(mat);\n        }\n        (mat as Mat4).assignTo(this.threejs.matrix);\n    };\n\n    dispose(){\n        if(this.threejs){\n            // this._mesh.dispose();\n            this.threejs.parent?.remove(this.threejs);\n        }\n\n    }\n}\n"],"mappings":";AACA,SAAeA,IAAI,EAAEC,IAAI,QAAsC,YAAY;AAE3E,SAAQC,aAAa,QAAO,YAAY;AAOxC,WACsBC,cAAc,WADnCD,aAAa,CAAC,gBAAgB,CAAC,gBAAhC,MACsBC,cAAc,CAA4B;EAC5D;AACJ;AACA;;EAGIC,gBAAgB,CAACC,WAAqB,EAAgB;IAClD;EAAA;EAEJC,gBAAgB,CAACD,WAAqB,EAAgB,CACtD;EACAE,QAAQ,CAACC,KAAW,EAAC,CACrB;EAGAC,eAAe,CAACC,IAAW,EAAC;IACxB,IAAI,CAACC,OAAO,CAACD,IAAI,GAAGA,IAAI;EAC5B;;EAEA;AACJ;AACA;EACI;;EAEAE,SAAS,CAACC,GAAa,EAAC;IACpB,IAAGA,GAAG,YAAYb,IAAI,EAAC;MACnBC,IAAI,CAACa,UAAU,CAACD,GAAG,CAAC,CAACE,QAAQ,CAAC,IAAI,CAACJ,OAAO,CAACK,MAAM,CAAC;MAAC;IACvD,CAAC,MAAI;MACDH,GAAG,CAACE,QAAQ,CAAC,IAAI,CAACJ,OAAO,CAACK,MAAM,CAAC;IACrC;EAEJ;EAEAC,SAAS,GAAE;IAAC;IACRhB,IAAI,CAACiB,WAAW,CAAC,IAAI,CAACP,OAAO,CAACK,MAAM,CAAC;EACzC;EAEA,IAAIG,GAAG,GAAE;IACL,OAAO,IAAI,CAACR,OAAO,CAACS,IAAI;EAC5B;EAEAC,GAAG,CAACC,KAAoB,EAAC;IACrB,IAAI,CAACX,OAAO,CAACU,GAAG,CAACC,KAAK,CAACX,OAAO,CAAC;EACnC;EACAY,MAAM,CAACC,QAAuB,EAAC;IAC3B,IAAI,CAACb,OAAO,CAACY,MAAM,CAACC,QAAQ,CAACb,OAAO,CAAC;EACzC;EAEA,IAAIc,kBAAkB,GAAE;IACpB;IACA,OAAO,IAAI,CAACC,WAAW,CAACC,mBAAmB;EAC/C;;EAEA;EACA,IAAIC,OAAO,CAACC,KAAK,EAAC;IAAC,IAAI,CAAClB,OAAO,CAACiB,OAAO,GAAGC,KAAK;EAAC;EAChD,IAAID,OAAO,GAAE;IAAC,OAAO,IAAI,CAACjB,OAAO,CAACiB,OAAO;EAAC;EAEnCE,YAAY,CAACC,CAAyB,EAAC;IAC1C,IAAIlB,GAAG,GAAGkB,CAAC,CAACd,SAAS,EAAE;IACvB,IAAGJ,GAAG,YAAYb,IAAI,EAAC;MACnBa,GAAG,GAAGZ,IAAI,CAACa,UAAU,CAACD,GAAG,CAAC;IAC9B;IACCA,GAAG,CAAUE,QAAQ,CAAC,IAAI,CAACJ,OAAO,CAACK,MAAM,CAAC;EAC/C;EAEAgB,OAAO,GAAE;IACL,IAAG,IAAI,CAACrB,OAAO,EAAC;MAAA;MACZ;MACA,4BAAI,CAACA,OAAO,CAACsB,MAAM,yDAAnB,qBAAqBV,MAAM,CAAC,IAAI,CAACZ,OAAO,CAAC;IAC7C;EAEJ;AACJ,CAAC"},"metadata":{},"sourceType":"module"}