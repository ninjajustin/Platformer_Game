{"ast":null,"code":"import { BaseSceneController } from \"../../../../BaseClasses\";\nimport { AGraphicElement, APointLightModel, APointLightView, ASceneElement, AShaderModel, GetAppState, Mat4, V3 } from \"../../../../../anigraph\";\nimport { ATriangleMeshModel, ATriangleMeshView } from \"../../../../../anigraph/scene/nodes\";\nimport { BotModel, BotView, ExampleParticleSystemModel, ExampleParticleSystemView, ExampleThreeJSNodeModel, ExampleThreeJSNodeView, PlayerModel, PlayerView, TerrainModel, TerrainView } from \"../../../Nodes\";\nimport * as THREE from \"three\";\nimport { ADebugInteractionMode } from \"../../../../../anigraph/scene/interactionmodes\";\nimport { ExamplePlayerInteractionMode } from \"../../../InteractionModes\";\nimport { ExamplePointerLockInteractionMode } from \"../../../InteractionModes/ExamplePointerLockInteractionMode\";\nimport { ExampleLoadedCharacterModel, ExampleLoadedModel, ExampleLoadedView } from \"../../../Nodes/Loaded\";\nimport { BillboardParticleSystemModel, BillboardParticleSystemView } from \"../../../Nodes/BillboardParticleSystem\";\nimport { ARenderTarget } from \"../../../../../anigraph/rendering/multipass/ARenderTarget\";\nimport { ACameraElement } from \"../../../../../anigraph/rendering/ACameraElement\";\nconst appState = GetAppState();\nconst RenderTargetWidth = 512;\nconst RenderTargetHeight = 512;\nexport class Example3SceneController extends BaseSceneController {\n  constructor() {\n    super(...arguments);\n    this.postProcessingCamera = void 0;\n    this.postProcessingScene = void 0;\n    this.fullScreenQuad = void 0;\n    this.postProcessingShaderModel = void 0;\n    this.postProcessingMaterial = void 0;\n    this.currentTextureRenderTarget = void 0;\n  }\n  async initPostProcessingEffects() {\n    this.postProcessingScene = new ASceneElement();\n    this.postProcessingCamera = ACameraElement.CreateOrthographic(-1, 1, -1, 1, -1, 1);\n    this.currentTextureRenderTarget = new ARenderTarget(RenderTargetWidth, RenderTargetHeight);\n    this.currentTextureRenderTarget.targetTexture.setMinFilter(THREE.LinearMipmapLinearFilter);\n    this.currentTextureRenderTarget.targetTexture.setMagFilter(THREE.LinearFilter);\n    this.postProcessingShaderModel = await AShaderModel.CreateModel(\"postprocessing\");\n    this.postProcessingMaterial = this.postProcessingShaderModel.CreateMaterial();\n    this.postProcessingMaterial.setTexture('input', this.currentTextureRenderTarget.targetTexture);\n    this.fullScreenQuad = AGraphicElement.CreateSimpleQuad(this.postProcessingMaterial);\n    this.fullScreenQuad.setTransform(Mat4.Scale3D(V3(2.0, 2.0, 1.0)));\n    this.postProcessingScene.add(this.fullScreenQuad);\n    const self = this;\n    appState.addSliderIfMissing(\"sliderValue\", 1, 0, 10, 0.01);\n    this.subscribeToAppState(\"sliderValue\", v => {\n      self.postProcessingMaterial.setUniform(\"sliderValue\", v);\n    });\n  }\n  get model() {\n    return this._model;\n  }\n\n  /**\n   * This is where you specify the mapping from model classes to view classes.\n   */\n  initModelViewSpecs() {\n    this.addModelViewSpec(APointLightModel, APointLightView);\n    this.addModelViewSpec(ATriangleMeshModel, ATriangleMeshView);\n    this.addModelViewSpec(TerrainModel, TerrainView);\n    this.addModelViewSpec(PlayerModel, PlayerView);\n    this.addModelViewSpec(BotModel, BotView);\n    this.addModelViewSpec(ExampleThreeJSNodeModel, ExampleThreeJSNodeView);\n    this.addModelViewSpec(ExampleParticleSystemModel, ExampleParticleSystemView);\n\n    // Note that we can use the same view for two different models!\n    this.addModelViewSpec(ExampleLoadedCharacterModel, ExampleLoadedView);\n    this.addModelViewSpec(ExampleLoadedModel, ExampleLoadedView);\n    this.addModelViewSpec(BillboardParticleSystemModel, BillboardParticleSystemView);\n  }\n  async initRendering(renderWindow) {\n    await super.initRendering(renderWindow);\n    await this.initPostProcessingEffects();\n  }\n  async initScene() {\n    /**\n     * Set up the skybox background\n     */\n    await super.initScene();\n    let path = './images/cube/MilkyWay/dark-s_';\n    let format = '.jpg';\n    const urls = [path + 'px' + format, path + 'nx' + format, path + 'py' + format, path + 'ny' + format, path + 'pz' + format, path + 'nz' + format];\n\n    /**\n     * If you want to change the skybox, you will need to provide the appropriate urls to the corresponding textures\n     * from a cube map\n     */\n    const reflectionCube = new THREE.CubeTextureLoader().load(urls);\n    reflectionCube.rotation = Math.PI * 0.25;\n    this.view.threejs.background = reflectionCube;\n  }\n  initInteractions() {\n    /**\n     * We will define the debug interaction mode here.\n     * The debug mode is offered mainly to provide camera controls for developing and debugging non-control-related\n     * features. It may also be useful as an example for you to look at if you like.\n     */\n    super.initInteractions();\n    let debugInteractionMode = new ADebugInteractionMode(this);\n    this.defineInteractionMode(\"Debug\", debugInteractionMode);\n\n    /**\n     * This code adds the ExamplePlayer interaction mode and sets it as the current active mode\n     */\n    let playerInteractionMode = new ExamplePlayerInteractionMode(this);\n    this.defineInteractionMode(\"ExamplePlayer\", playerInteractionMode);\n    let pointerLockInteractionMode = new ExamplePointerLockInteractionMode(this);\n    this.defineInteractionMode(\"ExamplePointerLock\", pointerLockInteractionMode);\n\n    /**\n     * For starters we will default to the debug mode.\n     */\n    this.setCurrentInteractionMode(\"Debug\");\n  }\n  onAnimationFrameCallback(context) {\n    // let's update the model\n    let time = this.time;\n    this.model.timeUpdate(time);\n\n    /**\n     * And the interaction mode... This is important for things like camera motion filtering.\n     */\n    this.interactionMode.timeUpdate(time);\n\n    /**\n     * Set the render target to our texture target and clear it\n     */\n    this.setRenderTarget(this.currentTextureRenderTarget);\n    context.renderer.clear();\n\n    /**\n     * Render our scene to the texture target\n     */\n    context.renderer.render(this.view.threejs, this._threeCamera);\n\n    /**\n     * Set the target back to the screen and clear it\n     */\n    context.renderer.setRenderTarget(null);\n    context.renderer.clear();\n\n    /**\n     * Render our post-processing scene, which has a full screen quad, to the screen.\n     */\n    context.renderer.render(this.postProcessingScene.threejs, this.postProcessingCamera.threejs);\n  }\n}","map":{"version":3,"names":["BaseSceneController","AGraphicElement","APointLightModel","APointLightView","ASceneElement","AShaderModel","GetAppState","Mat4","V3","ATriangleMeshModel","ATriangleMeshView","BotModel","BotView","ExampleParticleSystemModel","ExampleParticleSystemView","ExampleThreeJSNodeModel","ExampleThreeJSNodeView","PlayerModel","PlayerView","TerrainModel","TerrainView","THREE","ADebugInteractionMode","ExamplePlayerInteractionMode","ExamplePointerLockInteractionMode","ExampleLoadedCharacterModel","ExampleLoadedModel","ExampleLoadedView","BillboardParticleSystemModel","BillboardParticleSystemView","ARenderTarget","ACameraElement","appState","RenderTargetWidth","RenderTargetHeight","Example3SceneController","postProcessingCamera","postProcessingScene","fullScreenQuad","postProcessingShaderModel","postProcessingMaterial","currentTextureRenderTarget","initPostProcessingEffects","CreateOrthographic","targetTexture","setMinFilter","LinearMipmapLinearFilter","setMagFilter","LinearFilter","CreateModel","CreateMaterial","setTexture","CreateSimpleQuad","setTransform","Scale3D","add","self","addSliderIfMissing","subscribeToAppState","v","setUniform","model","_model","initModelViewSpecs","addModelViewSpec","initRendering","renderWindow","initScene","path","format","urls","reflectionCube","CubeTextureLoader","load","rotation","Math","PI","view","threejs","background","initInteractions","debugInteractionMode","defineInteractionMode","playerInteractionMode","pointerLockInteractionMode","setCurrentInteractionMode","onAnimationFrameCallback","context","time","timeUpdate","interactionMode","setRenderTarget","renderer","clear","render","_threeCamera"],"sources":["/Users/home/Desktop/cs4620-final-project/src/app/main/Scene/ExampleScenes/Example3/Example3SceneController.ts"],"sourcesContent":["import {BaseSceneController} from \"../../../../BaseClasses\";\nimport {MainSceneModel} from \"../../MainSceneModel\";\nimport {\n    ACamera,\n    AGLContext,\n    AGLRenderWindow, AGraphicElement,\n    APointLightModel,\n    APointLightView,\n    ASceneElement, AShaderMaterial, AShaderModel, GetAppState, Mat4, V3\n} from \"../../../../../anigraph\";\nimport {ATriangleMeshModel, ATriangleMeshView} from \"../../../../../anigraph/scene/nodes\";\nimport {\n    BotModel,\n    BotView, ExampleParticleSystemModel, ExampleParticleSystemView,\n    ExampleThreeJSNodeModel, ExampleThreeJSNodeView,\n    PlayerModel,\n    PlayerView,\n    TerrainModel,\n    TerrainView\n} from \"../../../Nodes\";\nimport * as THREE from \"three\";\nimport {ADebugInteractionMode} from \"../../../../../anigraph/scene/interactionmodes\";\nimport {ExamplePlayerInteractionMode} from \"../../../InteractionModes\";\nimport {ExamplePointerLockInteractionMode} from \"../../../InteractionModes/ExamplePointerLockInteractionMode\";\nimport {ExampleLoadedCharacterModel, ExampleLoadedModel, ExampleLoadedView} from \"../../../Nodes/Loaded\";\nimport {\n    BillboardParticleSystemModel,\n    BillboardParticleSystemView\n} from \"../../../Nodes/BillboardParticleSystem\";\nimport {ARenderTarget} from \"../../../../../anigraph/rendering/multipass/ARenderTarget\";\nimport {Example3SceneModel} from \"./Example3SceneModel\";\nimport {ACameraElement} from \"../../../../../anigraph/rendering/ACameraElement\";\n\nconst appState = GetAppState();\nconst RenderTargetWidth:number=512;\nconst RenderTargetHeight:number=512;\nexport class Example3SceneController extends BaseSceneController{\n    postProcessingCamera!:ACameraElement;\n    postProcessingScene!:ASceneElement;\n    fullScreenQuad!:AGraphicElement;\n    postProcessingShaderModel!:AShaderModel;\n    postProcessingMaterial!:AShaderMaterial;\n    currentTextureRenderTarget!:ARenderTarget;\n\n\n    async initPostProcessingEffects(){\n        this.postProcessingScene = new ASceneElement();\n        this.postProcessingCamera = ACameraElement.CreateOrthographic(-1,1,-1,1,-1,1);\n        this.currentTextureRenderTarget = new ARenderTarget(RenderTargetWidth, RenderTargetHeight);\n        this.currentTextureRenderTarget.targetTexture.setMinFilter(THREE.LinearMipmapLinearFilter);\n        this.currentTextureRenderTarget.targetTexture.setMagFilter(THREE.LinearFilter);\n        this.postProcessingShaderModel = await AShaderModel.CreateModel(\"postprocessing\");\n        this.postProcessingMaterial = this.postProcessingShaderModel.CreateMaterial();\n        this.postProcessingMaterial.setTexture('input', this.currentTextureRenderTarget.targetTexture);\n        this.fullScreenQuad = AGraphicElement.CreateSimpleQuad(this.postProcessingMaterial);\n        this.fullScreenQuad.setTransform(Mat4.Scale3D(V3(2.0,2.0,1.0)));\n        this.postProcessingScene.add(this.fullScreenQuad);\n        const self = this;\n        appState.addSliderIfMissing(\"sliderValue\", 1,0,10,0.01);\n        this.subscribeToAppState(\"sliderValue\", (v:number)=>{\n            self.postProcessingMaterial.setUniform(\"sliderValue\", v);\n        });\n    }\n\n\n    get model():Example3SceneModel{\n        return this._model as Example3SceneModel;\n    }\n\n\n\n    /**\n     * This is where you specify the mapping from model classes to view classes.\n     */\n    initModelViewSpecs(): void {\n        this.addModelViewSpec(APointLightModel, APointLightView);\n        this.addModelViewSpec(ATriangleMeshModel, ATriangleMeshView);\n        this.addModelViewSpec(TerrainModel, TerrainView);\n        this.addModelViewSpec(PlayerModel, PlayerView);\n        this.addModelViewSpec(BotModel, BotView);\n        this.addModelViewSpec(ExampleThreeJSNodeModel, ExampleThreeJSNodeView);\n        this.addModelViewSpec(ExampleParticleSystemModel, ExampleParticleSystemView);\n\n        // Note that we can use the same view for two different models!\n        this.addModelViewSpec(ExampleLoadedCharacterModel, ExampleLoadedView);\n        this.addModelViewSpec(ExampleLoadedModel, ExampleLoadedView);\n\n        this.addModelViewSpec(BillboardParticleSystemModel, BillboardParticleSystemView);\n\n\n    }\n\n    async initRendering(renderWindow: AGLRenderWindow): Promise<void> {\n        await super.initRendering(renderWindow);\n        await this.initPostProcessingEffects();\n    }\n\n    async initScene(): Promise<void> {\n        /**\n         * Set up the skybox background\n         */\n        await super.initScene();\n        let path = './images/cube/MilkyWay/dark-s_';\n        let format = '.jpg'\n        const urls = [\n            path + 'px' + format, path + 'nx' + format,\n            path + 'py' + format, path + 'ny' + format,\n            path + 'pz' + format, path + 'nz' + format\n        ];\n\n        /**\n         * If you want to change the skybox, you will need to provide the appropriate urls to the corresponding textures\n         * from a cube map\n         */\n        const reflectionCube = new THREE.CubeTextureLoader().load( urls );\n        reflectionCube.rotation = Math.PI*0.25;\n        this.view.threejs.background = reflectionCube;\n\n\n\n    }\n\n    initInteractions() {\n\n        /**\n         * We will define the debug interaction mode here.\n         * The debug mode is offered mainly to provide camera controls for developing and debugging non-control-related\n         * features. It may also be useful as an example for you to look at if you like.\n         */\n        super.initInteractions();\n        let debugInteractionMode = new ADebugInteractionMode(this);\n        this.defineInteractionMode(\"Debug\", debugInteractionMode);\n\n\n        /**\n         * This code adds the ExamplePlayer interaction mode and sets it as the current active mode\n         */\n        let playerInteractionMode = new ExamplePlayerInteractionMode(this);\n        this.defineInteractionMode(\"ExamplePlayer\", playerInteractionMode);\n\n\n        let pointerLockInteractionMode = new ExamplePointerLockInteractionMode(this);\n        this.defineInteractionMode(\"ExamplePointerLock\", pointerLockInteractionMode);\n\n        /**\n         * For starters we will default to the debug mode.\n         */\n        this.setCurrentInteractionMode(\"Debug\")\n\n    }\n\n    onAnimationFrameCallback(context:AGLContext) {\n        // let's update the model\n        let time = this.time;\n        this.model.timeUpdate(time);\n\n        /**\n         * And the interaction mode... This is important for things like camera motion filtering.\n         */\n        this.interactionMode.timeUpdate(time)\n\n\n        /**\n         * Set the render target to our texture target and clear it\n         */\n        this.setRenderTarget(this.currentTextureRenderTarget);\n        context.renderer.clear();\n\n        /**\n         * Render our scene to the texture target\n         */\n        context.renderer.render(this.view.threejs, this._threeCamera)\n\n        /**\n         * Set the target back to the screen and clear it\n         */\n        context.renderer.setRenderTarget(null);\n        context.renderer.clear();\n\n        /**\n         * Render our post-processing scene, which has a full screen quad, to the screen.\n         */\n        context.renderer.render(this.postProcessingScene.threejs, this.postProcessingCamera.threejs);\n    }\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}