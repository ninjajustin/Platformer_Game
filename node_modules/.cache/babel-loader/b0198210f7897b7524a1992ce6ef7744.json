{"ast":null,"code":"import _initializerDefineProperty from \"/Users/home/Desktop/cs4620-final-project/node_modules/@babel/runtime/helpers/esm/initializerDefineProperty.js\";\nimport _applyDecoratedDescriptor from \"/Users/home/Desktop/cs4620-final-project/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor.js\";\nimport _initializerWarningHelper from \"/Users/home/Desktop/cs4620-final-project/node_modules/@babel/runtime/helpers/esm/initializerWarningHelper.js\";\nvar _class, _descriptor;\nimport { AMaterial } from \"./AMaterial\";\nimport { ATexture } from \"../ATexture\";\nimport { AObjectState } from \"../../base\";\nimport * as THREE from \"three\";\nimport { Color, V2, Vec2, Vec3, Vec4 } from \"../../math\";\nimport { TextureKeyForName, TextureProvidedKeyForName, TextureSizeKeyForName } from \"../../defines\";\nexport let AShaderMaterial = (_class = class AShaderMaterial extends AMaterial {\n  get threejs() {\n    return this._material;\n  }\n  getUniformValue(name) {\n    let uniform = this.uniforms[name];\n    return uniform === null || uniform === void 0 ? void 0 : uniform.value;\n  }\n  setModelColor(v) {\n    this.setUniformColor('modelColor', v);\n  }\n  setValue(name, value) {\n    let vals = {};\n    vals[name] = value;\n    this.setValues(vals);\n  }\n  getModelColor() {\n    let c = this.getUniformValue('modelColor');\n    if (c) {\n      return Color.FromThreeJS(c);\n    } else {\n      return Color.FromString(\"#77bb77\");\n    }\n  }\n  get model() {\n    return this._model;\n  }\n  constructor() {\n    super(...arguments);\n    _initializerDefineProperty(this, \"uniforms\", _descriptor, this);\n    this.textures = {};\n    this.uniforms = {};\n  }\n  setModel(model) {\n    super.setModel(model);\n    this.loadTexturesFromShaderModel(model);\n  }\n  loadTexturesFromShaderModel(model) {\n    let shader = model !== null && model !== void 0 ? model : this.model;\n    for (let t in shader.textures) {\n      this.textures[t] = shader.textures[t];\n    }\n  }\n\n  //##################//--Uniforms--\\\\##################\n  //<editor-fold desc=\"Uniforms\">\n  setUniformsDict(uniforms) {\n    this.uniforms = uniforms;\n  }\n  setUniforms(uniforms) {\n    if (!this.uniforms) {\n      this.uniforms = {};\n    }\n    for (let u in uniforms) {\n      // @ts-ignore\n      this.setUniform(u, uniforms[u].value, uniforms[u].type);\n    }\n  }\n  setTexture(name, texture) {\n    if (texture) {\n      if (texture instanceof ATexture) {\n        this.textures[name] = texture;\n      } else {\n        this.textures[name] = new ATexture(texture);\n      }\n      let tex = this.getTexture(name);\n      this.setUniform(TextureKeyForName(name), tex === null || tex === void 0 ? void 0 : tex.threejs, 't');\n      this.setUniform(TextureProvidedKeyForName(name), !!tex, 'bool');\n      this.setUniform(TextureSizeKeyForName(name), tex ? new Vec2(tex.width, tex.height) : V2());\n    } else if (texture === undefined) {\n      this.textures[name] = texture;\n      this.setUniform(TextureKeyForName(name), null, 't');\n      this.setUniform(TextureProvidedKeyForName(name), false, 'bool');\n      this.setUniform(TextureSizeKeyForName(name), new Vec2(0, 0));\n    }\n  }\n  getTexture(name) {\n    return this.textures[name];\n  }\n  setUniform(name, value, type) {\n    if (value instanceof Vec3) {\n      this.setUniform(name, value.asThreeJS(), 'vec3');\n      return;\n    }\n    if (value instanceof Vec4) {\n      this.setUniform(name, value.asThreeJS(), 'vec4');\n      return;\n    }\n    if (value instanceof Vec2) {\n      this.setUniform(name, new THREE.Vector2(value.x, value.y), 'vec2');\n      return;\n    }\n    if (value instanceof Color) {\n      this.setUniform(name, value.Vec4, 'vec4');\n      return;\n    }\n    // if(Array.isArray(value) && !isNaN(value[0]) && !type){\n    //     type = 'fv';\n    // }\n\n    let uval = {\n      value: value\n    };\n    if (type !== undefined) {\n      uval['type'] = type;\n    }\n    // @ts-ignore\n    this.uniforms[name] = uval;\n    if (this.threejs) {\n      // @ts-ignore\n      this.threejs.uniforms[name] = uval;\n    }\n  }\n  setUniform3fv(name, value) {\n    this.setUniform(name, value.asThreeJS(), 'vec3');\n  }\n  setUniform4fv(name, value) {\n    this.setUniform(name, value.asThreeJS(), 'vec4');\n  }\n  setUniformColor(name, value) {\n    let alpha = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n    if (value instanceof THREE.Color) {\n      this.setUniform(name, value, 'vec4');\n    } else {\n      this.setUniform(name, value.Vec4.asThreeJS(), 'vec4');\n    }\n  }\n  attachUniformToAppState(uniformName, appState, stateName) {\n    let name = stateName !== null && stateName !== void 0 ? stateName : uniformName;\n    const self = this;\n    function setu() {\n      self.setUniform(name, appState.getState(name));\n    }\n    setu();\n    self.subscribe(appState.addStateValueListener(name, () => {\n      setu();\n    }), `${name}_update`);\n  }\n\n  //</editor-fold>\n  //##################\\\\--Uniforms--//##################\n\n  // initMaterial(parameters?:MaterialParameters){\n  //     let params = {uniforms:this.uniforms};\n  //     if(parameters!==undefined){\n  //         params = {...params, ...parameters};\n  //     }\n  //     // this._shaderSource.sourcesLoadedPromise;\n  //     this._material = new THREE.ShaderMaterial({\n  //             vertexShader:this.model.vertexSource,\n  //             fragmentShader:this.model.fragSource,\n  //             transparent: true,\n  //             lights:true,\n  //             ...parameters\n  //         }\n  //     )\n  // }\n\n  // async initMaterialAsync(parameters?:MaterialParameters){\n  //     const self = this;\n  //     this.model.sourcesLoadedPromise.then(()=>{self.initMaterial();});\n  // }\n}, (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"uniforms\", [AObjectState], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n})), _class);","map":{"version":3,"names":["AMaterial","ATexture","AObjectState","THREE","Color","V2","Vec2","Vec3","Vec4","TextureKeyForName","TextureProvidedKeyForName","TextureSizeKeyForName","AShaderMaterial","threejs","_material","getUniformValue","name","uniform","uniforms","value","setModelColor","v","setUniformColor","setValue","vals","setValues","getModelColor","c","FromThreeJS","FromString","model","_model","constructor","textures","setModel","loadTexturesFromShaderModel","shader","t","setUniformsDict","setUniforms","u","setUniform","type","setTexture","texture","tex","getTexture","width","height","undefined","asThreeJS","Vector2","x","y","uval","setUniform3fv","setUniform4fv","alpha","attachUniformToAppState","uniformName","appState","stateName","self","setu","getState","subscribe","addStateValueListener"],"sources":["/Users/home/Desktop/cs4620-final-project/src/anigraph/rendering/material/AShaderMaterial.ts"],"sourcesContent":["import {AMaterial} from \"./AMaterial\";\nimport {ATexture} from \"../ATexture\";\nimport {AAppState, AObjectState, GetAppState} from \"../../base\";\nimport {AShaderModel} from \"./AShaderModel\";\nimport type {ShaderUniformDict} from \"./AShaderModel\";\nimport * as THREE from \"three\";\nimport {Color, V2, Vec2, Vec3, Vec4} from \"../../math\";\nimport {TextureKeyForName, TextureProvidedKeyForName, TextureSizeKeyForName} from \"../../defines\";\n\nexport class AShaderMaterial extends AMaterial{\n    @AObjectState uniforms!:ShaderUniformDict;\n    get threejs():THREE.ShaderMaterial{\n        return this._material as THREE.ShaderMaterial;\n    }\n\n    getUniformValue(name:string) {\n        let uniform = this.uniforms[name];\n        return uniform?.value;\n    }\n\n    setModelColor(v:Color|THREE.Color){\n        this.setUniformColor('modelColor', v);\n    }\n\n    setValue(name:string, value:any){\n        let vals:{[name:string]:any}={};\n        vals[name]=value;\n        this.setValues(vals);\n    }\n\n\n    getModelColor(){\n        let c = this.getUniformValue('modelColor');\n        if(c){\n            return Color.FromThreeJS(c);\n        }else{\n            return Color.FromString(\"#77bb77\");\n        }\n    }\n\n    public textures:{[name:string]:ATexture|undefined}={};\n    get model():AShaderModel{\n        return this._model as AShaderModel;\n    }\n\n    constructor(...args:any[]) {\n        super(...args);\n        this.uniforms = {};\n    }\n\n    setModel(model: AShaderModel) {\n        super.setModel(model);\n        this.loadTexturesFromShaderModel(model);\n    }\n\n\n    loadTexturesFromShaderModel(model?:AShaderModel){\n        let shader = model??this.model;\n        for(let t in shader.textures){\n            this.textures[t]=shader.textures[t];\n        }\n    }\n\n    //##################//--Uniforms--\\\\##################\n    //<editor-fold desc=\"Uniforms\">\n    setUniformsDict(uniforms:ShaderUniformDict){\n        this.uniforms = uniforms;\n    }\n\n    setUniforms(uniforms:ShaderUniformDict){\n        if(!this.uniforms){\n            this.uniforms = {};\n        }\n        for (let u in uniforms){\n            // @ts-ignore\n            this.setUniform(u, uniforms[u].value, uniforms[u].type);\n        }\n    }\n\n    setTexture(name:string, texture?:ATexture|string){\n        if(texture) {\n            if (texture instanceof ATexture) {\n                this.textures[name] = texture;\n            } else {\n                this.textures[name] = new ATexture(texture);\n            }\n            let tex = this.getTexture(name);\n            this.setUniform(TextureKeyForName(name), tex?.threejs, 't');\n            this.setUniform(TextureProvidedKeyForName(name), !!tex, 'bool');\n            this.setUniform(TextureSizeKeyForName(name), tex?new Vec2(tex.width, tex.height):V2());\n        }else if(texture===undefined){\n            this.textures[name] = texture;\n            this.setUniform(TextureKeyForName(name), null, 't');\n            this.setUniform(TextureProvidedKeyForName(name), false, 'bool');\n            this.setUniform(TextureSizeKeyForName(name), new Vec2(0,0));\n        }\n    }\n\n    getTexture(name:string){\n        return this.textures[name];\n    }\n\n    setUniform(name:string, value:any, type?:string) {\n        if(value instanceof Vec3){\n            this.setUniform(name, value.asThreeJS(), 'vec3');\n            return;\n        }\n        if(value instanceof Vec4){\n            this.setUniform(name, value.asThreeJS(), 'vec4');\n            return;\n        }\n        if(value instanceof Vec2){\n            this.setUniform(name, new THREE.Vector2(value.x, value.y), 'vec2');\n            return;\n        }\n\n        if(value instanceof Color){\n            this.setUniform(name, value.Vec4, 'vec4');\n            return;\n        }\n        // if(Array.isArray(value) && !isNaN(value[0]) && !type){\n        //     type = 'fv';\n        // }\n\n        let uval: { [name: string]: any } = {value:value};\n        if (type !== undefined) {\n            uval['type'] = type;\n        }\n        // @ts-ignore\n        this.uniforms[name] = uval;\n        if(this.threejs){\n            // @ts-ignore\n            this.threejs.uniforms[name] = uval;\n        }\n    }\n\n    setUniform3fv(name:string, value:Vec3) {\n        this.setUniform(name, value.asThreeJS(), 'vec3');\n    }\n\n    setUniform4fv(name:string, value:Vec4) {\n        this.setUniform(name, value.asThreeJS(), 'vec4');\n    }\n\n\n\n    setUniformColor(name:string, value:Color|THREE.Color, alpha:number=1){\n        if(value instanceof THREE.Color){\n            this.setUniform(name, value, 'vec4');\n        }else{\n            this.setUniform(name, value.Vec4.asThreeJS(), 'vec4');\n        }\n\n    }\n\n\n    attachUniformToAppState(uniformName:string, appState:AAppState, stateName?:string){\n        let name = stateName??uniformName;\n        const self=this;\n        function setu(){\n            self.setUniform(name, appState.getState(name));\n        }\n        setu();\n        self.subscribe(appState.addStateValueListener(name, ()=>{\n            setu();\n        }), `${name}_update`);\n\n    }\n\n    //</editor-fold>\n    //##################\\\\--Uniforms--//##################\n\n    // initMaterial(parameters?:MaterialParameters){\n    //     let params = {uniforms:this.uniforms};\n    //     if(parameters!==undefined){\n    //         params = {...params, ...parameters};\n    //     }\n    //     // this._shaderSource.sourcesLoadedPromise;\n    //     this._material = new THREE.ShaderMaterial({\n    //             vertexShader:this.model.vertexSource,\n    //             fragmentShader:this.model.fragSource,\n    //             transparent: true,\n    //             lights:true,\n    //             ...parameters\n    //         }\n    //     )\n    // }\n\n    // async initMaterialAsync(parameters?:MaterialParameters){\n    //     const self = this;\n    //     this.model.sourcesLoadedPromise.then(()=>{self.initMaterial();});\n    // }\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}