{"ast":null,"code":"var _dec, _class;\nimport { NodeTransform3D } from \"../../math\";\nimport { VertexArray3D } from \"../../geometry\";\nimport { ANodeModelSubclass } from \"./NodeModelSubclass\";\nimport { ASerializable } from \"../../base\";\nexport let ANodeModel3D = (_dec = ASerializable(\"ANodeModel3D\"), _dec(_class = class ANodeModel3D extends ANodeModelSubclass {\n  constructor(verts, transform) {\n    super(verts, transform);\n    this._setVerts(new VertexArray3D());\n  }\n\n  /**\n   * Bounds are only transformed by the model's current (local) transform\n   * @returns {BoundingBox3D}\n   */\n  getBounds() {\n    return this.getBounds3D();\n  }\n\n  /**\n   * Bounds are only transformed by the model's current (local) transform\n   * @returns {BoundingBox2D}\n   */\n  getBounds2D() {\n    let tpoint = new VertexArray3D();\n    tpoint.position = this.verts.position.GetTransformedByMatrix(this.transform.getMatrix());\n    return tpoint.getBounds().getBoundsXY();\n  }\n\n  /**\n   * Bounds are only transformed by the model's current (local) transform\n   * @returns {BoundingBox3D}\n   */\n  getBounds3D() {\n    let b = this.verts.getBounds();\n    b.transform = this.transform.getMat4();\n    return b;\n  }\n\n  /**\n   * Bounds are only transformed by the model's current (local) transform\n   * @returns {BoundingBox3D}\n   */\n  getBoundsXY() {\n    return this.getBounds3D().getBoundsXY();\n  }\n  setTransform(transform) {\n    if (transform instanceof NodeTransform3D) {\n      this._transform = transform;\n    } else {\n      this._transform = NodeTransform3D.FromPoseMatrix(transform.getMat4());\n    }\n  }\n}) || _class);","map":{"version":3,"names":["NodeTransform3D","VertexArray3D","ANodeModelSubclass","ASerializable","ANodeModel3D","constructor","verts","transform","_setVerts","getBounds","getBounds3D","getBounds2D","tpoint","position","GetTransformedByMatrix","getMatrix","getBoundsXY","b","getMat4","setTransform","_transform","FromPoseMatrix"],"sources":["/Users/home/Desktop/cs4620-final-project/src/anigraph/scene/nodeModel/ANodeModel3D.ts"],"sourcesContent":["import {Mat4, NodeTransform3D, TransformationInterface} from \"../../math\";\nimport {VertexArray3D, BoundingBox2D, BoundingBox3D, HasBounds} from \"../../geometry\";\nimport {ANodeModelSubclass} from \"./NodeModelSubclass\";\nimport {ASerializable} from \"../../base\";\n\n@ASerializable(\"ANodeModel3D\")\nexport class ANodeModel3D extends ANodeModelSubclass<NodeTransform3D, VertexArray3D> implements HasBounds {\n    constructor(verts?:VertexArray3D, transform?:NodeTransform3D, ...args:any) {\n        super(verts, transform);\n        this._setVerts(new VertexArray3D());\n    }\n\n    /**\n     * Bounds are only transformed by the model's current (local) transform\n     * @returns {BoundingBox3D}\n     */\n    getBounds(): BoundingBox3D {\n        return this.getBounds3D();\n    }\n\n    /**\n     * Bounds are only transformed by the model's current (local) transform\n     * @returns {BoundingBox2D}\n     */\n    getBounds2D(): BoundingBox2D {\n        let tpoint = new VertexArray3D()\n        tpoint.position = this.verts.position.GetTransformedByMatrix(this.transform.getMatrix());\n        return tpoint.getBounds().getBoundsXY();\n    }\n\n    /**\n     * Bounds are only transformed by the model's current (local) transform\n     * @returns {BoundingBox3D}\n     */\n    getBounds3D(): BoundingBox3D {\n        let b = this.verts.getBounds();\n        b.transform = this.transform.getMat4();\n        return b;\n    }\n\n    /**\n     * Bounds are only transformed by the model's current (local) transform\n     * @returns {BoundingBox3D}\n     */\n    getBoundsXY(): BoundingBox2D {\n        return this.getBounds3D().getBoundsXY();\n    }\n\n    setTransform(transform: TransformationInterface): void {\n        if(transform instanceof NodeTransform3D){\n            this._transform = transform;\n        }else {\n            this._transform = NodeTransform3D.FromPoseMatrix(transform.getMat4())\n        }\n    }\n\n}\n\n\n\n"],"mappings":";AAAA,SAAcA,eAAe,QAAgC,YAAY;AACzE,SAAQC,aAAa,QAAgD,gBAAgB;AACrF,SAAQC,kBAAkB,QAAO,qBAAqB;AACtD,SAAQC,aAAa,QAAO,YAAY;AAExC,WACaC,YAAY,WADxBD,aAAa,CAAC,cAAc,CAAC,gBAA9B,MACaC,YAAY,SAASF,kBAAkB,CAAsD;EACtGG,WAAW,CAACC,KAAoB,EAAEC,SAA0B,EAAe;IACvE,KAAK,CAACD,KAAK,EAAEC,SAAS,CAAC;IACvB,IAAI,CAACC,SAAS,CAAC,IAAIP,aAAa,EAAE,CAAC;EACvC;;EAEA;AACJ;AACA;AACA;EACIQ,SAAS,GAAkB;IACvB,OAAO,IAAI,CAACC,WAAW,EAAE;EAC7B;;EAEA;AACJ;AACA;AACA;EACIC,WAAW,GAAkB;IACzB,IAAIC,MAAM,GAAG,IAAIX,aAAa,EAAE;IAChCW,MAAM,CAACC,QAAQ,GAAG,IAAI,CAACP,KAAK,CAACO,QAAQ,CAACC,sBAAsB,CAAC,IAAI,CAACP,SAAS,CAACQ,SAAS,EAAE,CAAC;IACxF,OAAOH,MAAM,CAACH,SAAS,EAAE,CAACO,WAAW,EAAE;EAC3C;;EAEA;AACJ;AACA;AACA;EACIN,WAAW,GAAkB;IACzB,IAAIO,CAAC,GAAG,IAAI,CAACX,KAAK,CAACG,SAAS,EAAE;IAC9BQ,CAAC,CAACV,SAAS,GAAG,IAAI,CAACA,SAAS,CAACW,OAAO,EAAE;IACtC,OAAOD,CAAC;EACZ;;EAEA;AACJ;AACA;AACA;EACID,WAAW,GAAkB;IACzB,OAAO,IAAI,CAACN,WAAW,EAAE,CAACM,WAAW,EAAE;EAC3C;EAEAG,YAAY,CAACZ,SAAkC,EAAQ;IACnD,IAAGA,SAAS,YAAYP,eAAe,EAAC;MACpC,IAAI,CAACoB,UAAU,GAAGb,SAAS;IAC/B,CAAC,MAAK;MACF,IAAI,CAACa,UAAU,GAAGpB,eAAe,CAACqB,cAAc,CAACd,SAAS,CAACW,OAAO,EAAE,CAAC;IACzE;EACJ;AAEJ,CAAC"},"metadata":{},"sourceType":"module"}