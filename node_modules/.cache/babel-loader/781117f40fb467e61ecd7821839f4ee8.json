{"ast":null,"code":"import * as THREE from \"three\";\nimport { AInstancedGraphicBase } from \"./AInstancedGraphicBase\";\nimport { Color } from \"../../math\";\nimport { VertexArray3D } from \"../../geometry\";\nimport { AMaterial } from \"../material\";\nexport class AInstancedGraphic extends AInstancedGraphicBase {\n  get threejs() {\n    return this.mesh;\n  }\n  constructor() {\n    super();\n    this._mesh = void 0;\n    this._geometry = void 0;\n    this._material = void 0;\n  }\n  setMaterial(material) {\n    if (this._material !== undefined) {\n      this._material.dispose();\n    }\n    this._material = material;\n  }\n  setNeedsUpdate() {\n    this.threejs.instanceMatrix.needsUpdate = true;\n    if (this.threejs.instanceColor) {\n      this.threejs.instanceColor.needsUpdate = true;\n    }\n  }\n  setVerts(verts) {\n    if (this._geometry) {\n      this._geometry.dispose();\n    }\n    if (verts === undefined) {\n      this._setGeometryPlane();\n    } else if (verts instanceof VertexArray3D) {\n      this._geometry = new THREE.BufferGeometry();\n      this._geometry.setIndex(verts.indices.elements);\n      for (let attribute in verts.attributes) {\n        this._geometry.setAttribute(attribute, verts.getAttributeArray(attribute).BufferAttribute());\n      }\n    }\n    if (this._mesh) {\n      this._mesh.geometry = this._geometry;\n    }\n  }\n  _setGeometryPlane() {\n    let geometry = VertexArray3D.SquareXYUV(1);\n    this._geometry = new THREE.BufferGeometry();\n    this._geometry.setIndex(geometry.indices.elements);\n    for (let attribute in geometry.attributes) {\n      this._geometry.setAttribute(attribute, geometry.getAttributeArray(attribute).BufferAttribute());\n    }\n  }\n  init(nInstances, material, verts) {\n    // nParticles = nParticles!==undefined?nParticles:AParticleEnums.DEFAULT_MAX_N_PARTICLES;\n    if (verts) {\n      this.setVerts(verts);\n    } else {\n      this._setGeometryPlane();\n    }\n    let mat = material;\n    if (mat instanceof AMaterial) {\n      mat = mat.threejs;\n    }\n    if (mat) {\n      this.setMaterial(mat);\n    } else {\n      throw new Error(\"No instanced graphic material provided!\");\n    }\n    if (this._geometry && this._material) {\n      this._mesh = new THREE.InstancedMesh(this._geometry, this._material, nInstances);\n      // this.threejs.matrixAutoUpdate=false;\n      this.mesh.instanceMatrix.setUsage(THREE.DynamicDrawUsage);\n      this.setColorAt(0, Color.FromString(\"#00ff00\"));\n      // @ts-ignore\n      this.mesh.instanceColor.setUsage(THREE.DynamicDrawUsage);\n    }\n  }\n}","map":{"version":3,"names":["THREE","AInstancedGraphicBase","Color","VertexArray3D","AMaterial","AInstancedGraphic","threejs","mesh","constructor","_mesh","_geometry","_material","setMaterial","material","undefined","dispose","setNeedsUpdate","instanceMatrix","needsUpdate","instanceColor","setVerts","verts","_setGeometryPlane","BufferGeometry","setIndex","indices","elements","attribute","attributes","setAttribute","getAttributeArray","BufferAttribute","geometry","SquareXYUV","init","nInstances","mat","Error","InstancedMesh","setUsage","DynamicDrawUsage","setColorAt","FromString"],"sources":["/Users/home/Desktop/cs4620-final-project/src/anigraph/rendering/graphicelements/AInstancedGraphic.ts"],"sourcesContent":["import * as THREE from \"three\";\nimport {AInstancedGraphicBase} from \"./AInstancedGraphicBase\";\nimport {Color, Mat4} from \"../../math\";\nimport {VertexArray2D, VertexArray3D} from \"../../geometry\";\nimport {AParticle} from \"../../math/particles/AParticle\";\nimport {AParticleEnums} from \"../../math/particles/AParticleEnums\";\nimport {AParticle3D} from \"../../physics/AParticle3D\";\nimport {AMaterial} from \"../material\";\n\nexport abstract class AInstancedGraphic extends AInstancedGraphicBase{\n    protected _mesh!:THREE.InstancedMesh\n    protected _geometry!:THREE.BufferGeometry;\n    protected _material!:THREE.Material;\n\n    get threejs(){\n        return this.mesh;\n    }\n\n    constructor() {\n        super();\n    }\n\n\n    setMaterial(material:THREE.Material){\n        if(this._material !== undefined){\n            this._material.dispose();\n        }\n        this._material = material;\n    }\n\n\n    setNeedsUpdate(){\n        this.threejs.instanceMatrix.needsUpdate=true;\n        if(this.threejs.instanceColor) {\n            this.threejs.instanceColor.needsUpdate = true;\n        }\n\n    }\n\n    setVerts(verts:VertexArray3D|number[]){\n        if(this._geometry){\n            this._geometry.dispose();\n        }\n        if(verts === undefined){\n            this._setGeometryPlane();\n        }else if(verts instanceof VertexArray3D){\n            this._geometry = new THREE.BufferGeometry();\n            this._geometry.setIndex(verts.indices.elements);\n            for (let attribute in verts.attributes) {\n                this._geometry.setAttribute(attribute, verts.getAttributeArray(attribute).BufferAttribute());\n            }\n        }\n        if(this._mesh){\n            this._mesh.geometry = this._geometry;\n        }\n    }\n\n    _setGeometryPlane(){\n        let geometry = VertexArray3D.SquareXYUV(1);\n        this._geometry = new THREE.BufferGeometry();\n        this._geometry.setIndex(geometry.indices.elements);\n        for(let attribute in geometry.attributes){\n            this._geometry.setAttribute(attribute, geometry.getAttributeArray(attribute).BufferAttribute());\n        }\n    }\n\n    init(nInstances:number, material?:THREE.Material|AMaterial, verts?:VertexArray3D|number[], ...args:any[]){\n        // nParticles = nParticles!==undefined?nParticles:AParticleEnums.DEFAULT_MAX_N_PARTICLES;\n        if(verts){\n            this.setVerts(verts);\n        }else{\n            this._setGeometryPlane();\n        }\n        let mat = material;\n        if(mat instanceof AMaterial){\n            mat = mat.threejs;\n        }\n        if(mat){\n            this.setMaterial(mat);\n        }else {\n            throw new Error(\"No instanced graphic material provided!\");\n        }\n        if(this._geometry && this._material){\n            this._mesh = new THREE.InstancedMesh(this._geometry, this._material, nInstances);\n            // this.threejs.matrixAutoUpdate=false;\n            this.mesh.instanceMatrix.setUsage( THREE.DynamicDrawUsage );\n            this.setColorAt(0, Color.FromString(\"#00ff00\"));\n            // @ts-ignore\n            this.mesh.instanceColor.setUsage(THREE.DynamicDrawUsage );\n        }\n    }\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}