{"ast":null,"code":"import { AInstancedGraphic, AMaterial } from \"../../../index\";\nimport * as THREE from \"three\";\nexport class AInstancedParticleSystemGraphic extends AInstancedGraphic {\n  constructor() {\n    super(...arguments);\n    this._mesh = void 0;\n    this._geometry = void 0;\n    this._material = void 0;\n  }\n  get threejs() {\n    return this.mesh;\n  }\n\n  // get particleTexture(){return \"images/gradientParticle.jpg\"}\n  get particleTexture() {\n    return \"images/particleFlare.jpg\";\n  }\n  static Create() {\n    let nParticles = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 100;\n    let material = arguments.length > 1 ? arguments[1] : undefined;\n    let psystem = new this();\n    psystem.init(nParticles, material);\n    return psystem;\n  }\n  init(nParticles, material, geometry) {\n    let mat = material;\n    if (mat instanceof AMaterial) {\n      mat = mat.threejs;\n    } else if (mat === undefined) {\n      mat = new THREE.MeshBasicMaterial({\n        depthWrite: false,\n        transparent: true,\n        // alphaTest:0.2,\n        alphaMap: new THREE.TextureLoader().load(this.particleTexture)\n        // alphaMap: new THREE.Texture(particleTex)\n      });\n    }\n    for (var _len = arguments.length, args = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {\n      args[_key - 3] = arguments[_key];\n    }\n    super.init(nParticles !== null && nParticles !== void 0 ? nParticles : AInstancedParticleSystemGraphic.MAX_PARTICLES, mat, geometry, ...args);\n  }\n}\nAInstancedParticleSystemGraphic.MAX_PARTICLES = 300;","map":{"version":3,"names":["AInstancedGraphic","AMaterial","THREE","AInstancedParticleSystemGraphic","_mesh","_geometry","_material","threejs","mesh","particleTexture","Create","nParticles","material","psystem","init","geometry","mat","undefined","MeshBasicMaterial","depthWrite","transparent","alphaMap","TextureLoader","load","args","MAX_PARTICLES"],"sources":["/Users/home/Desktop/cs4620-final-project/src/anigraph/effects/particles/InstancedParticles/AInstancedParticleSystemGraphic.ts"],"sourcesContent":["import {\n    AInstancedGraphic,\n    AMaterial,\n    VertexArray3D\n} from \"../../../index\";\nimport {Particle3D} from \"../../../physics/AParticle3D\";\nimport * as THREE from \"three\";\n\n\n\nexport class AInstancedParticleSystemGraphic<P extends Particle3D> extends AInstancedGraphic {\n    static MAX_PARTICLES:number=300;\n    protected _mesh!:THREE.InstancedMesh\n    protected _geometry!:THREE.BufferGeometry;\n    protected _material!:THREE.Material;\n\n    get threejs(){\n        return this.mesh;\n    }\n\n    // get particleTexture(){return \"images/gradientParticle.jpg\"}\n    get particleTexture(){return \"images/particleFlare.jpg\"}\n\n    static Create(nParticles:number=100, material?:AMaterial|THREE.Material, ...args:any[]){\n        let psystem = new this();\n        psystem.init(nParticles, material)\n        return psystem;\n    }\n\n\n    init(nParticles?:number, material?:AMaterial|THREE.Material, geometry?:VertexArray3D, ...args:any[]){\n        let mat = material;\n        if(mat instanceof AMaterial){\n            mat = mat.threejs;\n        }else if(mat === undefined){\n            mat = new THREE.MeshBasicMaterial({\n                depthWrite: false,\n                transparent:true,\n                // alphaTest:0.2,\n                alphaMap: new THREE.TextureLoader().load(this.particleTexture),\n                // alphaMap: new THREE.Texture(particleTex)\n            })\n        }\n        super.init(nParticles??AInstancedParticleSystemGraphic.MAX_PARTICLES, mat, geometry, ...args);\n    }\n\n\n}\n"],"mappings":"AAAA,SACIA,iBAAiB,EACjBC,SAAS,QAEN,gBAAgB;AAEvB,OAAO,KAAKC,KAAK,MAAM,OAAO;AAI9B,OAAO,MAAMC,+BAA+B,SAA+BH,iBAAiB,CAAC;EAAA;IAAA;IAAA,KAE/EI,KAAK;IAAA,KACLC,SAAS;IAAA,KACTC,SAAS;EAAA;EAEnB,IAAIC,OAAO,GAAE;IACT,OAAO,IAAI,CAACC,IAAI;EACpB;;EAEA;EACA,IAAIC,eAAe,GAAE;IAAC,OAAO,0BAA0B;EAAA;EAEvD,OAAOC,MAAM,GAA0E;IAAA,IAAzEC,UAAiB,uEAAC,GAAG;IAAA,IAAEC,QAAkC;IACnE,IAAIC,OAAO,GAAG,IAAI,IAAI,EAAE;IACxBA,OAAO,CAACC,IAAI,CAACH,UAAU,EAAEC,QAAQ,CAAC;IAClC,OAAOC,OAAO;EAClB;EAGAC,IAAI,CAACH,UAAkB,EAAEC,QAAkC,EAAEG,QAAuB,EAAgB;IAChG,IAAIC,GAAG,GAAGJ,QAAQ;IAClB,IAAGI,GAAG,YAAYf,SAAS,EAAC;MACxBe,GAAG,GAAGA,GAAG,CAACT,OAAO;IACrB,CAAC,MAAK,IAAGS,GAAG,KAAKC,SAAS,EAAC;MACvBD,GAAG,GAAG,IAAId,KAAK,CAACgB,iBAAiB,CAAC;QAC9BC,UAAU,EAAE,KAAK;QACjBC,WAAW,EAAC,IAAI;QAChB;QACAC,QAAQ,EAAE,IAAInB,KAAK,CAACoB,aAAa,EAAE,CAACC,IAAI,CAAC,IAAI,CAACd,eAAe;QAC7D;MACJ,CAAC,CAAC;IACN;IAAC,kCAZoFe,IAAI;MAAJA,IAAI;IAAA;IAazF,KAAK,CAACV,IAAI,CAACH,UAAU,aAAVA,UAAU,cAAVA,UAAU,GAAER,+BAA+B,CAACsB,aAAa,EAAET,GAAG,EAAED,QAAQ,EAAE,GAAGS,IAAI,CAAC;EACjG;AAGJ;AArCarB,+BAA+B,CACjCsB,aAAa,GAAQ,GAAG"},"metadata":{},"sourceType":"module"}