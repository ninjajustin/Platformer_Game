{"ast":null,"code":"var _dec, _class;\nimport { Matrix } from \"../Matrix\";\nimport { Vec3 } from \"./Vec3\";\nimport { Vec2 } from \"./Vec2\";\nimport { Mat4, Quaternion } from \"../3D\";\nimport assert from \"assert\";\nimport { Random } from \"../../Random\";\nimport { ASerializable } from \"../../../base\";\nexport let Mat3 = (_dec = ASerializable(\"Mat3\"), _dec(_class = class Mat3 extends Matrix {\n  constructor() {\n    // common logic constructor\n    super(...arguments);\n  }\n\n  /***\n   * Returns the element of the matrix in the position [row, col]\n   */\n  getElement(row, col) {\n    return this.elements[3 * row + col];\n  }\n\n  /***\n   * Sets this matrix to be the identity matrix.\n   */\n  setToIdentity() {\n    this.elements = [1, 0, 0, 0, 1, 0, 0, 0, 1];\n  }\n\n  /**\n   * For function `mxy()`, gets or sets the element of the matrix at the\n   * position [x, y]\n   */\n  set m00(value) {\n    this.elements[0] = value;\n  }\n  get m00() {\n    return this.elements[0];\n  }\n  set m01(value) {\n    this.elements[1] = value;\n  }\n  get m01() {\n    return this.elements[1];\n  }\n  set m02(value) {\n    this.elements[2] = value;\n  }\n  get m02() {\n    return this.elements[2];\n  }\n  set m10(value) {\n    this.elements[3] = value;\n  }\n  get m10() {\n    return this.elements[3];\n  }\n  set m11(value) {\n    this.elements[4] = value;\n  }\n  get m11() {\n    return this.elements[4];\n  }\n  set m12(value) {\n    this.elements[5] = value;\n  }\n  get m12() {\n    return this.elements[5];\n  }\n  set m20(value) {\n    this.elements[6] = value;\n  }\n  get m20() {\n    return this.elements[6];\n  }\n  set m21(value) {\n    this.elements[7] = value;\n  }\n  get m21() {\n    return this.elements[7];\n  }\n  set m22(value) {\n    this.elements[8] = value;\n  }\n  get m22() {\n    return this.elements[8];\n  }\n\n  /**\n   * For function `cx()`, gets or sets the `x`th column of the matrix.\n   */\n  set c0(value) {\n    this.m00 = value.x;\n    this.m10 = value.y;\n    this.m20 = value.z;\n  }\n  get c0() {\n    return new Vec3(this.m00, this.m10, this.m20);\n  }\n  set c1(value) {\n    this.m01 = value.x;\n    this.m11 = value.y;\n    this.m21 = value.z;\n  }\n  get c1() {\n    return new Vec3(this.m01, this.m11, this.m21);\n  }\n  set c2(value) {\n    this.m02 = value.x;\n    this.m12 = value.y;\n    this.m22 = value.z;\n  }\n  get c2() {\n    return new Vec3(this.m02, this.m12, this.m22);\n  }\n\n  /**\n   * For function `ry()`, gets or sets the `y`th row of the matrix.\n   */\n  set r0(value) {\n    this.m00 = value.x;\n    this.m01 = value.y;\n    this.m02 = value.z;\n  }\n  get r0() {\n    return new Vec3(this.m00, this.m01, this.m02);\n  }\n  set r1(value) {\n    this.m10 = value.x;\n    this.m11 = value.y;\n    this.m12 = value.z;\n  }\n  get r1() {\n    return new Vec3(this.m10, this.m11, this.m12);\n  }\n  set r2(value) {\n    this.m20 = value.x;\n    this.m21 = value.y;\n    this.m22 = value.z;\n  }\n  get r2() {\n    return new Vec3(this.m20, this.m21, this.m22);\n  }\n\n  /**\n   * Returns this matrix made up of the columns `c0`, `c1`, `c2`.\n   *\n   * @param c0 The first column\n   * @param c1 The second column\n   * @param c2 The third column\n   * @returns this matrix with the specified columns\n   */\n  static FromColumns(c0, c1, c2) {\n    var r = new this();\n    r.c0 = c0;\n    r.c1 = c1;\n    r.c2 = c2;\n    return r;\n  }\n  /**\n   * Returns this matrix made up of the rows `r0`, `r1`, `r2`.\n   *\n   * @param c0 The first row\n   * @param c1 The second row\n   * @param c2 The third row\n   * @returns this matrix with the specified rows\n   */\n  static FromRows(r0, r1, r2) {\n    var r = new this();\n    r.r0 = r0;\n    r.r1 = r1;\n    r.r2 = r2;\n    return r;\n  }\n\n  //##################//--TransformationMatrices--\\\\##################\n  //<editor-fold desc=\"TransformationMatrices\">\n\n  /**\n   * Returns a new identity matrix.\n   *\n   * @returns a new identity matrix\n   */\n  static Identity() {\n    return new Mat3(1, 0, 0, 0, 1, 0, 0, 0, 1);\n  }\n\n  //##################//--fill matrices--\\\\##################\n  //<editor-fold desc=\"fill matrices\">\n\n  /**\n   * Returns a matrix with random floats for each element\n   *\n   * @returns a matrix with random elements\n   */\n  static Random() {\n    var r = new this(Random.floatArray(9));\n    return r;\n  }\n\n  /**\n   * Returns a matrix with all zeros\n   *\n   * @returns a matrix with all zeros\n   */\n  static Zeros() {\n    let z = new Array(9);\n    for (let i = 0; i < 9; ++i) z[i] = 0;\n    var r = new this(z);\n    return r;\n  }\n\n  /**\n   * Returns a matrix with all ones\n   *\n   * @returns a matrix with all ones\n   */\n  static Ones() {\n    let z = new Array(9);\n    for (let i = 0; i < 9; ++i) z[i] = 1;\n    var r = new this(z);\n    return r;\n  }\n  //</editor-fold>\n  //##################\\\\--fill matrices--//##################\n\n  getTranspose() {\n    let transpose = new Mat3();\n    transpose.c0 = this.r0;\n    transpose.c1 = this.r1;\n    transpose.c2 = this.r2;\n    return transpose;\n  }\n\n  //##################//--Determinant and Inverse--\\\\##################\n  //<editor-fold desc=\"Determinant and Inverse\">\n\n  /**\n   * Calculate inverse... I just used Two.js's method here.\n   * @returns {null|Matrix3x3}\n   */\n  getInverse() {\n    var a = this.elements;\n    var out = new Mat3();\n    var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n    var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n    var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n    var b01 = a22 * a11 - a12 * a21;\n    var b11 = -a22 * a10 + a12 * a20;\n    var b21 = a21 * a10 - a11 * a20;\n\n    // Calculate the determinant\n    var det = a00 * b01 + a01 * b11 + a02 * b21;\n    if (!det) {\n      // console.warn(\"Matrix had determinant 0!\");\n      throw new Error(\"Matrix had determinant 0! Inverse undefined!\");\n      // return null;\n    }\n\n    det = 1.0 / det;\n    out.elements[0] = b01 * det;\n    out.elements[1] = (-a22 * a01 + a02 * a21) * det;\n    out.elements[2] = (a12 * a01 - a02 * a11) * det;\n    out.elements[3] = b11 * det;\n    out.elements[4] = (a22 * a00 - a02 * a20) * det;\n    out.elements[5] = (-a12 * a00 + a02 * a10) * det;\n    out.elements[6] = b21 * det;\n    out.elements[7] = (-a21 * a00 + a01 * a20) * det;\n    out.elements[8] = (a11 * a00 - a01 * a10) * det;\n    return out;\n  }\n\n  /**\n   * Returns the determinant for this matrix.\n   *\n   * @returns the determinant\n   */\n  determinant() {\n    var b01 = this.m22 * this.m11 - this.m12 * this.m21;\n    var b11 = -this.m22 * this.m10 + this.m12 * this.m20;\n    var b21 = this.m21 * this.m10 - this.m11 * this.m20;\n    return this.m00 * b01 + this.m01 * b11 + this.m02 * b21;\n  }\n\n  //</editor-fold>\n  //##################\\\\--Determinant and Inverse--//##################\n\n  times(other) {\n    if (other instanceof Mat3) {\n      return this._timesMatrix(other);\n    } else if (other instanceof Vec2 || other instanceof Vec3) {\n      return this._timesVector(other);\n    } else if (typeof other === \"number\") {\n      let cfunc = this.constructor;\n      var m = new cfunc();\n      for (let i = 0; i < m.elements.length; i++) {\n        m.elements[i] = this.elements[i] * other;\n      }\n      return m;\n    }\n    throw new Error(\"Tried to do Matrix.times(other) with other not a matrix, vector, or scalar...\");\n  }\n\n  /**\n   * if it's a Vec3 we do regular matrix vector multiplication. If it's a Vec2, we treat it as a point and add a\n   * homogeneous value of 1, then do the multiplication, then homogenize and drop the homogeneous coordinate to return\n   * a new Vec2.\n   * @param v\n   * @returns {Vec3 | Vec2}\n   * @private\n   */\n  _timesVector(v) {\n    if (v instanceof Vec3) {\n      return new Vec3(v.elements[0] * this.elements[0] + v.elements[1] * this.elements[1] + v.elements[2] * this.elements[2], v.elements[0] * this.elements[3] + v.elements[1] * this.elements[4] + v.elements[2] * this.elements[5], v.elements[0] * this.elements[6] + v.elements[1] * this.elements[7] + v.elements[2] * this.elements[8]);\n    } else {\n      let v3out = new Vec3(v.elements[0] * this.elements[0] + v.elements[1] * this.elements[1] + this.elements[2], v.elements[0] * this.elements[3] + v.elements[1] * this.elements[4] + this.elements[5], v.elements[0] * this.elements[6] + v.elements[1] * this.elements[7] + this.elements[8]);\n      return v3out.Point2D;\n    }\n  }\n  _timesMatrix(m) {\n    let cfunc = this.constructor;\n    return new cfunc([this.elements[0] * m.elements[0] + this.elements[1] * m.elements[3] + this.elements[2] * m.elements[6], this.elements[0] * m.elements[1] + this.elements[1] * m.elements[4] + this.elements[2] * m.elements[7], this.elements[0] * m.elements[2] + this.elements[1] * m.elements[5] + this.elements[2] * m.elements[8], this.elements[3] * m.elements[0] + this.elements[4] * m.elements[3] + this.elements[5] * m.elements[6], this.elements[3] * m.elements[1] + this.elements[4] * m.elements[4] + this.elements[5] * m.elements[7], this.elements[3] * m.elements[2] + this.elements[4] * m.elements[5] + this.elements[5] * m.elements[8], this.elements[6] * m.elements[0] + this.elements[7] * m.elements[3] + this.elements[8] * m.elements[6], this.elements[6] * m.elements[1] + this.elements[7] * m.elements[4] + this.elements[8] * m.elements[7], this.elements[6] * m.elements[2] + this.elements[7] * m.elements[5] + this.elements[8] * m.elements[8]]);\n  }\n  toJSON() {\n    var rval = {};\n    for (let k in this) {\n      // @ts-ignore\n      rval[k] = this[k];\n    }\n    return rval;\n  }\n  asPrettyString() {\n    let precision = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 4;\n    return `Mat3 in Row Major Form:\\n\n        ${this.elements[0].toPrecision(precision)}, ${this.elements[1].toPrecision(precision)}, ${this.elements[2].toPrecision(precision)}\\n\n        ${this.elements[3].toPrecision(precision)}, ${this.elements[4].toPrecision(precision)}, ${this.elements[5].toPrecision(precision)}\\n\n        ${this.elements[6].toPrecision(precision)}, ${this.elements[7].toPrecision(precision)}, ${this.elements[8].toPrecision(precision)}\\n\n        `;\n  }\n  Mat4From2DH() {\n    return Mat4.From2DMat3(this);\n  }\n  assignTo(threejsMat) {\n    console.error(\"Should not be using Mat3.assignTo! Ambiguous whether linear or homogeneous!\");\n    this.Mat4Linear().assignTo(threejsMat);\n  }\n  Mat4Linear() {\n    return Mat4.FromMat3Linear(this);\n  }\n  logTable() {\n    console.table({\n      'row0': this.r0,\n      'row1': this.r1,\n      'row2': this.r2\n    });\n  }\n\n  /**\n   * Returns the corresponding 3D scale transformation matrix given the scaling\n   * factor.\n   *\n   * If factor is a number, then uses the factor for scaling in the x and y\n   * direction.\n   * If factor is an array of length three, then uses the factor[0] as the x\n   * direction, factor[1] as the y direction, and factor[2] as the z-direction.\n   * If factor is a `Vec3`, then uses the factor[0] as the x-direction,\n   * factor[1] as the y-direction, and factor[2] as the z-direction.\n   *\n   * @param factor the scaling factor\n   */\n\n  static Scale3D() {\n    function scalematfromarray(a) {\n      let rmat = new Mat3();\n      if (a.length > 0) {\n        rmat.elements[0] = a[0];\n        if (a.length > 1) {\n          rmat.elements[4] = a[1];\n          if (a.length > 2) {\n            assert(a.length === 3, \"Scale arguments too long\");\n            rmat.elements[8] = a[2];\n          }\n        }\n      }\n      return rmat;\n    }\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    assert(args.length > 0, \"Cannot call Mat3.Scale() with no arguments\");\n    if (typeof args[0] === \"number\") {\n      let rmat = new Mat3();\n      rmat.m00 = args[0];\n      rmat.m11 = args[0];\n      rmat.m22 = args[0];\n      return rmat;\n    } else if (Array.isArray(args[0])) {\n      return scalematfromarray(args[0]);\n    } else if (args[0] instanceof Vec3) {\n      return scalematfromarray(args[0].elements);\n    } else {\n      return scalematfromarray(args);\n    }\n  }\n\n  /**\n   * Returns the corresponding 2D scale transformation matrix for the given\n   * scaling factor.\n   *\n   * If `factor` is a `number`, then uses the factor for scaling in the x and\n   * y directions.\n   * If `factor` is an `array` of length two, then uses the factor[0] as the x\n   * direction and factor[1] as the y-direction.\n   * If `factor` is a `Vec2`, then uses the factor[0] as the x-direction and\n   * factor[1] as the y-direction.\n   *\n   * @param factor the scaling factor\n   */\n\n  static Scale2D() {\n    function scalematfromarray(a) {\n      let rmat = new Mat3();\n      if (a.length > 0) {\n        rmat.elements[0] = a[0];\n        if (a.length > 1) {\n          assert(a.length === 2, \"Scale2D arguments too long\");\n          rmat.elements[4] = a[1];\n        }\n      }\n      return rmat;\n    }\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n    assert(args.length > 0, \"Cannot call Mat3.Scale2D() with no arguments\");\n    if (typeof args[0] === \"number\") {\n      let rmat = new Mat3();\n      rmat.m00 = args[0];\n      rmat.m11 = args[0];\n      return rmat;\n    } else if (Array.isArray(args[0])) {\n      return scalematfromarray(args[0]);\n    } else if (args[0] instanceof Vec2) {\n      return scalematfromarray(args[0].elements);\n    } else {\n      return scalematfromarray(args);\n    }\n  }\n\n  /**\n   * Returns the corresponding 2D translation transformation matrix for the\n   * given translation `t` or `x` and `y`.\n   *\n   * If the argument is `x` and `y`, then it translates in the x-direction `x`\n   * amount and in the y-direction `y` amount.\n   * If `t` is an `array` of length two, then uses the t[0] as the x-direction\n   * and t[1] as the y-direction.\n   * If `t` is a `Vec2`, then uses the t[0] as the x-direction and t[1] as the\n   * y-direction.\n   *\n   * @param t the translation factor\n   */\n\n  static Translation2D() {\n    function tmatfromarray(a) {\n      let rmat = new Mat3();\n      rmat.m02 = a[0];\n      rmat.m12 = a[1];\n      return rmat;\n    }\n    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n    assert(args.length > 0, \"Cannot call Mat3.Translation2D() with no arguments\");\n    if (Array.isArray(args[0])) {\n      return tmatfromarray(args[0]);\n    } else if (args[0] instanceof Vec2) {\n      return tmatfromarray(args[0].elements);\n    } else {\n      assert(args.length === 2, \"wrong number of args for Mat3.Translation2D\");\n      return tmatfromarray(args);\n    }\n  }\n\n  /**\n   * Returns the corresponding rotation transformation matrix for the given\n   * `radians`.\n   *\n   * @param radians the rotation amount in radians\n   * @returns the rotation transformation matrix\n   */\n  static Rotation(radians) {\n    var c = Math.cos(radians);\n    var s = Math.sin(radians);\n    return new Mat3(c, -s, 0, s, c, 0, 0, 0, 1);\n  }\n  _getQuaternionRotation() {\n    return Quaternion.FromMatrix(this);\n  }\n  _setQuaternionRotation(q) {\n    this.elements = q.Mat3().elements;\n  }\n  getMat4() {\n    throw new Error(\"Unspecified whether to convert Mat3 to Mat4 as 2D homogeneous or 3D Linear!\");\n  }\n  getPosition() {\n    return Vec3.FromVec2(this.c2.Point2D);\n  }\n  setPosition(position) {\n    let p = position.Point2D;\n    this.m02 = p.x;\n    this.m12 = p.y;\n  }\n  //</editor-fold>\n  //##################\\\\--TransformationMatrices--//##################\n}) || _class);","map":{"version":3,"names":["Matrix","Vec3","Vec2","Mat4","Quaternion","assert","Random","ASerializable","Mat3","constructor","getElement","row","col","elements","setToIdentity","m00","value","m01","m02","m10","m11","m12","m20","m21","m22","c0","x","y","z","c1","c2","r0","r1","r2","FromColumns","r","FromRows","Identity","floatArray","Zeros","Array","i","Ones","getTranspose","transpose","getInverse","a","out","a00","a01","a02","a10","a11","a12","a20","a21","a22","b01","b11","b21","det","Error","determinant","times","other","_timesMatrix","_timesVector","cfunc","m","length","v","v3out","Point2D","toJSON","rval","k","asPrettyString","precision","toPrecision","Mat4From2DH","From2DMat3","assignTo","threejsMat","console","error","Mat4Linear","FromMat3Linear","logTable","table","Scale3D","scalematfromarray","rmat","args","isArray","Scale2D","Translation2D","tmatfromarray","Rotation","radians","c","Math","cos","s","sin","_getQuaternionRotation","FromMatrix","_setQuaternionRotation","q","getMat4","getPosition","FromVec2","setPosition","position","p"],"sources":["/Users/home/Desktop/College/Fall 2022/CS_4620/cs4620-final-project/src/anigraph/math/linalg/2D/Mat3.ts"],"sourcesContent":["import { Matrix } from \"../Matrix\";\nimport {Vector, VectorBase} from \"../VectorBase\";\nimport { Vec3 } from \"./Vec3\";\nimport { Vec2 } from \"./Vec2\";\nimport {Mat4, Quaternion} from \"../3D\";\nimport assert from \"assert\";\nimport { Random } from \"../../Random\";\nimport { ASerializable } from \"../../../base\";\nimport {TransformationInterface} from \"../../TrasnformationInterface\";\n\n@ASerializable(\"Mat3\")\nexport class Mat3 extends Matrix implements TransformationInterface{\n  public constructor();\n  public constructor(\n    m00: number,\n    m01: number,\n    m02: number,\n    m10: number,\n    m11: number,\n    m12: number,\n    m20: number,\n    m21: number,\n    m22: number\n  );\n  public constructor(elements?: Array<number>);\n  public constructor(...args: Array<any>) {\n    // common logic constructor\n    super(...args);\n  }\n\n  /***\n   * Returns the element of the matrix in the position [row, col]\n   */\n  getElement(row: number, col: number): number {\n    return this.elements[3 * row + col];\n  }\n\n  /***\n   * Sets this matrix to be the identity matrix.\n   */\n  setToIdentity() {\n    this.elements = [1, 0, 0, 0, 1, 0, 0, 0, 1];\n  }\n\n  /**\n   * For function `mxy()`, gets or sets the element of the matrix at the\n   * position [x, y]\n   */\n  set m00(value) {\n    this.elements[0] = value;\n  }\n  get m00() {\n    return this.elements[0];\n  }\n  set m01(value) {\n    this.elements[1] = value;\n  }\n  get m01() {\n    return this.elements[1];\n  }\n  set m02(value) {\n    this.elements[2] = value;\n  }\n  get m02() {\n    return this.elements[2];\n  }\n  set m10(value) {\n    this.elements[3] = value;\n  }\n  get m10() {\n    return this.elements[3];\n  }\n  set m11(value) {\n    this.elements[4] = value;\n  }\n  get m11() {\n    return this.elements[4];\n  }\n  set m12(value) {\n    this.elements[5] = value;\n  }\n  get m12() {\n    return this.elements[5];\n  }\n  set m20(value) {\n    this.elements[6] = value;\n  }\n  get m20() {\n    return this.elements[6];\n  }\n  set m21(value) {\n    this.elements[7] = value;\n  }\n  get m21() {\n    return this.elements[7];\n  }\n  set m22(value) {\n    this.elements[8] = value;\n  }\n  get m22() {\n    return this.elements[8];\n  }\n\n  /**\n   * For function `cx()`, gets or sets the `x`th column of the matrix.\n   */\n  set c0(value: Vec3) {\n    this.m00 = value.x;\n    this.m10 = value.y;\n    this.m20 = value.z;\n  }\n  get c0() {\n    return new Vec3(this.m00, this.m10, this.m20);\n  }\n  set c1(value: Vec3) {\n    this.m01 = value.x;\n    this.m11 = value.y;\n    this.m21 = value.z;\n  }\n  get c1() {\n    return new Vec3(this.m01, this.m11, this.m21);\n  }\n  set c2(value: Vec3) {\n    this.m02 = value.x;\n    this.m12 = value.y;\n    this.m22 = value.z;\n  }\n  get c2() {\n    return new Vec3(this.m02, this.m12, this.m22);\n  }\n\n  /**\n   * For function `ry()`, gets or sets the `y`th row of the matrix.\n   */\n  set r0(value: Vec3) {\n    this.m00 = value.x;\n    this.m01 = value.y;\n    this.m02 = value.z;\n  }\n  get r0() {\n    return new Vec3(this.m00, this.m01, this.m02);\n  }\n  set r1(value) {\n    this.m10 = value.x;\n    this.m11 = value.y;\n    this.m12 = value.z;\n  }\n  get r1() {\n    return new Vec3(this.m10, this.m11, this.m12);\n  }\n\n  set r2(value) {\n    this.m20 = value.x;\n    this.m21 = value.y;\n    this.m22 = value.z;\n  }\n  get r2() {\n    return new Vec3(this.m20, this.m21, this.m22);\n  }\n\n  /**\n   * Returns this matrix made up of the columns `c0`, `c1`, `c2`.\n   *\n   * @param c0 The first column\n   * @param c1 The second column\n   * @param c2 The third column\n   * @returns this matrix with the specified columns\n   */\n  static FromColumns(c0: Vec3, c1: Vec3, c2: Vec3) {\n    var r = new this();\n    r.c0 = c0;\n    r.c1 = c1;\n    r.c2 = c2;\n    return r;\n  }\n  /**\n   * Returns this matrix made up of the rows `r0`, `r1`, `r2`.\n   *\n   * @param c0 The first row\n   * @param c1 The second row\n   * @param c2 The third row\n   * @returns this matrix with the specified rows\n   */\n  static FromRows(r0: Vec3, r1: Vec3, r2: Vec3) {\n    var r = new this();\n    r.r0 = r0;\n    r.r1 = r1;\n    r.r2 = r2;\n    return r;\n  }\n\n  //##################//--TransformationMatrices--\\\\##################\n  //<editor-fold desc=\"TransformationMatrices\">\n\n  /**\n   * Returns a new identity matrix.\n   *\n   * @returns a new identity matrix\n   */\n  static Identity() {\n    return new Mat3(1, 0, 0, 0, 1, 0, 0, 0, 1);\n  }\n\n  //##################//--fill matrices--\\\\##################\n  //<editor-fold desc=\"fill matrices\">\n\n  /**\n   * Returns a matrix with random floats for each element\n   *\n   * @returns a matrix with random elements\n   */\n  static Random() {\n    var r = new this(Random.floatArray(9));\n    return r;\n  }\n\n  /**\n   * Returns a matrix with all zeros\n   *\n   * @returns a matrix with all zeros\n   */\n  static Zeros() {\n    let z = new Array(9);\n    for (let i = 0; i < 9; ++i) z[i] = 0;\n    var r = new this(z);\n    return r;\n  }\n\n  /**\n   * Returns a matrix with all ones\n   *\n   * @returns a matrix with all ones\n   */\n  static Ones() {\n    let z = new Array(9);\n    for (let i = 0; i < 9; ++i) z[i] = 1;\n    var r = new this(z);\n    return r;\n  }\n  //</editor-fold>\n  //##################\\\\--fill matrices--//##################\n\n  getTranspose() {\n    let transpose = new Mat3();\n    transpose.c0 = this.r0;\n    transpose.c1 = this.r1;\n    transpose.c2 = this.r2;\n    return transpose;\n  }\n\n  //##################//--Determinant and Inverse--\\\\##################\n  //<editor-fold desc=\"Determinant and Inverse\">\n\n  /**\n   * Calculate inverse... I just used Two.js's method here.\n   * @returns {null|Matrix3x3}\n   */\n  getInverse():Mat3{\n    var a = this.elements;\n    var out = new Mat3();\n\n    var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n    var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n    var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n\n    var b01 = a22 * a11 - a12 * a21;\n    var b11 = -a22 * a10 + a12 * a20;\n    var b21 = a21 * a10 - a11 * a20;\n\n    // Calculate the determinant\n    var det = a00 * b01 + a01 * b11 + a02 * b21;\n\n    if (!det) {\n      // console.warn(\"Matrix had determinant 0!\");\n      throw new Error(\"Matrix had determinant 0! Inverse undefined!\");\n      // return null;\n    }\n\n    det = 1.0 / det;\n\n    out.elements[0] = b01 * det;\n    out.elements[1] = (-a22 * a01 + a02 * a21) * det;\n    out.elements[2] = (a12 * a01 - a02 * a11) * det;\n    out.elements[3] = b11 * det;\n    out.elements[4] = (a22 * a00 - a02 * a20) * det;\n    out.elements[5] = (-a12 * a00 + a02 * a10) * det;\n    out.elements[6] = b21 * det;\n    out.elements[7] = (-a21 * a00 + a01 * a20) * det;\n    out.elements[8] = (a11 * a00 - a01 * a10) * det;\n    return out;\n  }\n\n  /**\n   * Returns the determinant for this matrix.\n   *\n   * @returns the determinant\n   */\n  determinant() {\n    var b01 = this.m22 * this.m11 - this.m12 * this.m21;\n    var b11 = -this.m22 * this.m10 + this.m12 * this.m20;\n    var b21 = this.m21 * this.m10 - this.m11 * this.m20;\n    return this.m00 * b01 + this.m01 * b11 + this.m02 * b21;\n  }\n\n  //</editor-fold>\n  //##################\\\\--Determinant and Inverse--//##################\n\n  times(other: Mat3): Mat3;\n  times(other: number): Mat3;\n  times(other: Vec3): Vec3;\n  times(other: Vec2): Vec2;\n  times(other: VectorBase | Mat3 | number): VectorBase | Mat3 {\n    if (other instanceof Mat3) {\n      return this._timesMatrix(other);\n    } else if (other instanceof Vec2 || other instanceof Vec3) {\n      return this._timesVector(other);\n    } else if (typeof other === \"number\") {\n      let cfunc: any = this.constructor as any;\n      var m: this = new cfunc();\n      for (let i = 0; i < m.elements.length; i++) {\n        m.elements[i] = this.elements[i] * other;\n      }\n      return m;\n    }\n    throw new Error(\n      \"Tried to do Matrix.times(other) with other not a matrix, vector, or scalar...\"\n    );\n  }\n\n  /**\n   * if it's a Vec3 we do regular matrix vector multiplication. If it's a Vec2, we treat it as a point and add a\n   * homogeneous value of 1, then do the multiplication, then homogenize and drop the homogeneous coordinate to return\n   * a new Vec2.\n   * @param v\n   * @returns {Vec3 | Vec2}\n   * @private\n   */\n  protected _timesVector(v: Vec3 | Vec2): Vec3 | Vec2 {\n    if (v instanceof Vec3) {\n      return new Vec3(\n        v.elements[0] * this.elements[0] +\n          v.elements[1] * this.elements[1] +\n          v.elements[2] * this.elements[2],\n        v.elements[0] * this.elements[3] +\n          v.elements[1] * this.elements[4] +\n          v.elements[2] * this.elements[5],\n        v.elements[0] * this.elements[6] +\n          v.elements[1] * this.elements[7] +\n          v.elements[2] * this.elements[8]\n      );\n    } else {\n      let v3out = new Vec3(\n        v.elements[0] * this.elements[0] +\n          v.elements[1] * this.elements[1] +\n          this.elements[2],\n        v.elements[0] * this.elements[3] +\n          v.elements[1] * this.elements[4] +\n          this.elements[5],\n        v.elements[0] * this.elements[6] +\n          v.elements[1] * this.elements[7] +\n          this.elements[8]\n      );\n      return v3out.Point2D;\n    }\n  }\n  protected _timesMatrix(m: Mat3): Mat3 {\n    let cfunc: any = this.constructor as any;\n    return new cfunc([\n      this.elements[0] * m.elements[0] +\n        this.elements[1] * m.elements[3] +\n        this.elements[2] * m.elements[6],\n      this.elements[0] * m.elements[1] +\n        this.elements[1] * m.elements[4] +\n        this.elements[2] * m.elements[7],\n      this.elements[0] * m.elements[2] +\n        this.elements[1] * m.elements[5] +\n        this.elements[2] * m.elements[8],\n      this.elements[3] * m.elements[0] +\n        this.elements[4] * m.elements[3] +\n        this.elements[5] * m.elements[6],\n      this.elements[3] * m.elements[1] +\n        this.elements[4] * m.elements[4] +\n        this.elements[5] * m.elements[7],\n      this.elements[3] * m.elements[2] +\n        this.elements[4] * m.elements[5] +\n        this.elements[5] * m.elements[8],\n      this.elements[6] * m.elements[0] +\n        this.elements[7] * m.elements[3] +\n        this.elements[8] * m.elements[6],\n      this.elements[6] * m.elements[1] +\n        this.elements[7] * m.elements[4] +\n        this.elements[8] * m.elements[7],\n      this.elements[6] * m.elements[2] +\n        this.elements[7] * m.elements[5] +\n        this.elements[8] * m.elements[8],\n    ]);\n  }\n  toJSON() {\n    var rval: { [name: string]: any } = {};\n    for (let k in this) {\n      // @ts-ignore\n      rval[k] = this[k];\n    }\n    return rval;\n  }\n\n  asPrettyString(precision: number = 4): string {\n    return `Mat3 in Row Major Form:\\n\n        ${this.elements[0].toPrecision(\n          precision\n        )}, ${this.elements[1].toPrecision(\n      precision\n    )}, ${this.elements[2].toPrecision(precision)}\\n\n        ${this.elements[3].toPrecision(\n          precision\n        )}, ${this.elements[4].toPrecision(\n      precision\n    )}, ${this.elements[5].toPrecision(precision)}\\n\n        ${this.elements[6].toPrecision(\n          precision\n        )}, ${this.elements[7].toPrecision(\n      precision\n    )}, ${this.elements[8].toPrecision(precision)}\\n\n        `;\n  }\n\n  Mat4From2DH() {\n    return Mat4.From2DMat3(this);\n  }\n\n  assignTo(threejsMat: THREE.Matrix4){\n    console.error(\"Should not be using Mat3.assignTo! Ambiguous whether linear or homogeneous!\")\n    this.Mat4Linear().assignTo(threejsMat);\n  }\n\n  Mat4Linear() {\n    return Mat4.FromMat3Linear(this);\n  }\n\n  logTable(){\n    console.table({\n      'row0': this.r0,\n      'row1': this.r1,\n      'row2': this.r2\n    })\n  }\n\n\n  /**\n   * Returns the corresponding 3D scale transformation matrix given the scaling\n   * factor.\n   *\n   * If factor is a number, then uses the factor for scaling in the x and y\n   * direction.\n   * If factor is an array of length three, then uses the factor[0] as the x\n   * direction, factor[1] as the y direction, and factor[2] as the z-direction.\n   * If factor is a `Vec3`, then uses the factor[0] as the x-direction,\n   * factor[1] as the y-direction, and factor[2] as the z-direction.\n   *\n   * @param factor the scaling factor\n   */\n  public static Scale3D(factor:number):Mat3;\n  public static Scale3D(factors:Array<number>):Mat3;\n  public static Scale3D(factors:Vec3):Mat3;\n  public static Scale3D(...args:any[]):Mat3 {\n    function scalematfromarray(a:Array<number>) {\n      let rmat = new Mat3();\n      if (a.length > 0) {\n        rmat.elements[0] = a[0];\n        if (a.length > 1) {\n          rmat.elements[4] = a[1];\n          if (a.length > 2) {\n            assert(a.length === 3, \"Scale arguments too long\");\n            rmat.elements[8] = a[2];\n          }\n        }\n      }\n      return rmat;\n    }\n\n    assert(args.length>0, \"Cannot call Mat3.Scale() with no arguments\");\n    if(typeof args[0] === \"number\") {\n      let rmat = new Mat3();\n      rmat.m00=args[0];\n      rmat.m11=args[0];\n      rmat.m22=args[0];\n      return rmat;\n    } else if(Array.isArray(args[0])) {\n      return scalematfromarray(args[0]);\n    }else if(args[0] instanceof Vec3){\n      return scalematfromarray(args[0].elements);\n    }else {\n      return scalematfromarray(args);\n    }\n  }\n\n  /**\n   * Returns the corresponding 2D scale transformation matrix for the given\n   * scaling factor.\n   *\n   * If `factor` is a `number`, then uses the factor for scaling in the x and\n   * y directions.\n   * If `factor` is an `array` of length two, then uses the factor[0] as the x\n   * direction and factor[1] as the y-direction.\n   * If `factor` is a `Vec2`, then uses the factor[0] as the x-direction and\n   * factor[1] as the y-direction.\n   *\n   * @param factor the scaling factor\n   */\n  public static Scale2D(factors:Array<number>):Mat3;\n  public static Scale2D(factor:number|Vector):Mat3;\n  public static Scale2D(factors:Vec2):Mat3;\n  public static Scale2D(...args:Array<any>):Mat3 {\n    function scalematfromarray(a:Array<number>) {\n      let rmat = new Mat3();\n      if (a.length > 0) {\n        rmat.elements[0] = a[0];\n        if (a.length > 1) {\n          assert(a.length === 2, \"Scale2D arguments too long\");\n          rmat.elements[4] = a[1];\n        }\n      }\n      return rmat;\n    }\n    assert(args.length>0, \"Cannot call Mat3.Scale2D() with no arguments\");\n    if(typeof args[0] === \"number\") {\n      let rmat = new Mat3();\n      rmat.m00=args[0];\n      rmat.m11=args[0];\n      return rmat;\n    } else if(Array.isArray(args[0])) {\n      return scalematfromarray(args[0]);\n    }else if(args[0] instanceof Vec2){\n      return scalematfromarray(args[0].elements);\n    }else {\n      return scalematfromarray(args);\n    }\n  }\n\n  /**\n   * Returns the corresponding 2D translation transformation matrix for the\n   * given translation `t` or `x` and `y`.\n   *\n   * If the argument is `x` and `y`, then it translates in the x-direction `x`\n   * amount and in the y-direction `y` amount.\n   * If `t` is an `array` of length two, then uses the t[0] as the x-direction\n   * and t[1] as the y-direction.\n   * If `t` is a `Vec2`, then uses the t[0] as the x-direction and t[1] as the\n   * y-direction.\n   *\n   * @param t the translation factor\n   */\n  public static Translation2D(t:Array<number>):Mat3;\n  public static Translation2D(t:Vec2):Mat3;\n  public static Translation2D(x:number,y:number):Mat3\n  public static Translation2D(...args:Array<any>):Mat3{\n    function tmatfromarray(a:Array<number>) {\n      let rmat = new Mat3();\n      rmat.m02=a[0];\n      rmat.m12=a[1];\n      return rmat;\n    }\n    assert(args.length>0, \"Cannot call Mat3.Translation2D() with no arguments\");\n    if(Array.isArray(args[0])) {\n      return tmatfromarray(args[0]);\n    }else if(args[0] instanceof Vec2){\n      return tmatfromarray(args[0].elements);\n    }else {\n      assert(args.length===2, \"wrong number of args for Mat3.Translation2D\")\n      return tmatfromarray(args);\n    }\n  }\n\n  /**\n   * Returns the corresponding rotation transformation matrix for the given\n   * `radians`.\n   *\n   * @param radians the rotation amount in radians\n   * @returns the rotation transformation matrix\n   */\n  public static Rotation(radians:number):Mat3{\n    var c:number = Math.cos(radians);\n    var s:number = Math.sin(radians);\n    return new Mat3(c, -s, 0, s, c, 0, 0, 0, 1)\n  }\n\n  _getQuaternionRotation(): Quaternion {\n    return Quaternion.FromMatrix(this);\n  }\n\n  _setQuaternionRotation(q: Quaternion): void {\n    this.elements = q.Mat3().elements;\n  }\n\n  getMat4(): Mat4 {\n    throw new Error(\"Unspecified whether to convert Mat3 to Mat4 as 2D homogeneous or 3D Linear!\")\n  }\n\n  getPosition(): Vec3 {\n    return Vec3.FromVec2(this.c2.Point2D);\n  }\n\n  setPosition(position: Vec3): void {\n    let p = position.Point2D;\n    this.m02 = p.x;\n    this.m12 = p.y;\n  }\n  //</editor-fold>\n  //##################\\\\--TransformationMatrices--//##################\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}