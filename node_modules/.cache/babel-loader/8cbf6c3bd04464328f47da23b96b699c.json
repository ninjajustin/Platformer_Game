{"ast":null,"code":"/**\n * @file Main scene controller for your application\n * @description This is where you connect models to views.\n * This is done mainly by defining your model view spec and interaction modes.\n */\n\nimport { BaseSceneController } from \"../../BaseClasses\";\nimport { ATriangleMeshModel, ATriangleMeshView } from \"../../../anigraph/scene/nodes\";\nimport { APointLightModel, APointLightView } from \"../../../anigraph/scene/lights\";\nimport { PlayerModel, PlayerView } from \"../Nodes/PlayerNode\";\nimport { BotModel } from \"../Nodes/CharacterNodes/BotModel\";\nimport { BotView } from \"../Nodes/CharacterNodes/BotView\";\nimport { ExampleThreeJSNodeModel, ExampleThreeJSNodeView } from \"../Nodes/ExampleNodes/ExampleThreeJSNode\";\nimport { ExampleParticleSystemModel } from \"../Nodes/ExampleNodes/ExampleParticleSystemNode/ExampleParticleSystemModel\";\nimport { ExampleParticleSystemView } from \"../Nodes/ExampleNodes/ExampleParticleSystemNode/ExampleParticleSystemView\";\nimport { AppConfigs } from \"../../AppConfigs\";\nimport * as THREE from \"three\";\nimport { GameTerrainModel } from \"../Nodes/GameTerrain/GameTerrainModel\";\nimport { GameTerrainView } from \"../Nodes/GameTerrain/GameTerrainView\";\nimport { GameInteractionMode } from \"../InteractionModes/GameInteractionMode\";\nimport { GetAppState } from \"../MainAppState\";\nimport { BillboardParticleSystemModel, BillboardParticleSystemView } from \"../Nodes/BillboardParticleSystem\";\nimport { ExampleLoadedCharacterModel, ExampleLoadedModel, ExampleLoadedView } from \"../Nodes/Loaded\";\nexport class MainSceneController extends BaseSceneController {\n  constructor() {\n    super(...arguments);\n    this.enterEditorMode = void 0;\n    this.levels = void 0;\n    this.paused = false;\n  }\n  get model() {\n    return this._model;\n  }\n\n  /**\n   * This is where you specify the mapping from model classes to view classes.\n   */\n  initModelViewSpecs() {\n    this.addModelViewSpec(APointLightModel, APointLightView);\n    this.addModelViewSpec(ATriangleMeshModel, ATriangleMeshView);\n    this.addModelViewSpec(PlayerModel, PlayerView);\n    this.addModelViewSpec(BotModel, BotView);\n    this.addModelViewSpec(ExampleThreeJSNodeModel, ExampleThreeJSNodeView);\n    this.addModelViewSpec(ExampleParticleSystemModel, ExampleParticleSystemView);\n    this.addModelViewSpec(GameTerrainModel, GameTerrainView);\n    this.addModelViewSpec(BillboardParticleSystemModel, BillboardParticleSystemView);\n    this.addModelViewSpec(ExampleLoadedCharacterModel, ExampleLoadedView);\n    this.addModelViewSpec(ExampleLoadedModel, ExampleLoadedView);\n  }\n  async initScene() {\n    /**\n     * Set up the skybox background\n     */\n    await super.initScene();\n    let path = './images/cube/MilkyWay/dark-s_';\n    let format = '.jpg';\n    const urls = [path + 'px' + format, path + 'nx' + format, path + 'py' + format, path + 'ny' + format, path + 'pz' + format, path + 'nz' + format];\n\n    /**\n     * If you want to change the skybox, you will need to provide the appropriate urls to the corresponding textures\n     * from a cube map\n     */\n    const reflectionCube = new THREE.CubeTextureLoader().load(urls);\n    reflectionCube.rotation = Math.PI * 0.25;\n    this.view.threejs.background = reflectionCube;\n  }\n  addSlider(name, def, setter, min, max, step) {\n    let multi = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 1;\n    let appState = GetAppState();\n    appState.addSliderControl(name, def * multi, min * multi, max * multi, step * multi);\n    this.subscribeToAppState(name, v => {\n      setter(v / multi);\n    });\n    appState.updateControlPanel();\n  }\n  addSelections(name, def, setter, selections) {\n    let appState = GetAppState();\n    appState.setSelectionControl(name, def, selections);\n    this.subscribeToAppState(name, v => {\n      setter(v);\n    });\n    appState.updateControlPanel();\n  }\n  addBooleanSelections(name, def, setter) {\n    this.addSelections(name, def ? \"Yes\" : \"No\", v => {\n      setter(v === \"Yes\");\n    }, [\"Yes\", \"No\"]);\n  }\n  initControlPanel() {\n    this.addSlider(\"Jump Power\", AppConfigs.JumpPower, v => AppConfigs.JumpPower = v, .01, .20, .005, 10000);\n    this.addSlider(\"Move Speed\", AppConfigs.MoveSpeed, v => AppConfigs.MoveSpeed = v, .001, .300, .001, 10000);\n    this.addSlider(\"Gravity\", AppConfigs.Gravity, v => AppConfigs.Gravity = v, .0001, .0020, .0001, 10000);\n    this.addSlider(\"Slow Down\", AppConfigs.SlowDown, v => AppConfigs.SlowDown = v, .01, .20, .001, 1000);\n    this.addBooleanSelections(\"In-air Jump\", AppConfigs.AllowMultiJump, v => AppConfigs.AllowMultiJump = v);\n    // this.addBooleanSelections(\n    //   \"Debug\", false, (v) => {\n    //       this.setCurrentInteractionMode(v ? \"Debug\" : \"GameInteraction\");\n    //   });\n  }\n\n  updateLevels(levels) {\n    this.levels = levels;\n    this.model.updateLevel(levels[0]);\n    const setter = level => {\n      if (level === \"Enter editor\") {\n        this.enterEditorMode();\n        return;\n      } else {\n        const ind = levels.findIndex(v => v.name === level);\n        this.model.updateLevel(levels[ind]);\n      }\n    };\n    this.addSelections(\"Levels\", levels[0].name, setter, [...levels.map(s => s.name), \"Enter editor\"]);\n  }\n  onResize(renderWindow) {}\n  initInteractions() {\n    /**\n     * We will define the debug interaction mode here.\n     * The debug mode is offered mainly to provide camera controls for developing and debugging non-control-related\n     * features. It may also be useful as an example for you to look at if you like.\n     */\n    super.initInteractions();\n    this.initControlPanel();\n    // let debugInteractionMode = new ADebugInteractionMode(this);\n    // this.defineInteractionMode(\"Debug\", debugInteractionMode);\n    //\n    //\n    // /**\n    //  * This code adds the ExamplePlayer interaction mode and sets it as the current active mode\n    //  */\n    // let playerInteractionMode = new ExamplePlayerInteractionMode(this);\n    // this.defineInteractionMode(\"ExamplePlayer\", playerInteractionMode);\n    //\n    //\n    // let pointerLockInteractionMode = new ExamplePointerLockInteractionMode(this);\n    // this.defineInteractionMode(\"ExamplePointerLock\", pointerLockInteractionMode);\n\n    let gameInteractionMode = new GameInteractionMode(this);\n    this.defineInteractionMode(\"GameInteraction\", gameInteractionMode);\n\n    /**\n     * For starters we will default to the debug mode.\n     */\n    this.setCurrentInteractionMode(\"GameInteraction\");\n  }\n  onAnimationFrameCallback(context) {\n    // let's update the model\n    let time = this.time;\n    this.model.timeUpdate(time, this.paused); //, this._currentInteractionModeName.toLowerCase().includes(\"debug\"));\n\n    /**\n     * And the interaction mode... This is important for things like camera motion filtering.\n     */\n    this.interactionMode.timeUpdate(time);\n\n    // clear the rendering context\n    context.renderer.clear();\n    // this.renderer.clear(false, true);\n\n    // render the scene view\n    context.renderer.render(this.view.threejs, this._threeCamera);\n  }\n}","map":{"version":3,"names":["BaseSceneController","ATriangleMeshModel","ATriangleMeshView","APointLightModel","APointLightView","PlayerModel","PlayerView","BotModel","BotView","ExampleThreeJSNodeModel","ExampleThreeJSNodeView","ExampleParticleSystemModel","ExampleParticleSystemView","AppConfigs","THREE","GameTerrainModel","GameTerrainView","GameInteractionMode","GetAppState","BillboardParticleSystemModel","BillboardParticleSystemView","ExampleLoadedCharacterModel","ExampleLoadedModel","ExampleLoadedView","MainSceneController","enterEditorMode","levels","paused","model","_model","initModelViewSpecs","addModelViewSpec","initScene","path","format","urls","reflectionCube","CubeTextureLoader","load","rotation","Math","PI","view","threejs","background","addSlider","name","def","setter","min","max","step","multi","appState","addSliderControl","subscribeToAppState","v","updateControlPanel","addSelections","selections","setSelectionControl","addBooleanSelections","initControlPanel","JumpPower","MoveSpeed","Gravity","SlowDown","AllowMultiJump","updateLevels","updateLevel","level","ind","findIndex","map","s","onResize","renderWindow","initInteractions","gameInteractionMode","defineInteractionMode","setCurrentInteractionMode","onAnimationFrameCallback","context","time","timeUpdate","interactionMode","renderer","clear","render","_threeCamera"],"sources":["/Users/home/Desktop/cs4620-final-project/src/app/main/Scene/MainSceneController.ts"],"sourcesContent":["/**\n * @file Main scene controller for your application\n * @description This is where you connect models to views.\n * This is done mainly by defining your model view spec and interaction modes.\n */\n\n\nimport {BaseSceneController} from \"../../BaseClasses\";\nimport {AGLContext, AGLRenderWindow,} from \"../../../anigraph\";\nimport {ATriangleMeshModel, ATriangleMeshView} from \"../../../anigraph/scene/nodes\";\n\nimport {APointLightModel, APointLightView} from \"../../../anigraph/scene/lights\";\nimport {PlayerModel, PlayerView} from \"../Nodes/PlayerNode\";\nimport {MainSceneModel} from \"./MainSceneModel\";\nimport {BotModel} from \"../Nodes/CharacterNodes/BotModel\";\nimport {BotView} from \"../Nodes/CharacterNodes/BotView\";\nimport {ExampleThreeJSNodeModel, ExampleThreeJSNodeView} from \"../Nodes/ExampleNodes/ExampleThreeJSNode\";\nimport {ExampleParticleSystemModel} from \"../Nodes/ExampleNodes/ExampleParticleSystemNode/ExampleParticleSystemModel\";\nimport {ExampleParticleSystemView} from \"../Nodes/ExampleNodes/ExampleParticleSystemNode/ExampleParticleSystemView\";\nimport {AppConfigs} from \"../../AppConfigs\";\nimport * as THREE from \"three\";\nimport {GameTerrainModel} from \"../Nodes/GameTerrain/GameTerrainModel\";\nimport {GameTerrainView} from \"../Nodes/GameTerrain/GameTerrainView\";\nimport {GameInteractionMode} from \"../InteractionModes/GameInteractionMode\";\nimport {GetAppState} from \"../MainAppState\";\nimport {ADebugInteractionMode} from \"../../../anigraph/scene/interactionmodes\";\nimport { BillboardParticleSystemModel, BillboardParticleSystemView } from \"../Nodes/BillboardParticleSystem\";\nimport {LevelDefinition} from \"../../Backend/Level\";\nimport { ExampleLoadedCharacterModel, ExampleLoadedModel, ExampleLoadedView } from \"../Nodes/Loaded\";\n\nexport class MainSceneController extends BaseSceneController {\n  enterEditorMode: () => void;\n  levels: LevelDefinition[];\n  paused: boolean = false;\n\n  get model(): MainSceneModel {\n    return this._model as MainSceneModel;\n  }\n\n  /**\n   * This is where you specify the mapping from model classes to view classes.\n   */\n  initModelViewSpecs(): void {\n    this.addModelViewSpec(APointLightModel, APointLightView);\n    this.addModelViewSpec(ATriangleMeshModel, ATriangleMeshView);\n    this.addModelViewSpec(PlayerModel, PlayerView);\n    this.addModelViewSpec(BotModel, BotView);\n    this.addModelViewSpec(ExampleThreeJSNodeModel, ExampleThreeJSNodeView);\n    this.addModelViewSpec(ExampleParticleSystemModel, ExampleParticleSystemView);\n    this.addModelViewSpec(GameTerrainModel, GameTerrainView);\n    this.addModelViewSpec(BillboardParticleSystemModel, BillboardParticleSystemView);\n      this.addModelViewSpec(ExampleLoadedCharacterModel, ExampleLoadedView);\n      this.addModelViewSpec(ExampleLoadedModel, ExampleLoadedView);\n  }\n\n  async initScene(): Promise<void> {\n    /**\n     * Set up the skybox background\n     */\n    await super.initScene();\n    let path = './images/cube/MilkyWay/dark-s_';\n    let format = '.jpg'\n    const urls = [\n      path + 'px' + format, path + 'nx' + format,\n      path + 'py' + format, path + 'ny' + format,\n      path + 'pz' + format, path + 'nz' + format\n    ];\n\n    /**\n     * If you want to change the skybox, you will need to provide the appropriate urls to the corresponding textures\n     * from a cube map\n     */\n    const reflectionCube = new THREE.CubeTextureLoader().load(urls);\n    reflectionCube.rotation = Math.PI * 0.25;\n    this.view.threejs.background = reflectionCube;\n  }\n\n  addSlider(name: string, def: number, setter: (v: number) => void,\n            min: number, max: number, step: number, multi: number = 1) {\n    let appState = GetAppState();\n    appState.addSliderControl(name, def * multi, min * multi, max * multi, step * multi);\n    this.subscribeToAppState(name, (v) => {\n      setter(v / multi)\n    });\n    appState.updateControlPanel();\n  }\n\n  addSelections<T>(name: string, def: T, setter: (v: T) => void, selections: T[]) {\n    let appState = GetAppState();\n    appState.setSelectionControl(name, def, selections);\n    this.subscribeToAppState(name, (v) => {\n      setter(v)\n    });\n    appState.updateControlPanel();\n  }\n\n  addBooleanSelections(name: string, def: boolean, setter: (v: boolean) => void) {\n    this.addSelections(name, def ? \"Yes\" : \"No\", (v) => {\n      setter(v === \"Yes\")\n    }, [\"Yes\", \"No\"]);\n  }\n\n  initControlPanel() {\n    this.addSlider(\n      \"Jump Power\",\n      AppConfigs.JumpPower, (v) => AppConfigs.JumpPower = v,\n      .01, .20, .005, 10000);\n    this.addSlider(\n      \"Move Speed\",\n      AppConfigs.MoveSpeed, (v) => AppConfigs.MoveSpeed = v,\n      .001, .300, .001, 10000);\n    this.addSlider(\n      \"Gravity\",\n      AppConfigs.Gravity, (v) => AppConfigs.Gravity = v,\n      .0001, .0020, .0001, 10000);\n    this.addSlider(\n      \"Slow Down\",\n      AppConfigs.SlowDown, (v) => AppConfigs.SlowDown = v,\n      .01, .20, .001, 1000);\n    this.addBooleanSelections(\n      \"In-air Jump\", AppConfigs.AllowMultiJump, (v) => AppConfigs.AllowMultiJump = v);\n    // this.addBooleanSelections(\n    //   \"Debug\", false, (v) => {\n    //       this.setCurrentInteractionMode(v ? \"Debug\" : \"GameInteraction\");\n    //   });\n\n  }\n\n  updateLevels(levels: LevelDefinition[]) {\n    this.levels = levels;\n    this.model.updateLevel(levels[0]);\n    const setter = (level) => {\n      if (level === \"Enter editor\") {\n        this.enterEditorMode();\n        return;\n      } else {\n        const ind = levels.findIndex((v) => v.name === level);\n        this.model.updateLevel(levels[ind]);\n      }\n    };\n    this.addSelections<string>(\"Levels\",\n      levels[0].name,\n      setter,\n      [...levels.map((s) => s.name), \"Enter editor\"]);\n  }\n\n  onResize(renderWindow: AGLRenderWindow) {\n\n  }\n\n  initInteractions() {\n\n    /**\n     * We will define the debug interaction mode here.\n     * The debug mode is offered mainly to provide camera controls for developing and debugging non-control-related\n     * features. It may also be useful as an example for you to look at if you like.\n     */\n    super.initInteractions();\n    this.initControlPanel();\n    // let debugInteractionMode = new ADebugInteractionMode(this);\n    // this.defineInteractionMode(\"Debug\", debugInteractionMode);\n    //\n    //\n    // /**\n    //  * This code adds the ExamplePlayer interaction mode and sets it as the current active mode\n    //  */\n    // let playerInteractionMode = new ExamplePlayerInteractionMode(this);\n    // this.defineInteractionMode(\"ExamplePlayer\", playerInteractionMode);\n    //\n    //\n    // let pointerLockInteractionMode = new ExamplePointerLockInteractionMode(this);\n    // this.defineInteractionMode(\"ExamplePointerLock\", pointerLockInteractionMode);\n\n    let gameInteractionMode = new GameInteractionMode(this);\n    this.defineInteractionMode(\"GameInteraction\", gameInteractionMode);\n\n    /**\n     * For starters we will default to the debug mode.\n     */\n    this.setCurrentInteractionMode(\"GameInteraction\");\n\n  }\n\n  onAnimationFrameCallback(context: AGLContext) {\n    // let's update the model\n    let time = this.time;\n    this.model.timeUpdate(time, this.paused);//, this._currentInteractionModeName.toLowerCase().includes(\"debug\"));\n\n    /**\n     * And the interaction mode... This is important for things like camera motion filtering.\n     */\n    this.interactionMode.timeUpdate(time)\n\n    // clear the rendering context\n    context.renderer.clear();\n    // this.renderer.clear(false, true);\n\n    // render the scene view\n    context.renderer.render(this.view.threejs, this._threeCamera);\n  }\n\n}\n\n\n\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAGA,SAAQA,mBAAmB,QAAO,mBAAmB;AAErD,SAAQC,kBAAkB,EAAEC,iBAAiB,QAAO,+BAA+B;AAEnF,SAAQC,gBAAgB,EAAEC,eAAe,QAAO,gCAAgC;AAChF,SAAQC,WAAW,EAAEC,UAAU,QAAO,qBAAqB;AAE3D,SAAQC,QAAQ,QAAO,kCAAkC;AACzD,SAAQC,OAAO,QAAO,iCAAiC;AACvD,SAAQC,uBAAuB,EAAEC,sBAAsB,QAAO,0CAA0C;AACxG,SAAQC,0BAA0B,QAAO,4EAA4E;AACrH,SAAQC,yBAAyB,QAAO,2EAA2E;AACnH,SAAQC,UAAU,QAAO,kBAAkB;AAC3C,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,SAAQC,gBAAgB,QAAO,uCAAuC;AACtE,SAAQC,eAAe,QAAO,sCAAsC;AACpE,SAAQC,mBAAmB,QAAO,yCAAyC;AAC3E,SAAQC,WAAW,QAAO,iBAAiB;AAE3C,SAASC,4BAA4B,EAAEC,2BAA2B,QAAQ,kCAAkC;AAE5G,SAASC,2BAA2B,EAAEC,kBAAkB,EAAEC,iBAAiB,QAAQ,iBAAiB;AAEpG,OAAO,MAAMC,mBAAmB,SAASxB,mBAAmB,CAAC;EAAA;IAAA;IAAA,KAC3DyB,eAAe;IAAA,KACfC,MAAM;IAAA,KACNC,MAAM,GAAY,KAAK;EAAA;EAEvB,IAAIC,KAAK,GAAmB;IAC1B,OAAO,IAAI,CAACC,MAAM;EACpB;;EAEA;AACF;AACA;EACEC,kBAAkB,GAAS;IACzB,IAAI,CAACC,gBAAgB,CAAC5B,gBAAgB,EAAEC,eAAe,CAAC;IACxD,IAAI,CAAC2B,gBAAgB,CAAC9B,kBAAkB,EAAEC,iBAAiB,CAAC;IAC5D,IAAI,CAAC6B,gBAAgB,CAAC1B,WAAW,EAAEC,UAAU,CAAC;IAC9C,IAAI,CAACyB,gBAAgB,CAACxB,QAAQ,EAAEC,OAAO,CAAC;IACxC,IAAI,CAACuB,gBAAgB,CAACtB,uBAAuB,EAAEC,sBAAsB,CAAC;IACtE,IAAI,CAACqB,gBAAgB,CAACpB,0BAA0B,EAAEC,yBAAyB,CAAC;IAC5E,IAAI,CAACmB,gBAAgB,CAAChB,gBAAgB,EAAEC,eAAe,CAAC;IACxD,IAAI,CAACe,gBAAgB,CAACZ,4BAA4B,EAAEC,2BAA2B,CAAC;IAC9E,IAAI,CAACW,gBAAgB,CAACV,2BAA2B,EAAEE,iBAAiB,CAAC;IACrE,IAAI,CAACQ,gBAAgB,CAACT,kBAAkB,EAAEC,iBAAiB,CAAC;EAChE;EAEA,MAAMS,SAAS,GAAkB;IAC/B;AACJ;AACA;IACI,MAAM,KAAK,CAACA,SAAS,EAAE;IACvB,IAAIC,IAAI,GAAG,gCAAgC;IAC3C,IAAIC,MAAM,GAAG,MAAM;IACnB,MAAMC,IAAI,GAAG,CACXF,IAAI,GAAG,IAAI,GAAGC,MAAM,EAAED,IAAI,GAAG,IAAI,GAAGC,MAAM,EAC1CD,IAAI,GAAG,IAAI,GAAGC,MAAM,EAAED,IAAI,GAAG,IAAI,GAAGC,MAAM,EAC1CD,IAAI,GAAG,IAAI,GAAGC,MAAM,EAAED,IAAI,GAAG,IAAI,GAAGC,MAAM,CAC3C;;IAED;AACJ;AACA;AACA;IACI,MAAME,cAAc,GAAG,IAAItB,KAAK,CAACuB,iBAAiB,EAAE,CAACC,IAAI,CAACH,IAAI,CAAC;IAC/DC,cAAc,CAACG,QAAQ,GAAGC,IAAI,CAACC,EAAE,GAAG,IAAI;IACxC,IAAI,CAACC,IAAI,CAACC,OAAO,CAACC,UAAU,GAAGR,cAAc;EAC/C;EAEAS,SAAS,CAACC,IAAY,EAAEC,GAAW,EAAEC,MAA2B,EACtDC,GAAW,EAAEC,GAAW,EAAEC,IAAY,EAAqB;IAAA,IAAnBC,KAAa,uEAAG,CAAC;IACjE,IAAIC,QAAQ,GAAGnC,WAAW,EAAE;IAC5BmC,QAAQ,CAACC,gBAAgB,CAACR,IAAI,EAAEC,GAAG,GAAGK,KAAK,EAAEH,GAAG,GAAGG,KAAK,EAAEF,GAAG,GAAGE,KAAK,EAAED,IAAI,GAAGC,KAAK,CAAC;IACpF,IAAI,CAACG,mBAAmB,CAACT,IAAI,EAAGU,CAAC,IAAK;MACpCR,MAAM,CAACQ,CAAC,GAAGJ,KAAK,CAAC;IACnB,CAAC,CAAC;IACFC,QAAQ,CAACI,kBAAkB,EAAE;EAC/B;EAEAC,aAAa,CAAIZ,IAAY,EAAEC,GAAM,EAAEC,MAAsB,EAAEW,UAAe,EAAE;IAC9E,IAAIN,QAAQ,GAAGnC,WAAW,EAAE;IAC5BmC,QAAQ,CAACO,mBAAmB,CAACd,IAAI,EAAEC,GAAG,EAAEY,UAAU,CAAC;IACnD,IAAI,CAACJ,mBAAmB,CAACT,IAAI,EAAGU,CAAC,IAAK;MACpCR,MAAM,CAACQ,CAAC,CAAC;IACX,CAAC,CAAC;IACFH,QAAQ,CAACI,kBAAkB,EAAE;EAC/B;EAEAI,oBAAoB,CAACf,IAAY,EAAEC,GAAY,EAAEC,MAA4B,EAAE;IAC7E,IAAI,CAACU,aAAa,CAACZ,IAAI,EAAEC,GAAG,GAAG,KAAK,GAAG,IAAI,EAAGS,CAAC,IAAK;MAClDR,MAAM,CAACQ,CAAC,KAAK,KAAK,CAAC;IACrB,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;EACnB;EAEAM,gBAAgB,GAAG;IACjB,IAAI,CAACjB,SAAS,CACZ,YAAY,EACZhC,UAAU,CAACkD,SAAS,EAAGP,CAAC,IAAK3C,UAAU,CAACkD,SAAS,GAAGP,CAAC,EACrD,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,KAAK,CAAC;IACxB,IAAI,CAACX,SAAS,CACZ,YAAY,EACZhC,UAAU,CAACmD,SAAS,EAAGR,CAAC,IAAK3C,UAAU,CAACmD,SAAS,GAAGR,CAAC,EACrD,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,CAAC;IAC1B,IAAI,CAACX,SAAS,CACZ,SAAS,EACThC,UAAU,CAACoD,OAAO,EAAGT,CAAC,IAAK3C,UAAU,CAACoD,OAAO,GAAGT,CAAC,EACjD,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC;IAC7B,IAAI,CAACX,SAAS,CACZ,WAAW,EACXhC,UAAU,CAACqD,QAAQ,EAAGV,CAAC,IAAK3C,UAAU,CAACqD,QAAQ,GAAGV,CAAC,EACnD,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI,CAAC;IACvB,IAAI,CAACK,oBAAoB,CACvB,aAAa,EAAEhD,UAAU,CAACsD,cAAc,EAAGX,CAAC,IAAK3C,UAAU,CAACsD,cAAc,GAAGX,CAAC,CAAC;IACjF;IACA;IACA;IACA;EAEF;;EAEAY,YAAY,CAAC1C,MAAyB,EAAE;IACtC,IAAI,CAACA,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACE,KAAK,CAACyC,WAAW,CAAC3C,MAAM,CAAC,CAAC,CAAC,CAAC;IACjC,MAAMsB,MAAM,GAAIsB,KAAK,IAAK;MACxB,IAAIA,KAAK,KAAK,cAAc,EAAE;QAC5B,IAAI,CAAC7C,eAAe,EAAE;QACtB;MACF,CAAC,MAAM;QACL,MAAM8C,GAAG,GAAG7C,MAAM,CAAC8C,SAAS,CAAEhB,CAAC,IAAKA,CAAC,CAACV,IAAI,KAAKwB,KAAK,CAAC;QACrD,IAAI,CAAC1C,KAAK,CAACyC,WAAW,CAAC3C,MAAM,CAAC6C,GAAG,CAAC,CAAC;MACrC;IACF,CAAC;IACD,IAAI,CAACb,aAAa,CAAS,QAAQ,EACjChC,MAAM,CAAC,CAAC,CAAC,CAACoB,IAAI,EACdE,MAAM,EACN,CAAC,GAAGtB,MAAM,CAAC+C,GAAG,CAAEC,CAAC,IAAKA,CAAC,CAAC5B,IAAI,CAAC,EAAE,cAAc,CAAC,CAAC;EACnD;EAEA6B,QAAQ,CAACC,YAA6B,EAAE,CAExC;EAEAC,gBAAgB,GAAG;IAEjB;AACJ;AACA;AACA;AACA;IACI,KAAK,CAACA,gBAAgB,EAAE;IACxB,IAAI,CAACf,gBAAgB,EAAE;IACvB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA,IAAIgB,mBAAmB,GAAG,IAAI7D,mBAAmB,CAAC,IAAI,CAAC;IACvD,IAAI,CAAC8D,qBAAqB,CAAC,iBAAiB,EAAED,mBAAmB,CAAC;;IAElE;AACJ;AACA;IACI,IAAI,CAACE,yBAAyB,CAAC,iBAAiB,CAAC;EAEnD;EAEAC,wBAAwB,CAACC,OAAmB,EAAE;IAC5C;IACA,IAAIC,IAAI,GAAG,IAAI,CAACA,IAAI;IACpB,IAAI,CAACvD,KAAK,CAACwD,UAAU,CAACD,IAAI,EAAE,IAAI,CAACxD,MAAM,CAAC,CAAC;;IAEzC;AACJ;AACA;IACI,IAAI,CAAC0D,eAAe,CAACD,UAAU,CAACD,IAAI,CAAC;;IAErC;IACAD,OAAO,CAACI,QAAQ,CAACC,KAAK,EAAE;IACxB;;IAEA;IACAL,OAAO,CAACI,QAAQ,CAACE,MAAM,CAAC,IAAI,CAAC9C,IAAI,CAACC,OAAO,EAAE,IAAI,CAAC8C,YAAY,CAAC;EAC/D;AAEF"},"metadata":{},"sourceType":"module"}