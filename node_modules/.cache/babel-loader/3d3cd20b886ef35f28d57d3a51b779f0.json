{"ast":null,"code":"var _dec, _class;\nimport { AParticleSystemModel } from \"../../../../anigraph/effects/particles/AParticleSystemModel\";\nimport { ASerializable, Color, GetAppState, V3 } from \"../../../../anigraph\";\nimport { AppConfigs } from \"../../../AppConfigs\";\nimport { BillboardParticle } from \"./BillboardParticle\";\nlet appState = GetAppState();\nexport let BillboardParticleSystemModel = (_dec = ASerializable(\"BillboardParticleSystemModel\"), _dec(_class = class BillboardParticleSystemModel extends AParticleSystemModel {\n  //particles:ABillboardParticle[]\n\n  /**\n   * This is an example of how you can add particle system controls to the control panel\n   * @constructor\n   */\n  static AddParticleSystemControls() {\n    appState.addSliderIfMissing(AppConfigs.VelocitySliderName, 0.5, 0, 1, 0.01);\n    appState.addSliderIfMissing(AppConfigs.GravitySliderName, 0.5, 0, 1, 0.01);\n    appState.addSliderIfMissing(AppConfigs.ForceStrengthSliderName, 0.5, 0, 1, 0.01);\n    appState.addSliderIfMissing(AppConfigs.ParticleMassSliderName, 1, 0, 100, 0.01);\n  }\n\n  /**\n   * This will emit a new particle. The starter implementation does this in a round-robin order, so it will recycle\n   * the particle that was emitted least recently.\n   * @param position\n   * @param velocity\n   * @param mass\n   * @param radius\n   * @param t0\n   */\n  emit(position, velocity, mass, radius) {\n    let t0 = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : -1;\n    let i = (this.lastEmittedIndex + 1) % this.nParticles;\n    this.particles[i].position = V3(Math.random() * 0.5, Math.random() - 0.5, Math.random());\n    this.particles[i].velocity = V3(Math.random() * 0.5, Math.random() - 0.5, Math.random()).times(0.1);\n    this.particles[i].mass = 3;\n    this.particles[i].size = 1;\n    this.particles[i].visible = true;\n    this.particles[i].t0 = t0;\n    this.particles[i].color = Color.Random();\n    this.lastEmittedIndex = i;\n  }\n\n  /**\n   * Here you initialize the particles\n   * @param nParticles\n   */\n  initParticles(nParticles) {\n    for (let i = 0; i < nParticles; i++) {\n      let newp = new BillboardParticle();\n\n      /**\n       * Here we will initialize the particles to be invisible.\n       * This won't do anything on its own, though; you will have to ensure that invisible particles are not visible in your corresponding custom view class.\n       */\n      newp.visible = false;\n\n      /**\n       * Let's add the particle...\n       */\n      this.addParticle(newp);\n    }\n  }\n  constructor(nParticles) {\n    super();\n    this.lastEmittedIndex = 0;\n    this.lastTimeUpdate = -1;\n    this.initParticles(nParticles !== null && nParticles !== void 0 ? nParticles : AppConfigs.MAX_PARTICLES);\n    this.signalParticlesUpdated();\n  }\n  timeUpdate(t) {\n    var _appState$getState, _appState$getState2;\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    super.timeUpdate(t, ...args);\n\n    /**\n     * This is one way to check and see if we are in our first timeUpdate call.\n     * We initialized this.lastTimeUpdate to -1, so if it is less than 0 we know it's our first time calling this function.\n     */\n    if (this.lastTimeUpdate < 0) {\n      this.lastTimeUpdate = t;\n    }\n    let timePassed = t - this.lastTimeUpdate;\n    this.lastTimeUpdate = t;\n\n    /**\n     * Let's emit a new particle\n     */\n    let particleSize = 1;\n    let startPosition = this.getWorldTransform().position;\n    let startSpeed = (_appState$getState = appState.getState(AppConfigs.ForceStrengthSliderName)) !== null && _appState$getState !== void 0 ? _appState$getState : 0.1;\n    let startVelocity = V3(Math.random() - 0.5, Math.random() - 0.5, 1.0).times(startSpeed);\n    let newParticleMass = (_appState$getState2 = appState.getState(AppConfigs.ParticleMassSliderName)) !== null && _appState$getState2 !== void 0 ? _appState$getState2 : 1;\n    this.emit(startPosition, startVelocity, newParticleMass, particleSize, t);\n\n    /**\n     * Here we will define some behavior for our particles. This is a bare minimum simple forward euler simulation.\n     */\n    for (let i = 0; i < this.particles.length; i++) {\n      let p = this.particles[i];\n      p.position = p.position.plus(p.velocity.times(appState.getState(AppConfigs.VelocitySliderName) * timePassed));\n    }\n\n    /**\n     * This is important! You need to signal that the particles have been updated to trigger re-rendering of the view!\n     */\n    this.signalParticlesUpdated();\n  }\n}) || _class);","map":{"version":3,"names":["AParticleSystemModel","ASerializable","Color","GetAppState","V3","AppConfigs","BillboardParticle","appState","BillboardParticleSystemModel","AddParticleSystemControls","addSliderIfMissing","VelocitySliderName","GravitySliderName","ForceStrengthSliderName","ParticleMassSliderName","emit","position","velocity","mass","radius","t0","i","lastEmittedIndex","nParticles","particles","Math","random","times","size","visible","color","Random","initParticles","newp","addParticle","constructor","lastTimeUpdate","MAX_PARTICLES","signalParticlesUpdated","timeUpdate","t","args","timePassed","particleSize","startPosition","getWorldTransform","startSpeed","getState","startVelocity","newParticleMass","length","p","plus"],"sources":["/Users/home/Desktop/cs4620-final-project/src/app/main/Nodes/BillboardParticleSystem/BillboardParticleSystemModel.ts"],"sourcesContent":["import {AParticleSystemModel} from \"../../../../anigraph/effects/particles/AParticleSystemModel\";\nimport {ASerializable, Color, GetAppState, V3, Vec3} from \"../../../../anigraph\";\nimport {AppConfigs} from \"../../../AppConfigs\";\nimport {BillboardParticle} from \"./BillboardParticle\";\n\n\nlet appState = GetAppState();\n\n@ASerializable(\"BillboardParticleSystemModel\")\nexport class BillboardParticleSystemModel extends AParticleSystemModel<BillboardParticle>{\n    //particles:ABillboardParticle[]\n    lastEmittedIndex:number=0;\n    lastTimeUpdate:number=-1;\n\n    /**\n     * This is an example of how you can add particle system controls to the control panel\n     * @constructor\n     */\n    static AddParticleSystemControls(){\n        appState.addSliderIfMissing(AppConfigs.VelocitySliderName, 0.5, 0,1,0.01);\n        appState.addSliderIfMissing(AppConfigs.GravitySliderName, 0.5, 0,1,0.01);\n        appState.addSliderIfMissing(AppConfigs.ForceStrengthSliderName, 0.5, 0,1,0.01);\n        appState.addSliderIfMissing(AppConfigs.ParticleMassSliderName, 1, 0,100,0.01);\n    }\n\n    /**\n     * This will emit a new particle. The starter implementation does this in a round-robin order, so it will recycle\n     * the particle that was emitted least recently.\n     * @param position\n     * @param velocity\n     * @param mass\n     * @param radius\n     * @param t0\n     */\n    emit(position:Vec3, velocity:Vec3, mass?:number, radius?:number, t0:number=-1){\n        let i=(this.lastEmittedIndex+1)%(this.nParticles);\n        this.particles[i].position = V3(Math.random()*0.5, Math.random()-0.5, Math.random());\n        this.particles[i].velocity = V3(Math.random()*0.5, Math.random()-0.5, Math.random()).times(0.1);\n        this.particles[i].mass = 3;\n        this.particles[i].size = 1;\n        this.particles[i].visible=true;\n        this.particles[i].t0=t0;\n        this.particles[i].color = Color.Random();\n        this.lastEmittedIndex=i;\n    }\n\n    /**\n     * Here you initialize the particles\n     * @param nParticles\n     */\n    initParticles(nParticles:number){\n        for(let i=0;i<nParticles;i++){\n            let newp = new BillboardParticle();\n\n            /**\n             * Here we will initialize the particles to be invisible.\n             * This won't do anything on its own, though; you will have to ensure that invisible particles are not visible in your corresponding custom view class.\n             */\n            newp.visible=false;\n\n            /**\n             * Let's add the particle...\n             */\n            this.addParticle(newp);\n        }\n    }\n\n    constructor(nParticles?:number, ...args:any[]) {\n        super();\n        this.initParticles(nParticles??AppConfigs.MAX_PARTICLES);\n        this.signalParticlesUpdated();\n    }\n\n    timeUpdate(t: number, ...args:any[]) {\n        super.timeUpdate(t, ...args);\n\n        /**\n         * This is one way to check and see if we are in our first timeUpdate call.\n         * We initialized this.lastTimeUpdate to -1, so if it is less than 0 we know it's our first time calling this function.\n         */\n        if(this.lastTimeUpdate<0){\n            this.lastTimeUpdate=t;\n        }\n\n        let timePassed = t-this.lastTimeUpdate;\n        this.lastTimeUpdate=t;\n\n        /**\n         * Let's emit a new particle\n         */\n        let particleSize = 1;\n        let startPosition = this.getWorldTransform().position;\n        let startSpeed = appState.getState(AppConfigs.ForceStrengthSliderName)??0.1;\n        let startVelocity = V3(Math.random()-0.5, Math.random()-0.5, 1.0).times(startSpeed);\n        let newParticleMass = appState.getState(AppConfigs.ParticleMassSliderName)??1;\n        this.emit(startPosition,\n            startVelocity,\n            newParticleMass,\n            particleSize,\n            t\n        );\n\n        /**\n         * Here we will define some behavior for our particles. This is a bare minimum simple forward euler simulation.\n         */\n        for(let i=0;i<this.particles.length;i++){\n            let p =this.particles[i];\n            p.position=p.position.plus(\n                p.velocity.times(\n                    appState.getState(AppConfigs.VelocitySliderName)*timePassed\n                )\n            );\n        }\n\n        /**\n         * This is important! You need to signal that the particles have been updated to trigger re-rendering of the view!\n         */\n        this.signalParticlesUpdated();\n    }\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}