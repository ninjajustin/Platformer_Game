{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nvar redux = function redux(reducer, initial) {\n  return function (set, get, api) {\n    api.dispatch = function (action) {\n      set(function (state) {\n        return reducer(state, action);\n      }, false, action);\n      return action;\n    };\n    api.dispatchFromDevtools = true;\n    return _extends({\n      dispatch: function dispatch() {\n        return api.dispatch.apply(api, arguments);\n      }\n    }, initial);\n  };\n};\nfunction devtools(fn, options) {\n  return function (set, get, api) {\n    var _serialize;\n    var didWarnAboutNameDeprecation = false;\n    if (typeof options === 'string' && !didWarnAboutNameDeprecation) {\n      console.warn('[zustand devtools middleware]: passing `name` as directly will be not allowed in next major' + 'pass the `name` in an object `{ name: ... }` instead');\n      didWarnAboutNameDeprecation = true;\n    }\n    var devtoolsOptions = options === undefined ? {\n      name: undefined,\n      anonymousActionType: undefined\n    } : typeof options === 'string' ? {\n      name: options\n    } : options;\n    if (typeof (devtoolsOptions == null ? void 0 : (_serialize = devtoolsOptions.serialize) == null ? void 0 : _serialize.options) !== 'undefined') {\n      console.warn('[zustand devtools middleware]: `serialize.options` is deprecated, just use `serialize`');\n    }\n    var extensionConnector;\n    try {\n      extensionConnector = window.__REDUX_DEVTOOLS_EXTENSION__ || window.top.__REDUX_DEVTOOLS_EXTENSION__;\n    } catch (_unused) {}\n    if (!extensionConnector) {\n      if (process.env.NODE_ENV !== \"production\" && typeof window !== 'undefined') {\n        console.warn('[zustand devtools middleware] Please install/enable Redux devtools extension');\n      }\n      return fn(set, get, api);\n    }\n    var extension = Object.create(extensionConnector.connect(devtoolsOptions));\n    var didWarnAboutDevtools = false;\n    Object.defineProperty(api, 'devtools', {\n      get: function get() {\n        if (!didWarnAboutDevtools) {\n          console.warn('[zustand devtools middleware] `devtools` property on the store is deprecated ' + 'it will be removed in the next major.\\n' + \"You shouldn't interact with the extension directly. But in case you still want to \" + 'you can patch `window.__REDUX_DEVTOOLS_EXTENSION__` directly');\n          didWarnAboutDevtools = true;\n        }\n        return extension;\n      },\n      set: function set(value) {\n        if (!didWarnAboutDevtools) {\n          console.warn('[zustand devtools middleware] `api.devtools` is deprecated, ' + 'it will be removed in the next major.\\n' + \"You shouldn't interact with the extension directly. But in case you still want to \" + 'you can patch `window.__REDUX_DEVTOOLS_EXTENSION__` directly');\n          didWarnAboutDevtools = true;\n        }\n        extension = value;\n      }\n    });\n    var didWarnAboutPrefix = false;\n    Object.defineProperty(extension, 'prefix', {\n      get: function get() {\n        if (!didWarnAboutPrefix) {\n          console.warn('[zustand devtools middleware] along with `api.devtools`, `api.devtools.prefix` is deprecated.\\n' + 'We no longer prefix the actions/names' + devtoolsOptions.name === undefined ? ', pass the `name` option to create a separate instance of devtools for each store.' : ', because the `name` option already creates a separate instance of devtools for each store.');\n          didWarnAboutPrefix = true;\n        }\n        return '';\n      },\n      set: function set() {\n        if (!didWarnAboutPrefix) {\n          console.warn('[zustand devtools middleware] along with `api.devtools`, `api.devtools.prefix` is deprecated.\\n' + 'We no longer prefix the actions/names' + devtoolsOptions.name === undefined ? ', pass the `name` option to create a separate instance of devtools for each store.' : ', because the `name` option already creates a separate instance of devtools for each store.');\n          didWarnAboutPrefix = true;\n        }\n      }\n    });\n    var isRecording = true;\n    api.setState = function (state, replace, nameOrAction) {\n      set(state, replace);\n      if (!isRecording) return;\n      extension.send(nameOrAction === undefined ? {\n        type: devtoolsOptions.anonymousActionType || 'anonymous'\n      } : typeof nameOrAction === 'string' ? {\n        type: nameOrAction\n      } : nameOrAction, get());\n    };\n    var setStateFromDevtools = function setStateFromDevtools() {\n      var originalIsRecording = isRecording;\n      isRecording = false;\n      set.apply(void 0, arguments);\n      isRecording = originalIsRecording;\n    };\n    var initialState = fn(api.setState, get, api);\n    extension.init(initialState);\n    if (api.dispatchFromDevtools && typeof api.dispatch === 'function') {\n      var didWarnAboutReservedActionType = false;\n      var originalDispatch = api.dispatch;\n      api.dispatch = function () {\n        for (var _len = arguments.length, a = new Array(_len), _key = 0; _key < _len; _key++) {\n          a[_key] = arguments[_key];\n        }\n        if (a[0].type === '__setState' && !didWarnAboutReservedActionType) {\n          console.warn('[zustand devtools middleware] \"__setState\" action type is reserved ' + 'to set state from the devtools. Avoid using it.');\n          didWarnAboutReservedActionType = true;\n        }\n        originalDispatch.apply(void 0, a);\n      };\n    }\n    extension.subscribe(function (message) {\n      switch (message.type) {\n        case 'ACTION':\n          if (typeof message.payload !== 'string') {\n            console.error('[zustand devtools middleware] Unsupported action format');\n            return;\n          }\n          return parseJsonThen(message.payload, function (action) {\n            if (action.type === '__setState') {\n              setStateFromDevtools(action.state);\n              return;\n            }\n            if (!api.dispatchFromDevtools) return;\n            if (typeof api.dispatch !== 'function') return;\n            api.dispatch(action);\n          });\n        case 'DISPATCH':\n          switch (message.payload.type) {\n            case 'RESET':\n              setStateFromDevtools(initialState);\n              return extension.init(api.getState());\n            case 'COMMIT':\n              return extension.init(api.getState());\n            case 'ROLLBACK':\n              return parseJsonThen(message.state, function (state) {\n                setStateFromDevtools(state);\n                extension.init(api.getState());\n              });\n            case 'JUMP_TO_STATE':\n            case 'JUMP_TO_ACTION':\n              return parseJsonThen(message.state, function (state) {\n                setStateFromDevtools(state);\n              });\n            case 'IMPORT_STATE':\n              {\n                var _nextLiftedState$comp;\n                var nextLiftedState = message.payload.nextLiftedState;\n                var lastComputedState = (_nextLiftedState$comp = nextLiftedState.computedStates.slice(-1)[0]) == null ? void 0 : _nextLiftedState$comp.state;\n                if (!lastComputedState) return;\n                setStateFromDevtools(lastComputedState);\n                extension.send(null, nextLiftedState);\n                return;\n              }\n            case 'PAUSE_RECORDING':\n              return isRecording = !isRecording;\n          }\n          return;\n      }\n    });\n    return initialState;\n  };\n}\nvar parseJsonThen = function parseJsonThen(stringified, f) {\n  var parsed;\n  try {\n    parsed = JSON.parse(stringified);\n  } catch (e) {\n    console.error('[zustand devtools middleware] Could not parse the received json', e);\n  }\n  if (parsed !== undefined) f(parsed);\n};\nvar subscribeWithSelector = function subscribeWithSelector(fn) {\n  return function (set, get, api) {\n    var origSubscribe = api.subscribe;\n    api.subscribe = function (selector, optListener, options) {\n      var listener = selector;\n      if (optListener) {\n        var equalityFn = (options == null ? void 0 : options.equalityFn) || Object.is;\n        var currentSlice = selector(api.getState());\n        listener = function listener(state) {\n          var nextSlice = selector(state);\n          if (!equalityFn(currentSlice, nextSlice)) {\n            var previousSlice = currentSlice;\n            optListener(currentSlice = nextSlice, previousSlice);\n          }\n        };\n        if (options != null && options.fireImmediately) {\n          optListener(currentSlice, currentSlice);\n        }\n      }\n      return origSubscribe(listener);\n    };\n    var initialState = fn(set, get, api);\n    return initialState;\n  };\n};\nvar combine = function combine(initialState, create) {\n  return function (set, get, api) {\n    return Object.assign({}, initialState, create(set, get, api));\n  };\n};\nvar toThenable = function toThenable(fn) {\n  return function (input) {\n    try {\n      var result = fn(input);\n      if (result instanceof Promise) {\n        return result;\n      }\n      return {\n        then: function then(onFulfilled) {\n          return toThenable(onFulfilled)(result);\n        },\n        catch: function _catch(_onRejected) {\n          return this;\n        }\n      };\n    } catch (e) {\n      return {\n        then: function then(_onFulfilled) {\n          return this;\n        },\n        catch: function _catch(onRejected) {\n          return toThenable(onRejected)(e);\n        }\n      };\n    }\n  };\n};\nvar persist = function persist(config, baseOptions) {\n  return function (set, get, api) {\n    var options = _extends({\n      getStorage: function getStorage() {\n        return localStorage;\n      },\n      serialize: JSON.stringify,\n      deserialize: JSON.parse,\n      partialize: function partialize(state) {\n        return state;\n      },\n      version: 0,\n      merge: function merge(persistedState, currentState) {\n        return _extends({}, currentState, persistedState);\n      }\n    }, baseOptions);\n    if (options.blacklist || options.whitelist) {\n      console.warn(\"The \" + (options.blacklist ? 'blacklist' : 'whitelist') + \" option is deprecated and will be removed in the next version. Please use the 'partialize' option instead.\");\n    }\n    var _hasHydrated = false;\n    var hydrationListeners = new Set();\n    var finishHydrationListeners = new Set();\n    var storage;\n    try {\n      storage = options.getStorage();\n    } catch (e) {}\n    if (!storage) {\n      return config(function () {\n        console.warn(\"[zustand persist middleware] Unable to update item '\" + options.name + \"', the given storage is currently unavailable.\");\n        set.apply(void 0, arguments);\n      }, get, api);\n    } else if (!storage.removeItem) {\n      console.warn(\"[zustand persist middleware] The given storage for item '\" + options.name + \"' does not contain a 'removeItem' method, which will be required in v4.\");\n    }\n    var thenableSerialize = toThenable(options.serialize);\n    var setItem = function setItem() {\n      var state = options.partialize(_extends({}, get()));\n      if (options.whitelist) {\n        Object.keys(state).forEach(function (key) {\n          var _options$whitelist;\n          !((_options$whitelist = options.whitelist) != null && _options$whitelist.includes(key)) && delete state[key];\n        });\n      }\n      if (options.blacklist) {\n        options.blacklist.forEach(function (key) {\n          return delete state[key];\n        });\n      }\n      var errorInSync;\n      var thenable = thenableSerialize({\n        state: state,\n        version: options.version\n      }).then(function (serializedValue) {\n        return storage.setItem(options.name, serializedValue);\n      }).catch(function (e) {\n        errorInSync = e;\n      });\n      if (errorInSync) {\n        throw errorInSync;\n      }\n      return thenable;\n    };\n    var savedSetState = api.setState;\n    api.setState = function (state, replace) {\n      savedSetState(state, replace);\n      void setItem();\n    };\n    var configResult = config(function () {\n      set.apply(void 0, arguments);\n      void setItem();\n    }, get, api);\n    var stateFromStorage;\n    var hydrate = function hydrate() {\n      if (!storage) return;\n      _hasHydrated = false;\n      hydrationListeners.forEach(function (cb) {\n        return cb(get());\n      });\n      var postRehydrationCallback = (options.onRehydrateStorage == null ? void 0 : options.onRehydrateStorage(get())) || undefined;\n      return toThenable(storage.getItem.bind(storage))(options.name).then(function (storageValue) {\n        if (storageValue) {\n          return options.deserialize(storageValue);\n        }\n      }).then(function (deserializedStorageValue) {\n        if (deserializedStorageValue) {\n          if (typeof deserializedStorageValue.version === 'number' && deserializedStorageValue.version !== options.version) {\n            if (options.migrate) {\n              return options.migrate(deserializedStorageValue.state, deserializedStorageValue.version);\n            }\n            console.error(\"State loaded from storage couldn't be migrated since no migrate function was provided\");\n          } else {\n            return deserializedStorageValue.state;\n          }\n        }\n      }).then(function (migratedState) {\n        var _get;\n        stateFromStorage = options.merge(migratedState, (_get = get()) != null ? _get : configResult);\n        set(stateFromStorage, true);\n        return setItem();\n      }).then(function () {\n        postRehydrationCallback == null ? void 0 : postRehydrationCallback(stateFromStorage, undefined);\n        _hasHydrated = true;\n        finishHydrationListeners.forEach(function (cb) {\n          return cb(stateFromStorage);\n        });\n      }).catch(function (e) {\n        postRehydrationCallback == null ? void 0 : postRehydrationCallback(undefined, e);\n      });\n    };\n    api.persist = {\n      setOptions: function setOptions(newOptions) {\n        options = _extends({}, options, newOptions);\n        if (newOptions.getStorage) {\n          storage = newOptions.getStorage();\n        }\n      },\n      clearStorage: function clearStorage() {\n        var _storage;\n        (_storage = storage) == null ? void 0 : _storage.removeItem == null ? void 0 : _storage.removeItem(options.name);\n      },\n      rehydrate: function rehydrate() {\n        return hydrate();\n      },\n      hasHydrated: function hasHydrated() {\n        return _hasHydrated;\n      },\n      onHydrate: function onHydrate(cb) {\n        hydrationListeners.add(cb);\n        return function () {\n          hydrationListeners.delete(cb);\n        };\n      },\n      onFinishHydration: function onFinishHydration(cb) {\n        finishHydrationListeners.add(cb);\n        return function () {\n          finishHydrationListeners.delete(cb);\n        };\n      }\n    };\n    hydrate();\n    return stateFromStorage || configResult;\n  };\n};\nexports.combine = combine;\nexports.devtools = devtools;\nexports.persist = persist;\nexports.redux = redux;\nexports.subscribeWithSelector = subscribeWithSelector;","map":null,"metadata":{},"sourceType":"script"}