{"ast":null,"code":"/**\n * @file Main scene model\n * @description Scene model for your application\n */\n\nimport { ACameraModel, Color, GetAppState, NodeTransform3D, V3, Vec2, Vec3 } from \"../../../anigraph\";\nimport { BaseSceneModel } from \"../../BaseClasses\";\nimport { ATexture } from \"src/anigraph/rendering/ATexture\";\nimport { TerrainModel } from \"../Nodes/Terrain\";\nimport { APointLightModel } from \"../../../anigraph/scene/lights\";\nimport { AppConfigs } from \"../../AppConfigs\";\nimport { PlayerModel } from \"../Nodes/PlayerNode\";\nimport { CharacterModel } from \"../../BaseClasses/CharacterModel\";\nimport { BotModel } from \"../Nodes/CharacterNodes/BotModel\";\nimport { ExampleThreeJSNodeModel } from \"../Nodes/ExampleNodes/ExampleThreeJSNode\";\nimport { ExampleParticleSystemModel } from \"../Nodes/ExampleNodes/ExampleParticleSystemNode/ExampleParticleSystemModel\";\nimport { SphereParticle } from \"../Nodes/ExampleNodes/ExampleParticleSystemNode/SphereParticle\";\nlet appState = GetAppState();\nexport class MainSceneModel extends BaseSceneModel {\n  constructor() {\n    super(...arguments);\n    this.terrain = void 0;\n    this._player = void 0;\n    this.playerTexture = void 0;\n    this.bots = [];\n  }\n  get player() {\n    return this._player;\n  }\n  set player(v) {\n    this._player = v;\n  }\n  async PreloadAssets() {\n    await super.PreloadAssets();\n    await TerrainModel.LoadShader();\n    await CharacterModel.LoadShader();\n    await ExampleParticleSystemModel.LoadShader();\n    // this.materials.setMaterialModel(\"textured\", await ABasicShaderModel.CreateModel(\"basic\"));\n  }\n\n  initCamera() {\n    this.cameraModel = ACameraModel.CreatePerspectiveFOV(90, 1, 0.01, 10);\n    this.cameraModel.setPose(NodeTransform3D.LookAt(V3(0.0, -AppConfigs.CameraDefaultHeight, AppConfigs.CameraDefaultHeight), V3(0, 0, 0), V3(0, 0, 1)));\n  }\n\n  /**\n   * The view light is a light that is attached to the camera.\n   */\n  initViewLight() {\n    /**\n     * Create a point light\n     * You can have up to 16 point lights in the scene at once by default\n     */\n    this.viewLight = new APointLightModel(this.camera.pose, Color.FromString(\"#ffffff\"), 0.5, AppConfigs.ViewLightRange, 1);\n\n    /**\n     * Add it as a child of the camera model so that it will move with the camera\n     */\n    this.cameraModel.addChild(this.viewLight);\n  }\n  async initTerrain() {\n    this.terrain = await TerrainModel.Create(AppConfigs.GroundTexture,\n    // texture\n    AppConfigs.TerrainScaleX,\n    // scaleX\n    AppConfigs.TerrainScaleY,\n    // scaleY\n    AppConfigs.TerrainDataTextureWidth,\n    // number of vertices wide\n    AppConfigs.TerrainDataTextureHeight,\n    // number of vertices tall\n    undefined,\n    // transform for terrain, identity if left blank\n    AppConfigs.TerrainWrapTextureX,\n    // number of times texture should wrap across surface in X\n    AppConfigs.TerrainWrapTextureY // number of times texture should wrap across surface in Y\n    );\n\n    this.addChild(this.terrain);\n  }\n  async initCharacters() {\n    /**\n     * First we will initialze the player and add it to the scene.\n     */\n    this.playerTexture = await ATexture.LoadAsync(\"./images/tanktexburngreen.jpeg\");\n    this.player = await PlayerModel.Create(this.playerTexture);\n    this.addChild(this.player);\n\n    /**\n     * Then we will create a bunch of bots with different cat faces...\n     * Let's make each one a child of the last.\n     */\n    let parent = this;\n    for (let e = 0; e < 6; e++) {\n      let bot = await BotModel.Create(`./images/catfaces/catface0${e + 1}.jpeg`);\n      bot.position = new Vec3((Math.random() - 0.5) * AppConfigs.TerrainScaleX, (Math.random() - 0.5) * AppConfigs.TerrainScaleY, 0);\n      bot.mass = 50;\n      this.bots.push(bot);\n      parent.addChild(bot);\n      parent = bot;\n    }\n  }\n  async initScene() {\n    await this.initTerrain();\n    await this.initCharacters();\n    this.addChild(new ExampleThreeJSNodeModel());\n\n    /**\n     * Now an example particle system.\n     */\n    let particles = new ExampleParticleSystemModel();\n    particles.orbitRadius = 0.3;\n    let radius = 0.05;\n    particles.addParticle(new SphereParticle(undefined, undefined, radius));\n    particles.addParticle(new SphereParticle(undefined, undefined, radius));\n    particles.addParticle(new SphereParticle(undefined, undefined, radius));\n\n    /**\n     * We will add the particle system to one of the bots for kicks...\n     */\n    this.bots[this.bots.length - 1].addChild(particles);\n\n    /**\n     * Now let's initialize the view light\n     */\n    this.initViewLight();\n  }\n  timeUpdate(t) {\n    /**\n     * We can call timeUpdate on all of the model nodes in the scene here, which will trigger any updates that they\n     * individually define.\n     */\n    for (let c of this.getDescendantList()) {\n      c.timeUpdate(t);\n    }\n\n    /**\n     * For interactions between models, we can trigger logic here. For example, if you want characters to walk on\n     * uneven terrain, you can make that happen by completing the functions used here:\n     */\n    const self = this;\n    function adjustHeight(character) {\n      let height = self.terrain.getTerrainHeightAtPoint(character.position.xy);\n      if (character.position.z < height) {\n        character.position.z = height;\n      }\n    }\n\n    /**\n     * Here we would apply our adjust height function to the player\n     */\n    adjustHeight(this.player);\n\n    /**\n     * Now lets update bots\n     */\n    let orbitradius = 0.25;\n    for (let ei = 0; ei < this.bots.length; ei++) {\n      let e = this.bots[ei];\n\n      /**\n       * Characters have velocity and mass properties in case you want to implement particle physics\n       * But for now we will just have them orbit each other.\n       */\n      e.position = new Vec3(Math.cos(t * (ei + 1)), Math.sin(t * (ei + 1)), 0).times(orbitradius);\n\n      /**\n       * adjust their height\n       */\n      adjustHeight(e);\n    }\n  }\n  getCoordinatesForCursorEvent(event) {\n    var _event$ndcCursor;\n    return (_event$ndcCursor = event.ndcCursor) !== null && _event$ndcCursor !== void 0 ? _event$ndcCursor : new Vec2();\n  }\n}","map":{"version":3,"names":["ACameraModel","Color","GetAppState","NodeTransform3D","V3","Vec2","Vec3","BaseSceneModel","ATexture","TerrainModel","APointLightModel","AppConfigs","PlayerModel","CharacterModel","BotModel","ExampleThreeJSNodeModel","ExampleParticleSystemModel","SphereParticle","appState","MainSceneModel","terrain","_player","playerTexture","bots","player","v","PreloadAssets","LoadShader","initCamera","cameraModel","CreatePerspectiveFOV","setPose","LookAt","CameraDefaultHeight","initViewLight","viewLight","camera","pose","FromString","ViewLightRange","addChild","initTerrain","Create","GroundTexture","TerrainScaleX","TerrainScaleY","TerrainDataTextureWidth","TerrainDataTextureHeight","undefined","TerrainWrapTextureX","TerrainWrapTextureY","initCharacters","LoadAsync","parent","e","bot","position","Math","random","mass","push","initScene","particles","orbitRadius","radius","addParticle","length","timeUpdate","t","c","getDescendantList","self","adjustHeight","character","height","getTerrainHeightAtPoint","xy","z","orbitradius","ei","cos","sin","times","getCoordinatesForCursorEvent","event","ndcCursor"],"sources":["/Users/home/Desktop/cs4620-final-project/src/app/main/Scene/MainSceneModel.ts"],"sourcesContent":["/**\n * @file Main scene model\n * @description Scene model for your application\n */\n\nimport {\n    ACameraModel,\n    AInteractionEvent, AModel, ANodeModel3D,\n    Color,\n    GetAppState,\n    NodeTransform3D, Quaternion,\n    V3,\n    Vec2, Vec3\n} from \"../../../anigraph\";\nimport {BaseSceneModel} from \"../../BaseClasses\";\nimport { ATexture } from \"src/anigraph/rendering/ATexture\";\nimport {TerrainModel} from \"../Nodes/Terrain\";\nimport {APointLightModel} from \"../../../anigraph/scene/lights\";\nimport {AppConfigs} from \"../../AppConfigs\";\nimport {PlayerModel} from \"../Nodes/PlayerNode\";\nimport {CharacterModel} from \"../../BaseClasses/CharacterModel\";\nimport {BotModel} from \"../Nodes/CharacterNodes/BotModel\";\nimport {ExampleThreeJSNodeModel} from \"../Nodes/ExampleNodes/ExampleThreeJSNode\";\nimport {ExampleParticleSystemModel} from \"../Nodes/ExampleNodes/ExampleParticleSystemNode/ExampleParticleSystemModel\";\nimport {SphereParticle} from \"../Nodes/ExampleNodes/ExampleParticleSystemNode/SphereParticle\";\nimport {Particle3D} from \"../../../anigraph/physics/AParticle3D\";\n\n\nlet appState = GetAppState();\nexport class MainSceneModel extends BaseSceneModel {\n    /**\n     * Our custom terrain model\n     */\n    terrain!:TerrainModel;\n\n    /**\n     * Our custom player model, and a texture to use for our player\n     */\n    _player!:CharacterModel;\n    get player():CharacterModel{\n        return this._player as CharacterModel;\n    }\n    set player(v:CharacterModel){\n        this._player = v;\n    }\n    playerTexture!:ATexture;\n\n    /**\n     * An array of bots. Your\n     */\n    bots:BotModel[]=[];\n\n\n    async PreloadAssets() {\n        await super.PreloadAssets();\n        await TerrainModel.LoadShader();\n        await CharacterModel.LoadShader();\n        await ExampleParticleSystemModel.LoadShader();\n        // this.materials.setMaterialModel(\"textured\", await ABasicShaderModel.CreateModel(\"basic\"));\n\n    }\n\n    initCamera() {\n        this.cameraModel = ACameraModel.CreatePerspectiveFOV(90, 1, 0.01, 10);\n        this.cameraModel.setPose(\n            NodeTransform3D.LookAt(\n                V3(0.0, -AppConfigs.CameraDefaultHeight, AppConfigs.CameraDefaultHeight), V3(0,0,0),\n                V3(0,0,1)\n            )\n        )\n    }\n\n    /**\n     * The view light is a light that is attached to the camera.\n     */\n    initViewLight(){\n\n        /**\n         * Create a point light\n         * You can have up to 16 point lights in the scene at once by default\n         */\n        this.viewLight = new APointLightModel(\n            this.camera.pose,\n            Color.FromString(\"#ffffff\"),\n            0.5,\n            AppConfigs.ViewLightRange,\n            1\n        );\n\n        /**\n         * Add it as a child of the camera model so that it will move with the camera\n         */\n        this.cameraModel.addChild(this.viewLight);\n    }\n\n    async initTerrain(){\n        this.terrain = await TerrainModel.Create(\n            AppConfigs.GroundTexture, // texture\n            AppConfigs.TerrainScaleX, // scaleX\n            AppConfigs.TerrainScaleY, // scaleY\n            AppConfigs.TerrainDataTextureWidth, // number of vertices wide\n            AppConfigs.TerrainDataTextureHeight, // number of vertices tall\n            undefined, // transform for terrain, identity if left blank\n            AppConfigs.TerrainWrapTextureX, // number of times texture should wrap across surface in X\n            AppConfigs.TerrainWrapTextureY, // number of times texture should wrap across surface in Y\n        );\n\n        this.addChild(this.terrain);\n    }\n\n\n\n    async initCharacters(){\n\n\n        /**\n         * First we will initialze the player and add it to the scene.\n         */\n        this.playerTexture = await ATexture.LoadAsync(\"./images/tanktexburngreen.jpeg\")\n        this.player = await PlayerModel.Create(this.playerTexture);\n        this.addChild(this.player);\n\n\n\n        /**\n         * Then we will create a bunch of bots with different cat faces...\n         * Let's make each one a child of the last.\n         */\n        let parent:AModel = this;\n        for(let e=0;e<6; e++) {\n            let bot = await BotModel.Create(`./images/catfaces/catface0${e + 1}.jpeg`);\n            bot.position = new Vec3((Math.random() - 0.5) * AppConfigs.TerrainScaleX, (Math.random() - 0.5) * AppConfigs.TerrainScaleY, 0);\n            bot.mass = 50;\n            this.bots.push(bot);\n            parent.addChild(bot);\n            parent = bot;\n        }\n    }\n\n\n    async initScene() {\n        await this.initTerrain();\n        await this.initCharacters();\n\n        this.addChild(new ExampleThreeJSNodeModel());\n\n        /**\n         * Now an example particle system.\n         */\n        let particles = new ExampleParticleSystemModel();\n        particles.orbitRadius = 0.3;\n        let radius = 0.05;\n        particles.addParticle(new SphereParticle(undefined, undefined, radius));\n        particles.addParticle(new SphereParticle(undefined, undefined, radius));\n        particles.addParticle(new SphereParticle(undefined, undefined, radius));\n\n        /**\n         * We will add the particle system to one of the bots for kicks...\n         */\n        this.bots[this.bots.length-1].addChild(particles);\n\n        /**\n         * Now let's initialize the view light\n         */\n        this.initViewLight();\n    }\n\n    timeUpdate(t: number, ...args:any[]) {\n\n        /**\n         * We can call timeUpdate on all of the model nodes in the scene here, which will trigger any updates that they\n         * individually define.\n         */\n        for(let c of this.getDescendantList()){\n            c.timeUpdate(t);\n        }\n\n        /**\n         * For interactions between models, we can trigger logic here. For example, if you want characters to walk on\n         * uneven terrain, you can make that happen by completing the functions used here:\n         */\n        const self = this;\n        function adjustHeight(character:Particle3D){\n            let height = self.terrain.getTerrainHeightAtPoint(character.position.xy);\n            if(character.position.z<height){character.position.z = height;}\n        }\n\n        /**\n         * Here we would apply our adjust height function to the player\n         */\n        adjustHeight(this.player);\n\n        /**\n         * Now lets update bots\n         */\n        let orbitradius = 0.25;\n        for(let ei=0;ei<this.bots.length;ei++){\n            let e = this.bots[ei];\n\n            /**\n             * Characters have velocity and mass properties in case you want to implement particle physics\n             * But for now we will just have them orbit each other.\n             */\n            e.position = new Vec3(Math.cos(t*(ei+1)), Math.sin(t*(ei+1)),0).times(orbitradius);\n\n            /**\n             * adjust their height\n             */\n            adjustHeight(e);\n        }\n    }\n\n    getCoordinatesForCursorEvent(event: AInteractionEvent){\n        return event.ndcCursor??new Vec2();\n    }\n}\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}