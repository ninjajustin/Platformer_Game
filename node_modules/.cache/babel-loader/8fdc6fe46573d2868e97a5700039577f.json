{"ast":null,"code":"/**\n * @file Main scene model\n * @description Scene model for your application\n */\n\nimport { ACameraModel, Color, GetAppState, NodeTransform3D, Quaternion, V3, Vec2, Vec3 } from \"../../../anigraph\";\nimport { BaseSceneModel } from \"../../BaseClasses\";\nimport { ATexture } from \"src/anigraph/rendering/ATexture\";\nimport { APointLightModel } from \"../../../anigraph/scene/lights\";\nimport { AppConfigs } from \"../../AppConfigs\";\nimport { PlayerModel } from \"../Nodes/PlayerNode\";\nimport { GameTerrainModel } from \"../Nodes/GameTerrain/GameTerrainModel\";\nimport { BillboardParticleSystemModel } from \"../Nodes/BillboardParticleSystem\";\nimport { EMPTY_LEVEL } from \"../../Backend/DefaultLevels\";\nimport { A3DModelLoader } from \"../../../anigraph\";\nimport { CharacterModel } from \"../../BaseClasses\";\nimport { ExampleLoadedCharacterModel } from \"../Nodes/Loaded/ExampleLoadedCharacterModel\";\nimport { AddStandardUniforms } from \"./HowToAddUniformToControlPanel\";\nimport { ABasicShaderModel } from \"src/anigraph/rendering/shadermodels/ABasicShaderModel\";\nlet appState = GetAppState();\nvar MyMaterialNames;\n(function (MyMaterialNames) {\n  MyMaterialNames[\"basicshader1\"] = \"basicshader1\";\n  MyMaterialNames[\"mymaterial2\"] = \"mymaterial2\";\n})(MyMaterialNames || (MyMaterialNames = {}));\nexport class MainSceneModel extends BaseSceneModel {\n  constructor() {\n    super(...arguments);\n    this.playerTexture = void 0;\n    this.bots = [];\n    this.gameTerrains = {};\n    this.lastTerrains = [];\n    this.currentLevel = EMPTY_LEVEL;\n    this.passedCheckpoints = 0;\n    this.lastT = void 0;\n    this.billboardParticles = [];\n    this.loaded3DModel = void 0;\n    this.playerMaterial = void 0;\n    this._player = void 0;\n    this._mesh = void 0;\n  }\n  get player() {\n    return this._player;\n  }\n  set player(v) {\n    this._player = v;\n  }\n  get mesh() {\n    return this._mesh;\n  }\n  set mesh(v) {\n    this._mesh = v;\n  }\n  async loadModelFromFile(path, transform) {\n    /**\n     * Here we need to load the .ply file into an AObject3DModelWrapper instance\n     */\n    let meshObject = await A3DModelLoader.LoadFromPath(path);\n    meshObject.sourceTransform = transform !== null && transform !== void 0 ? transform : new NodeTransform3D();\n    return meshObject;\n  }\n  async PreloadAssets() {\n    await super.PreloadAssets();\n    await GameTerrainModel.LoadShader();\n    await PlayerModel.LoadShader();\n    // this.materials.setMaterialModel(\"textured\", await ABasicShaderModel.CreateModel(\"basic\"));\n    await CharacterModel.LoadShader();\n    let basicshader1ShaderMaterialModel = await ABasicShaderModel.CreateModel(\"customexample1\");\n    await this.materials.setMaterialModel(MyMaterialNames.basicshader1, basicshader1ShaderMaterialModel);\n    basicshader1ShaderMaterialModel.usesVertexColors = true;\n    this.playerMaterial = this.materials.CreateShaderMaterial(MyMaterialNames.basicshader1);\n  }\n  initCamera() {\n    this.cameraModel = ACameraModel.CreatePerspectiveFOV(90, 1, 0.01, 10);\n    this.cameraModel.setPose(NodeTransform3D.LookAt(V3(0.0, 0, 5), V3(0, 0, 0), V3(0, 1, 0)));\n  }\n\n  /**\n   * The view light is a light that is attached to the camera.\n   */\n  initViewLight() {\n    if (this.viewLight) return;\n\n    /**\n     * Create a point light\n     * You can have up to 16 point lights in the scene at once by default\n     */\n    this.viewLight = new APointLightModel(this.camera.pose, Color.FromString(\"#ffffff\"), 0.5, AppConfigs.ViewLightRange, 1);\n\n    /**\n     * Add it as a child of the camera model so that it will move with the camera\n     */\n    this.cameraModel.addChild(this.viewLight);\n  }\n  async initGameTerrain() {\n    if (this.lastTerrains == this.gameTerrains[this.currentLevel.name]) return;\n    for (let t of this.lastTerrains) {\n      t.position.y -= 500;\n    }\n    if (this.gameTerrains[this.currentLevel.name]) {\n      this.lastTerrains = this.gameTerrains[this.currentLevel.name];\n      for (let t of this.lastTerrains) {\n        t.position.y += 500;\n      }\n    } else {\n      const t = [];\n      for (let [x1, y1, w, h] of this.currentLevel.terrains) {\n        let terrain = await GameTerrainModel.Create(w, h);\n        terrain.position.x = x1 + w / 2;\n        terrain.position.y = y1 + h / 2;\n        t.push(terrain);\n        this.addChild(terrain);\n      }\n      this.gameTerrains[this.currentLevel.name] = t;\n      this.lastTerrains = t;\n    }\n  }\n  async initGameHero() {\n    if (!this.player) {\n      this.playerTexture = await ATexture.LoadAsync(\"./images/tanktexburngreen.jpeg\");\n      this.player = await PlayerModel.Create(this.playerTexture);\n      this.addChild(this.player);\n    }\n    this.player.position = new Vec3(...this.currentLevel.player, 0);\n  }\n  async initModel(model, texture, scale, pos) {\n    let dir = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n    let transform = NodeTransform3D.FromPositionZUpAndScale(V3(pos), Vec3.UnitZ().times(1), Vec3.UnitY().times(-1), scale);\n    let direction = Quaternion.RotationY(Math.PI * dir);\n    let q = new Quaternion(1, 1, 1);\n    let sceneRotation = direction.multiplyQuaternions(q, direction);\n    transform._setQuaternionRotation(Quaternion.FromQuaternion(sceneRotation));\n    //transform._setQuaternionRotation();\n    const glb = await this.loadModelFromFile(model, transform);\n    const b = this.materials.CreateShaderMaterial(MyMaterialNames.basicshader1);\n    const d = await ATexture.LoadAsync(texture);\n    b.setTexture('diffuse', d);\n    const a = new ExampleLoadedCharacterModel(glb, b);\n    AddStandardUniforms(a.material);\n    this.addChild(a);\n  }\n  async initScene() {\n    await this.initGameTerrain();\n    await this.initGameHero();\n    await this.initParticles();\n\n    //add models\n    //cactus\n    await this.initModel(\"./models/gltf/cactus.glb\", \"./models/gltf/Cactus_diffuse.jpg\", 0.01, [2, 1, 0]);\n    await this.initModel(\"./models/gltf/cactus.glb\", \"./models/gltf/Cactus_diffuse.jpg\", 0.01, [8, 1, 0]);\n\n    //scorpion\n    await this.initModel(\"./models/gltf/scorpion.glb\", \"./models/gltf/Scorpion_diffuse1.jpg\", 0.1, [12, 1, 0]);\n    await this.initModel(\"./models/gltf/scorpion.glb\", \"./models/gltf/Scorpion_diffuse1.jpg\", 0.1, [6, 1, 0]);\n    await this.initModel(\"./models/gltf/scorpion.glb\", \"./models/gltf/Scorpion_diffuse1.jpg\", 0.1, [18, 1, 0]);\n    await this.initModel(\"./models/gltf/cat.glb\", \"./models/gltf/Cat_diffuse.jpg\", 0.04, [.5, 1, 0]);\n    await this.initModel(\"./models/gltf/scorpion.glb\", \"./models/gltf/Scorpion_diffuse1.jpg\", 0.05, [0, 1, 0]);\n    await this.initModel(\"./models/gltf/snake.glb\", \"./models/gltf/Snake_diffuse.jpg\", 0.01, [1, 1, 0]);\n    await this.initModel(\"./models/gltf/cactus.glb\", \"./models/gltf/Cactus_diffuse.jpg\", 0.005, [2, 1, 0]);\n    await this.initModel(\"./models/gltf/cactus.glb\", \"./models/gltf/Cactus_diffuse.jpg\", 0.005, [-2, 1, 0]);\n    await this.initModel(\"./models/gltf/cat.glb\", \"./models/gltf/cat_diffuse.jpg\", 0.04, [0, 1, 0]);\n    await this.initModel(\"./models/gltf/skull.glb\", \"./models/gltf/skull_diffuse.jpg\", 0.01, [-1, 1, 0]);\n    await this.initModel(\"./models/gltf/tumbleweed.glb\", \"./models/gltf/Tumbleweed_diffuse.jpg\", 0.1, [2, 1, 0]);\n    await this.initModel(\"./models/gltf/cactus.glb\", \"./models/gltf/Cactus_diffuse.jpg\", 0.004, [-2.1, 1, 0]);\n    await this.initModel(\"./models/gltf/cactus.glb\", \"./models/gltf/Cactus_diffuse.jpg\", 0.006, [-1.9, 1, 0]);\n    await this.initModel(\"./models/gltf/cactus.glb\", \"./models/gltf/Cactus_diffuse.jpg\", 0.006, [2, 1, 0]);\n    await this.initModel(\"./models/gltf/dragon.glb\", \"./models/gltf/Dragon_diffuse.jpg\", 0.02, [1.7, 1, 0]);\n    await this.initModel(\"./models/gltf/turtle.glb\", \"./models/gltf/Turtle_diffuse.jpg\", 0.01, [1.3, 1, 0]);\n    await this.initModel(\"./models/gltf/palm_tree.glb\", \"./models/gltf/Palm_tree_diffuse.jpg\", 0.003, [.5, 1, 0]);\n    this.passedCheckpoints = 0;\n\n    /**\n     * Now let's initialize the view light\n     */\n    this.initViewLight();\n  }\n  async initParticles() {\n    // BillboardParticleSystemModel.AddParticleSystemControls();\n    const targetLength = this.currentLevel.fires.length;\n    for (let i = this.billboardParticles.length; i < targetLength; i++) {\n      const bp = new BillboardParticleSystemModel(new NodeTransform3D(V3(0, -100, 0)));\n      bp.setDisable();\n      this.billboardParticles.push(bp);\n    }\n    for (let i = 0, j = targetLength; i < j; i++) {\n      const bp = this.billboardParticles[i];\n      bp.myTransform.position = V3(this.currentLevel.fires[i][0] + .5, this.currentLevel.fires[i][1], 0);\n    }\n  }\n  async updateLevel(level) {\n    this.currentLevel = level;\n    await this.initScene();\n  }\n  timeUpdate(t) {\n    let paused = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    /**\n     * We can call timeUpdate on all of the model nodes in the scene here, which will trigger any updates that they\n     * individually define.\n     */\n    for (let c of this.getDescendantList()) {\n      c.timeUpdate(t);\n    }\n    if (!paused) {\n      this.player.update(t - this.lastT, this.gameTerrains[this.currentLevel.name] || []);\n      if (this.player.position.y < -10 || t <= 0.5) {\n        this.player.position = new Vec3(...(this.passedCheckpoints === 0 ? this.currentLevel.player : this.currentLevel.checkpoints[this.passedCheckpoints - 1][1]), 0);\n        this.player.velocity = new Vec3();\n        const playerPos = this.player.position;\n        const cameraPos = playerPos.clone();\n        cameraPos.z = 10;\n        this.cameraModel.setPose(NodeTransform3D.LookAt(cameraPos, playerPos, new Vec3(0, 1, 0)));\n      }\n      const playerUpper = this.player.position.y + this.player.size / 2;\n      const playerLower = this.player.position.y - this.player.size / 2;\n      const playerLeft = this.player.position.x - this.player.size / 2;\n      const playerRight = this.player.position.x + this.player.size / 2;\n      for (let i = 0, j = this.currentLevel.fires.length; i < j; i++) {\n        const [x, y] = this.currentLevel.fires[i];\n        const p = this.billboardParticles[i];\n        if (x < playerLeft - 10 || x > playerRight + 10 || y < playerLower - 10 || y > playerUpper + 10) {\n          if (!p.disabled) {\n            var _p$parent;\n            p.setDisable();\n            p.myTransform.position = V3(0, -999, 0);\n            (_p$parent = p.parent) === null || _p$parent === void 0 ? void 0 : _p$parent.removeChild(p);\n          }\n          continue;\n        } else {\n          if (p.disabled) {\n            p.disabled = false;\n            p.myTransform.position = V3(x + .5, y, 0);\n            this.addChild(p);\n          }\n        }\n        if ((playerLower < y + .8 && playerLower > y + .2 || playerUpper > y + .2 && playerUpper < y + .8 || playerLower < y + .2 && playerUpper > y + .8) && (playerLeft < x + .8 && playerLeft > x + .2 || playerRight > x + .2 && playerRight < x + .8 || playerLeft < x + .2 && playerRight > x + .8)) {\n          this.player.position = new Vec3(...(this.passedCheckpoints === 0 ? this.currentLevel.player : this.currentLevel.checkpoints[this.passedCheckpoints - 1][1]), 0);\n          this.player.velocity = new Vec3();\n        }\n      }\n      for (let i = this.passedCheckpoints, j = this.currentLevel.checkpoints.length; i < j; i++) {\n        if (Math.abs(this.player.velocity.y) < 0.01 && this.player.position.x >= this.currentLevel.checkpoints[i][0]) {\n          this.passedCheckpoints = Math.max(i + 1, this.passedCheckpoints);\n        }\n      }\n      if (Math.abs(this.cameraModel.pose.position.x - this.player.position.x) >= 0.01 || Math.abs(this.cameraModel.pose.position.y - this.player.position.y) >= 0.01) {\n        const cameraPos = this.cameraModel.pose.position.clone();\n        const playerPos = this.player.position.clone();\n        const playerVel = this.player.velocity.clone();\n        // higher gravity will look like player falling down harder\n        const g = AppConfigs.Gravity > 10 ? (AppConfigs.Gravity - 10) / 10 : 0;\n        playerVel.y = playerVel.y < g * playerVel.y ? 0 : playerVel.y;\n        // rate of camera movement, with 1 being camera on player at all times\n        const rate = this.cameraModel.pose.position.y < this.player.position.y ? 0.04 : 0.05;\n        // 1.5 is how much screen moves with player\n        const velocityCamera = cameraPos.clone().plus(playerVel.clone().times(1.5));\n        const new_camera_pos = velocityCamera.clone().plus(playerPos.clone().minus(velocityCamera).times(rate));\n        new_camera_pos.z = 10;\n        const new_target_pos = new_camera_pos.clone();\n        new_target_pos.z = 0;\n        this.cameraModel.setPose(NodeTransform3D.LookAt(new_camera_pos, new_target_pos, new Vec3(0, 1, 0)));\n      }\n      this.cameraModel.signalCameraProjectionUpdate();\n    }\n    this.lastT = t;\n\n    // /**\n    //  * For interactions between models, we can trigger logic here. For example, if you want characters to walk on\n    //  * uneven terrain, you can make that happen by completing the functions used here:\n    //  */\n    // const self = this;\n    // function adjustHeight(character:Particle3D){\n    //     let height = self.terrain.getTerrainHeightAtPoint(character.position.xy);\n    //     if(character.position.z<height){character.position.z = height;}\n    // }\n    //\n    // /**\n    //  * Here we would apply our adjust height function to the player\n    //  */\n    // adjustHeight(this.player);\n    //\n    // /**\n    //  * Now lets update bots\n    //  */\n    // let orbitradius = 0.25;\n    // for(let ei=0;ei<this.bots.length;ei++){\n    //     let e = this.bots[ei];\n    //\n    //     /**\n    //      * Characters have velocity and mass properties in case you want to implement particle physics\n    //      * But for now we will just have them orbit each other.\n    //      */\n    //     e.position = new Vec3(Math.cos(t*(ei+1)), Math.sin(t*(ei+1)),0).times(orbitradius);\n    //\n    //     /**\n    //      * adjust their height\n    //      */\n    //     adjustHeight(e);\n    // }\n  }\n\n  getCoordinatesForCursorEvent(event) {\n    var _event$ndcCursor;\n    return (_event$ndcCursor = event.ndcCursor) !== null && _event$ndcCursor !== void 0 ? _event$ndcCursor : new Vec2();\n  }\n}","map":{"version":3,"names":["ACameraModel","Color","GetAppState","NodeTransform3D","Quaternion","V3","Vec2","Vec3","BaseSceneModel","ATexture","APointLightModel","AppConfigs","PlayerModel","GameTerrainModel","BillboardParticleSystemModel","EMPTY_LEVEL","A3DModelLoader","CharacterModel","ExampleLoadedCharacterModel","AddStandardUniforms","ABasicShaderModel","appState","MyMaterialNames","MainSceneModel","playerTexture","bots","gameTerrains","lastTerrains","currentLevel","passedCheckpoints","lastT","billboardParticles","loaded3DModel","playerMaterial","_player","_mesh","player","v","mesh","loadModelFromFile","path","transform","meshObject","LoadFromPath","sourceTransform","PreloadAssets","LoadShader","basicshader1ShaderMaterialModel","CreateModel","materials","setMaterialModel","basicshader1","usesVertexColors","CreateShaderMaterial","initCamera","cameraModel","CreatePerspectiveFOV","setPose","LookAt","initViewLight","viewLight","camera","pose","FromString","ViewLightRange","addChild","initGameTerrain","name","t","position","y","x1","y1","w","h","terrains","terrain","Create","x","push","initGameHero","LoadAsync","initModel","model","texture","scale","pos","dir","FromPositionZUpAndScale","UnitZ","times","UnitY","direction","RotationY","Math","PI","q","sceneRotation","multiplyQuaternions","_setQuaternionRotation","FromQuaternion","glb","b","d","setTexture","a","material","initScene","initParticles","targetLength","fires","length","i","bp","setDisable","j","myTransform","updateLevel","level","timeUpdate","paused","c","getDescendantList","update","checkpoints","velocity","playerPos","cameraPos","clone","z","playerUpper","size","playerLower","playerLeft","playerRight","p","disabled","parent","removeChild","abs","max","playerVel","g","Gravity","rate","velocityCamera","plus","new_camera_pos","minus","new_target_pos","signalCameraProjectionUpdate","getCoordinatesForCursorEvent","event","ndcCursor"],"sources":["/Users/home/Desktop/cs4620-final-project/src/app/main/Scene/MainSceneModel.ts"],"sourcesContent":["/**\n * @file Main scene model\n * @description Scene model for your application\n */\n\nimport {ACameraModel, AInteractionEvent, Color, GetAppState, NodeTransform3D, Quaternion, V3, Vec2, Vec3} from \"../../../anigraph\";\nimport {BaseSceneModel} from \"../../BaseClasses\";\nimport {ATexture} from \"src/anigraph/rendering/ATexture\";\nimport {APointLightModel} from \"../../../anigraph/scene/lights\";\nimport {AppConfigs} from \"../../AppConfigs\";\nimport {PlayerModel} from \"../Nodes/PlayerNode\";\nimport {BotModel} from \"../Nodes/CharacterNodes/BotModel\";\nimport {GameTerrainModel} from \"../Nodes/GameTerrain/GameTerrainModel\";\nimport {BillboardParticleSystemModel} from \"../Nodes/BillboardParticleSystem\";\nimport {LevelDefinition} from \"../../Backend/Level\";\nimport {EMPTY_LEVEL} from \"../../Backend/DefaultLevels\";\nimport playerBlock from \"../Editor/PlayerBlock\";\nimport { A3DModelLoader, AObject3DModelWrapper, AShaderMaterial } from \"../../../anigraph\";\nimport { CharacterModel, CharacterModelInterface } from \"../../BaseClasses\";\nimport { ExampleLoadedCharacterModel } from \"../Nodes/Loaded/ExampleLoadedCharacterModel\";\nimport { AddStandardUniforms } from \"./HowToAddUniformToControlPanel\";\nimport { LoadedCharacterModel } from \"src/app/BaseClasses/LoadedCharacterModel\";\nimport { ABasicShaderModel } from \"src/anigraph/rendering/shadermodels/ABasicShaderModel\";\n\nlet appState = GetAppState();\n\nenum MyMaterialNames {\n  basicshader1 = \"basicshader1\",\n  mymaterial2 = \"mymaterial2\",\n}\n\nexport class MainSceneModel extends BaseSceneModel {\n  playerTexture!: ATexture;\n  /**\n   * An array of bots. Your\n   */\n  bots: BotModel[] = [];\n  gameTerrains: { [name: string]: GameTerrainModel[] } = {};\n  lastTerrains: GameTerrainModel[] = [];\n  currentLevel: LevelDefinition = EMPTY_LEVEL;\n  passedCheckpoints: number = 0;\n  private lastT: number;\n  billboardParticles:BillboardParticleSystemModel[] = [];\n  loaded3DModel!: AObject3DModelWrapper;\n  playerMaterial!: AShaderMaterial;\n\n  /**\n   * Our custom player model, and a texture to use for our player\n   */\n  _player!: PlayerModel;\n\n  get player(): PlayerModel {\n    return this._player as PlayerModel;\n  }\n\n  set player(v: PlayerModel) {\n    this._player = v;\n  }\n\n  _mesh!: CharacterModelInterface;\n  get mesh(): CharacterModelInterface {\n    return this._mesh as LoadedCharacterModel;\n  }\n  set mesh(v: CharacterModelInterface) {\n    this._mesh = v;\n  }\n\n  async loadModelFromFile(path: string, transform?: NodeTransform3D) {\n    /**\n     * Here we need to load the .ply file into an AObject3DModelWrapper instance\n     */\n    let meshObject = await A3DModelLoader.LoadFromPath(path)\n    meshObject.sourceTransform = transform ?? new NodeTransform3D();\n    return meshObject;\n  }\n\n  async PreloadAssets() {\n    await super.PreloadAssets();\n    await GameTerrainModel.LoadShader();\n    await PlayerModel.LoadShader();\n    // this.materials.setMaterialModel(\"textured\", await ABasicShaderModel.CreateModel(\"basic\"));\n    await CharacterModel.LoadShader();\n    let basicshader1ShaderMaterialModel = await ABasicShaderModel.CreateModel(\"customexample1\");\n    await this.materials.setMaterialModel(MyMaterialNames.basicshader1, basicshader1ShaderMaterialModel);\n    basicshader1ShaderMaterialModel.usesVertexColors = true;\n    this.playerMaterial = this.materials.CreateShaderMaterial(MyMaterialNames.basicshader1);\n\n  }\n\n  initCamera() {\n    this.cameraModel = ACameraModel.CreatePerspectiveFOV(90, 1, 0.01, 10);\n    this.cameraModel.setPose(\n      NodeTransform3D.LookAt(\n        V3(0.0, 0, 5), V3(0, 0, 0),\n        V3(0, 1, 0)\n      )\n    )\n  }\n\n  /**\n   * The view light is a light that is attached to the camera.\n   */\n  initViewLight() {\n\n    if (this.viewLight) return;\n\n    /**\n     * Create a point light\n     * You can have up to 16 point lights in the scene at once by default\n     */\n    this.viewLight = new APointLightModel(\n      this.camera.pose,\n      Color.FromString(\"#ffffff\"),\n      0.5,\n      AppConfigs.ViewLightRange,\n      1\n    );\n\n    /**\n     * Add it as a child of the camera model so that it will move with the camera\n     */\n    this.cameraModel.addChild(this.viewLight);\n  }\n\n  async initGameTerrain() {\n    if (this.lastTerrains == this.gameTerrains[this.currentLevel.name])\n      return;\n    for (let t of this.lastTerrains) {\n      t.position.y -= 500;\n    }\n    if (this.gameTerrains[this.currentLevel.name]) {\n      this.lastTerrains = this.gameTerrains[this.currentLevel.name];\n      for (let t of this.lastTerrains) {\n        t.position.y += 500;\n      }\n    } else {\n      const t = [];\n      for (let [x1, y1, w, h] of this.currentLevel.terrains) {\n        let terrain = await GameTerrainModel.Create(w, h);\n        terrain.position.x = x1 + w / 2;\n        terrain.position.y = y1 + h / 2;\n        t.push(terrain);\n        this.addChild(terrain);\n      }\n      this.gameTerrains[this.currentLevel.name] = t;\n      this.lastTerrains = t;\n    }\n  }\n\n  async initGameHero() {\n    if (!this.player) {\n      this.playerTexture = await ATexture.LoadAsync(\"./images/tanktexburngreen.jpeg\")\n      this.player = await PlayerModel.Create(this.playerTexture);\n      this.addChild(this.player);\n    }\n    this.player.position = new Vec3(...this.currentLevel.player, 0);\n  }\n\n  async initModel(model: string, texture: string, scale: number, pos: Array<number>, dir: number=0) {\n    let transform = NodeTransform3D.FromPositionZUpAndScale(V3(pos), Vec3.UnitZ().times(1), Vec3.UnitY().times(-1), scale);\n    let direction = Quaternion.RotationY(Math.PI * dir);\n    let q = new Quaternion(1, 1, 1)\n    let sceneRotation = direction.multiplyQuaternions(q, direction);\n    transform._setQuaternionRotation(Quaternion.FromQuaternion(sceneRotation));\n    //transform._setQuaternionRotation();\n    const glb = await this.loadModelFromFile(model, transform);\n\n    const b = this.materials.CreateShaderMaterial(MyMaterialNames.basicshader1);\n    const d = await ATexture.LoadAsync(texture);\n\n    b.setTexture('diffuse', d)\n    const a = new ExampleLoadedCharacterModel(\n      glb,\n      b\n    );\n    AddStandardUniforms(a.material);\n    this.addChild(a);\n  }\n\n  async initScene() {\n    await this.initGameTerrain();\n    await this.initGameHero();\n    await this.initParticles();\n\n    //add models\n    //cactus\n    await this.initModel(\"./models/gltf/cactus.glb\", \"./models/gltf/Cactus_diffuse.jpg\", 0.01, [2, 1, 0]);\n    await this.initModel(\"./models/gltf/cactus.glb\", \"./models/gltf/Cactus_diffuse.jpg\", 0.01, [8, 1, 0]);\n\n    //scorpion\n    await this.initModel(\"./models/gltf/scorpion.glb\", \"./models/gltf/Scorpion_diffuse1.jpg\", 0.1, [12, 1, 0]);\n    await this.initModel(\"./models/gltf/scorpion.glb\", \"./models/gltf/Scorpion_diffuse1.jpg\", 0.1, [6, 1, 0]);\n    await this.initModel(\"./models/gltf/scorpion.glb\", \"./models/gltf/Scorpion_diffuse1.jpg\", 0.1, [18, 1, 0]);\n\n    await this.initModel(\"./models/gltf/cat.glb\", \"./models/gltf/Cat_diffuse.jpg\", 0.04, [.5, 1, 0]);\n    await this.initModel(\"./models/gltf/scorpion.glb\", \"./models/gltf/Scorpion_diffuse1.jpg\", 0.05, [0, 1, 0]);\n    await this.initModel(\"./models/gltf/snake.glb\", \"./models/gltf/Snake_diffuse.jpg\", 0.01, [1, 1, 0]);\n    await this.initModel(\"./models/gltf/cactus.glb\", \"./models/gltf/Cactus_diffuse.jpg\", 0.005, [2, 1, 0]);\n    await this.initModel(\"./models/gltf/cactus.glb\", \"./models/gltf/Cactus_diffuse.jpg\", 0.005, [-2, 1, 0]);\n    await this.initModel(\"./models/gltf/cat.glb\", \"./models/gltf/cat_diffuse.jpg\", 0.04, [0, 1, 0]);\n    await this.initModel(\"./models/gltf/skull.glb\", \"./models/gltf/skull_diffuse.jpg\", 0.01, [-1, 1, 0]);\n    await this.initModel(\"./models/gltf/tumbleweed.glb\", \"./models/gltf/Tumbleweed_diffuse.jpg\", 0.1, [2, 1, 0]);\n    await this.initModel(\"./models/gltf/cactus.glb\", \"./models/gltf/Cactus_diffuse.jpg\", 0.004, [-2.1, 1, 0]);\n    await this.initModel(\"./models/gltf/cactus.glb\", \"./models/gltf/Cactus_diffuse.jpg\", 0.006, [-1.9, 1, 0]);\n    await this.initModel(\"./models/gltf/cactus.glb\", \"./models/gltf/Cactus_diffuse.jpg\", 0.006, [2, 1, 0]);\n    await this.initModel(\"./models/gltf/dragon.glb\", \"./models/gltf/Dragon_diffuse.jpg\", 0.02, [1.7, 1, 0]);\n    await this.initModel(\"./models/gltf/turtle.glb\", \"./models/gltf/Turtle_diffuse.jpg\", 0.01, [1.3, 1, 0]);\n    await this.initModel(\"./models/gltf/palm_tree.glb\", \"./models/gltf/Palm_tree_diffuse.jpg\", 0.003, [.5, 1, 0]);\n    this.passedCheckpoints = 0;\n\n    /**\n     * Now let's initialize the view light\n     */\n    this.initViewLight();\n  }\n\n    async initParticles() {\n        // BillboardParticleSystemModel.AddParticleSystemControls();\n      const targetLength = this.currentLevel.fires.length;\n      for (let i = this.billboardParticles.length; i < targetLength; i++) {\n        const bp = new BillboardParticleSystemModel(new NodeTransform3D(V3(0, -100, 0)));\n        bp.setDisable();\n        this.billboardParticles.push(bp);\n      }\n      for (let i = 0, j = targetLength; i < j; i++) {\n        const bp = this.billboardParticles[i];\n        bp.myTransform.position = V3(this.currentLevel.fires[i][0] + .5, this.currentLevel.fires[i][1], 0);\n      }\n    }\n\n  async updateLevel(level: LevelDefinition) {\n    this.currentLevel = level;\n    await this.initScene();\n  }\n\n    timeUpdate(t: number, paused: boolean = false, ...args:any[]) {\n      /**\n       * We can call timeUpdate on all of the model nodes in the scene here, which will trigger any updates that they\n       * individually define.\n       */\n      for (let c of this.getDescendantList()) {\n        c.timeUpdate(t);\n      }\n\n      if (!paused) {\n        this.player.update(t - this.lastT, this.gameTerrains[this.currentLevel.name] || []);\n\n        if (this.player.position.y < -10 || t <= 0.5) {\n          this.player.position = new Vec3(...(\n            this.passedCheckpoints === 0 ? this.currentLevel.player : this.currentLevel.checkpoints[this.passedCheckpoints - 1][1]\n          ), 0);\n          this.player.velocity = new Vec3();\n          const playerPos = this.player.position;\n          const cameraPos = playerPos.clone();\n          cameraPos.z = 10;\n          this.cameraModel.setPose(\n            NodeTransform3D.LookAt(\n              cameraPos, playerPos,\n              new Vec3(0, 1, 0)\n            )\n          );\n        }\n\n        const playerUpper = this.player.position.y + this.player.size / 2;\n        const playerLower = this.player.position.y - this.player.size / 2;\n        const playerLeft = this.player.position.x - this.player.size / 2;\n        const playerRight = this.player.position.x + this.player.size / 2;\n        for (let i = 0, j = this.currentLevel.fires.length; i < j; i++) {\n          const [x, y] = this.currentLevel.fires[i];\n          const p = this.billboardParticles[i];\n          if (x < playerLeft - 10 || x > playerRight + 10 || y < playerLower - 10 || y > playerUpper + 10) {\n            if (!p.disabled) {\n              p.setDisable();\n              p.myTransform.position = V3(0, -999, 0);\n              p.parent?.removeChild(p);\n            }\n            continue;\n          } else {\n            if (p.disabled) {\n              p.disabled = false;\n              p.myTransform.position = V3(x + .5, y, 0);\n              this.addChild(p);\n            }\n          }\n          if (((playerLower < y + .8 && playerLower > y + .2) ||\n            (playerUpper > y + .2 && playerUpper < y + .8) ||\n              (playerLower < y + .2 && playerUpper > y + .8)) &&\n            ((playerLeft < x + .8 && playerLeft > x + .2) ||\n              (playerRight > x + .2 && playerRight < x + .8) ||\n              (playerLeft < x + .2 && playerRight > x + .8))) {\n            this.player.position = new Vec3(...(\n              this.passedCheckpoints === 0 ? this.currentLevel.player : this.currentLevel.checkpoints[this.passedCheckpoints - 1][1]\n            ), 0);\n            this.player.velocity = new Vec3();\n          }\n        }\n\n        for (let i = this.passedCheckpoints, j = this.currentLevel.checkpoints.length; i < j; i++) {\n          if (Math.abs(this.player.velocity.y) < 0.01 && this.player.position.x >= this.currentLevel.checkpoints[i][0]) {\n            this.passedCheckpoints = Math.max(i + 1, this.passedCheckpoints);\n          }\n        }\n\n        if (Math.abs(this.cameraModel.pose.position.x - this.player.position.x) >= 0.01 ||\n          Math.abs(this.cameraModel.pose.position.y - this.player.position.y) >= 0.01) {\n\n          const cameraPos = this.cameraModel.pose.position.clone()\n          const playerPos = this.player.position.clone();\n          const playerVel = this.player.velocity.clone();\n          // higher gravity will look like player falling down harder\n          const g = AppConfigs.Gravity > 10 ? (AppConfigs.Gravity - 10) / 10 : 0\n          playerVel.y = playerVel.y < g * playerVel.y ? 0 : playerVel.y\n          // rate of camera movement, with 1 being camera on player at all times\n          const rate = (this.cameraModel.pose.position.y < this.player.position.y ? 0.04 : 0.05);\n          // 1.5 is how much screen moves with player\n          const velocityCamera = cameraPos.clone().plus(playerVel.clone().times(1.5))\n          const new_camera_pos = velocityCamera.clone().plus(playerPos.clone().minus(velocityCamera).times(rate))\n          new_camera_pos.z = 10;\n\n          const new_target_pos = new_camera_pos.clone()\n          new_target_pos.z = 0;\n\n          this.cameraModel.setPose(\n            NodeTransform3D.LookAt(\n              new_camera_pos, new_target_pos,\n              new Vec3(0, 1, 0)\n            )\n          );\n        }\n        this.cameraModel.signalCameraProjectionUpdate();\n      }\n\n      this.lastT = t;\n\n\n        // /**\n        //  * For interactions between models, we can trigger logic here. For example, if you want characters to walk on\n        //  * uneven terrain, you can make that happen by completing the functions used here:\n        //  */\n        // const self = this;\n        // function adjustHeight(character:Particle3D){\n        //     let height = self.terrain.getTerrainHeightAtPoint(character.position.xy);\n        //     if(character.position.z<height){character.position.z = height;}\n        // }\n        //\n        // /**\n        //  * Here we would apply our adjust height function to the player\n        //  */\n        // adjustHeight(this.player);\n        //\n        // /**\n        //  * Now lets update bots\n        //  */\n        // let orbitradius = 0.25;\n        // for(let ei=0;ei<this.bots.length;ei++){\n        //     let e = this.bots[ei];\n        //\n        //     /**\n        //      * Characters have velocity and mass properties in case you want to implement particle physics\n        //      * But for now we will just have them orbit each other.\n        //      */\n        //     e.position = new Vec3(Math.cos(t*(ei+1)), Math.sin(t*(ei+1)),0).times(orbitradius);\n        //\n        //     /**\n        //      * adjust their height\n        //      */\n        //     adjustHeight(e);\n        // }\n    }\n\n    getCoordinatesForCursorEvent(event: AInteractionEvent){\n        return event.ndcCursor??new Vec2();\n    }\n}\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}