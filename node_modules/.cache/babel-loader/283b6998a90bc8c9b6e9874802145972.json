{"ast":null,"code":"var _dec, _class;\n// import {ALineSegmentsElement, AGraphicElement, Color, VertexArray, VertexArray2D} from \"src/anigraph/arender\";\nimport { ALineSegmentsGraphic } from \"./ALineSegmentsGraphic\";\nimport { LineGeometry } from \"three/examples/jsm/lines/LineGeometry\";\nimport { ASerializable } from \"../../base\";\nexport let ALineGraphic = (_dec = ASerializable(\"ALineGraphic\"), _dec(_class = class ALineGraphic extends ALineSegmentsGraphic {\n  get geometry() {\n    return this._geometry;\n  }\n  get threejs() {\n    return this._element;\n  }\n  _createLineGeometry() {\n    this._geometry = new LineGeometry();\n  }\n  setColors(rgba) {\n    // converts [ r1, g1, b1,  r2, g2, b2, ... ] to pairs format\n    const length = rgba.length - 4;\n    const colors = new Float32Array(2 * length);\n    for (let i = 0; i < length; i += 4) {\n      colors[2 * i] = rgba[i];\n      colors[2 * i + 1] = rgba[i + 1];\n      colors[2 * i + 2] = rgba[i + 2];\n      colors[2 * i + 3] = rgba[i + 3];\n      colors[2 * i + 4] = rgba[i + 4];\n      colors[2 * i + 5] = rgba[i + 5];\n      colors[2 * i + 6] = rgba[i + 6];\n      colors[2 * i + 7] = rgba[i + 7];\n    }\n    super.setColors(colors);\n  }\n\n  // setPositions( positions: number[]|Float32Array) {\n  //     // converts [ r1, g1, b1,  r2, g2, b2, ... ] to pairs format\n  //     const length = positions.length - 3;\n  //     const points = new Float32Array( 2 * length );\n  //     for ( let i = 0; i < length; i += 3 ) {\n  //         points[ 2 * i ] = positions[ i ];\n  //         points[ 2 * i + 1 ] = positions[ i + 1 ];\n  //         points[ 2 * i + 2 ] = positions[ i + 2 ];\n  //         points[ 2 * i + 3 ] = positions[ i + 3 ];\n  //         points[ 2 * i + 4 ] = positions[ i + 4 ];\n  //         points[ 2 * i + 5 ] = positions[ i + 5 ];\n  //     }\n  //     super.setPositions( points );\n  //     return this;\n  // }\n\n  static Create(verts, material, lineWidth) {\n    // let newElement = new this(verts, material);\n    // newElement.init();\n    let newElement = new this();\n    newElement.init(verts, material);\n    if (lineWidth !== undefined) {\n      newElement.setLineWidth(lineWidth);\n    }\n    return newElement;\n  }\n}) || _class);","map":{"version":3,"names":["ALineSegmentsGraphic","LineGeometry","ASerializable","ALineGraphic","geometry","_geometry","threejs","_element","_createLineGeometry","setColors","rgba","length","colors","Float32Array","i","Create","verts","material","lineWidth","newElement","init","undefined","setLineWidth"],"sources":["/Users/home/Desktop/College/Fall 2022/CS_4620/cs4620-final-project/src/anigraph/rendering/graphicelements/ALineGraphic.ts"],"sourcesContent":["// import {ALineSegmentsElement, AGraphicElement, Color, VertexArray, VertexArray2D} from \"src/anigraph/arender\";\nimport {ALineSegmentsGraphic} from \"./ALineSegmentsGraphic\";\nimport {LineGeometry} from \"three/examples/jsm/lines/LineGeometry\";\nimport {Line2} from \"three/examples/jsm/lines/Line2\";\nimport {ASerializable} from \"../../base\";\nimport {VertexArray} from \"../../geometry\";\nimport {Color} from \"../../math\";\nimport * as THREE from \"three\";\nimport {AMaterial} from \"../material\";\n\n@ASerializable(\"ALineGraphic\")\nexport class ALineGraphic extends ALineSegmentsGraphic{\n    get geometry():LineGeometry{\n        return this._geometry as LineGeometry;\n    }\n    get threejs():Line2{\n        return this._element as Line2;\n    }\n    _createLineGeometry() {\n        this._geometry = new LineGeometry();\n    }\n\n    setColors(rgba: number[]|Float32Array) {\n        // converts [ r1, g1, b1,  r2, g2, b2, ... ] to pairs format\n        const length = rgba.length - 4;\n        const colors = new Float32Array(2 * length);\n\n        for (let i = 0; i < length; i += 4) {\n            colors[2 * i] = rgba[i];\n            colors[2 * i + 1] = rgba[i + 1];\n            colors[2 * i + 2] = rgba[i + 2];\n            colors[2 * i + 3] = rgba[i + 3];\n\n            colors[2 * i + 4] = rgba[i + 4];\n            colors[2 * i + 5] = rgba[i + 5];\n            colors[2 * i + 6] = rgba[i + 6];\n            colors[2 * i + 7] = rgba[i + 7];\n\n        }\n        super.setColors(colors);\n    }\n\n    // setPositions( positions: number[]|Float32Array) {\n    //     // converts [ r1, g1, b1,  r2, g2, b2, ... ] to pairs format\n    //     const length = positions.length - 3;\n    //     const points = new Float32Array( 2 * length );\n    //     for ( let i = 0; i < length; i += 3 ) {\n    //         points[ 2 * i ] = positions[ i ];\n    //         points[ 2 * i + 1 ] = positions[ i + 1 ];\n    //         points[ 2 * i + 2 ] = positions[ i + 2 ];\n    //         points[ 2 * i + 3 ] = positions[ i + 3 ];\n    //         points[ 2 * i + 4 ] = positions[ i + 4 ];\n    //         points[ 2 * i + 5 ] = positions[ i + 5 ];\n    //     }\n    //     super.setPositions( points );\n    //     return this;\n    // }\n\n\n\n    static Create(verts?:VertexArray<any>, material?:Color|THREE.Color|THREE.Material|THREE.Material[]|AMaterial, lineWidth?:number){\n        // let newElement = new this(verts, material);\n        // newElement.init();\n        let newElement = new this();\n        newElement.init(verts, material);\n        if(lineWidth !== undefined){\n            newElement.setLineWidth(lineWidth);\n        }\n        return newElement;\n    }\n\n}\n\n"],"mappings":";AAAA;AACA,SAAQA,oBAAoB,QAAO,wBAAwB;AAC3D,SAAQC,YAAY,QAAO,uCAAuC;AAElE,SAAQC,aAAa,QAAO,YAAY;AAMxC,WACaC,YAAY,WADxBD,aAAa,CAAC,cAAc,CAAC,gBAA9B,MACaC,YAAY,SAASH,oBAAoB;EAClD,IAAII,QAAQ,GAAe;IACvB,OAAO,IAAI,CAACC,SAAS;EACzB;EACA,IAAIC,OAAO,GAAQ;IACf,OAAO,IAAI,CAACC,QAAQ;EACxB;EACAC,mBAAmB,GAAG;IAClB,IAAI,CAACH,SAAS,GAAG,IAAIJ,YAAY,EAAE;EACvC;EAEAQ,SAAS,CAACC,IAA2B,EAAE;IACnC;IACA,MAAMC,MAAM,GAAGD,IAAI,CAACC,MAAM,GAAG,CAAC;IAC9B,MAAMC,MAAM,GAAG,IAAIC,YAAY,CAAC,CAAC,GAAGF,MAAM,CAAC;IAE3C,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,MAAM,EAAEG,CAAC,IAAI,CAAC,EAAE;MAChCF,MAAM,CAAC,CAAC,GAAGE,CAAC,CAAC,GAAGJ,IAAI,CAACI,CAAC,CAAC;MACvBF,MAAM,CAAC,CAAC,GAAGE,CAAC,GAAG,CAAC,CAAC,GAAGJ,IAAI,CAACI,CAAC,GAAG,CAAC,CAAC;MAC/BF,MAAM,CAAC,CAAC,GAAGE,CAAC,GAAG,CAAC,CAAC,GAAGJ,IAAI,CAACI,CAAC,GAAG,CAAC,CAAC;MAC/BF,MAAM,CAAC,CAAC,GAAGE,CAAC,GAAG,CAAC,CAAC,GAAGJ,IAAI,CAACI,CAAC,GAAG,CAAC,CAAC;MAE/BF,MAAM,CAAC,CAAC,GAAGE,CAAC,GAAG,CAAC,CAAC,GAAGJ,IAAI,CAACI,CAAC,GAAG,CAAC,CAAC;MAC/BF,MAAM,CAAC,CAAC,GAAGE,CAAC,GAAG,CAAC,CAAC,GAAGJ,IAAI,CAACI,CAAC,GAAG,CAAC,CAAC;MAC/BF,MAAM,CAAC,CAAC,GAAGE,CAAC,GAAG,CAAC,CAAC,GAAGJ,IAAI,CAACI,CAAC,GAAG,CAAC,CAAC;MAC/BF,MAAM,CAAC,CAAC,GAAGE,CAAC,GAAG,CAAC,CAAC,GAAGJ,IAAI,CAACI,CAAC,GAAG,CAAC,CAAC;IAEnC;IACA,KAAK,CAACL,SAAS,CAACG,MAAM,CAAC;EAC3B;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAIA,OAAOG,MAAM,CAACC,KAAuB,EAAEC,QAAqE,EAAEC,SAAiB,EAAC;IAC5H;IACA;IACA,IAAIC,UAAU,GAAG,IAAI,IAAI,EAAE;IAC3BA,UAAU,CAACC,IAAI,CAACJ,KAAK,EAAEC,QAAQ,CAAC;IAChC,IAAGC,SAAS,KAAKG,SAAS,EAAC;MACvBF,UAAU,CAACG,YAAY,CAACJ,SAAS,CAAC;IACtC;IACA,OAAOC,UAAU;EACrB;AAEJ,CAAC"},"metadata":{},"sourceType":"module"}