{"ast":null,"code":"import { Mat4 } from \"../math\";\nvar ATTRIBUTE_NAMES;\n(function (ATTRIBUTE_NAMES) {\n  ATTRIBUTE_NAMES[\"COLOR\"] = \"color\";\n  ATTRIBUTE_NAMES[\"NORMAL\"] = \"normal\";\n  ATTRIBUTE_NAMES[\"POSITION\"] = \"position\";\n  ATTRIBUTE_NAMES[\"UV\"] = \"uv\";\n  ATTRIBUTE_NAMES[\"INDEX\"] = \"index\";\n})(ATTRIBUTE_NAMES || (ATTRIBUTE_NAMES = {}));\nexport class VertexArray {\n  constructor() {\n    this.attributes = {};\n    this.indices = void 0;\n    this._uid = \"\";\n  }\n  /** Get set position */\n  set position(value) {\n    this.attributes[VertexArray.AttributeNames.POSITION] = value;\n  }\n  get position() {\n    return this.attributes[VertexArray.AttributeNames.POSITION];\n  }\n\n  /** Get set normal */\n  set normal(value) {\n    this.attributes[VertexArray.AttributeNames.NORMAL] = value;\n  }\n  get normal() {\n    return this.attributes[VertexArray.AttributeNames.NORMAL];\n  }\n\n  // /** Get set color */\n  set color(value) {\n    this.attributes[VertexArray.AttributeNames.COLOR] = value;\n  }\n  get color() {\n    return this.attributes[VertexArray.AttributeNames.COLOR];\n  }\n\n  /** Get set uv */\n  set uv(value) {\n    this.attributes[VertexArray.AttributeNames.UV] = value;\n  }\n  get uv() {\n    return this.attributes[VertexArray.AttributeNames.UV];\n  }\n  getAttributeArray(name) {\n    return this.attributes[name];\n  }\n  ApplyMatrix(m) {\n    this.position.ApplyMatrix(m);\n    if (this.normal) {\n      var _m4$getInverse;\n      let m4 = m instanceof Mat4 ? m : Mat4.From2DMat3(m);\n      let mnorm = (_m4$getInverse = m4.getInverse()) === null || _m4$getInverse === void 0 ? void 0 : _m4$getInverse.getTranspose();\n      if (!mnorm) {\n        throw new Error(`tried to apply singular matrix to normals...`);\n      }\n      this.normal.ApplyMatrix(mnorm);\n    }\n  }\n  GetTransformedBy(m) {\n    let rval = this.clone();\n    rval.ApplyMatrix(m);\n    return rval;\n  }\n  get uid() {\n    return this._uid;\n  }\n\n  /**\n   * Returns the number of vertices\n   * @returns {number}\n   */\n  get nVerts() {\n    return this.position.nVerts;\n  }\n  clone() {\n    let cfunc = this.constructor;\n    let clone = new cfunc();\n    for (let atr in this.attributes) {\n      clone.attributes[atr] = this.attributes[atr].clone();\n    }\n    if (this.indices) {\n      clone.indices = this.indices.clone();\n    }\n    return clone;\n  }\n  toJSON() {\n    var rval = {};\n    for (let k in this) {\n      // @ts-ignore\n      rval[k] = this[k];\n    }\n    return rval;\n  }\n}\nVertexArray.AttributeNames = ATTRIBUTE_NAMES;","map":{"version":3,"names":["Mat4","ATTRIBUTE_NAMES","VertexArray","attributes","indices","_uid","position","value","AttributeNames","POSITION","normal","NORMAL","color","COLOR","uv","UV","getAttributeArray","name","ApplyMatrix","m","m4","From2DMat3","mnorm","getInverse","getTranspose","Error","GetTransformedBy","rval","clone","uid","nVerts","cfunc","constructor","atr","toJSON","k"],"sources":["/Users/home/Desktop/cs4620-final-project/src/anigraph/geometry/VertexArray.ts"],"sourcesContent":["import {\n  VertexAttributeArray,\n  VertexAttributeArray2D,\n  VertexAttributeArray3D,\n  VertexAttributeArray4D,\n  VertexPositionArray2DH,\n} from \"./VertexAttributeArray\";\nimport {VectorBase, Mat3, Mat4} from \"../math\";\nimport { HasBounds} from \"./HasBounds\";\nimport { BoundingBox3D } from \"./BoundingBox3D\";\nimport { VertexIndexArray } from \"./VertexIndexArray\";\n\nenum ATTRIBUTE_NAMES{\n  COLOR=\"color\",\n  NORMAL=\"normal\",\n  POSITION=\"position\",\n  UV=\"uv\",\n  INDEX=\"index\"\n}\n\nexport abstract class VertexArray<VType extends VectorBase> implements HasBounds {\n  static AttributeNames = ATTRIBUTE_NAMES;\n  public attributes: { [name: string]: VertexAttributeArray<any> } = {};\n  public indices!: VertexIndexArray;\n\n  /** Get set position */\n  set position(\n    value:\n      | VertexPositionArray2DH\n      | VertexAttributeArray3D\n      | VertexAttributeArray4D\n  ) {\n    this.attributes[VertexArray.AttributeNames.POSITION] = value;\n  }\n  get position() {\n    return this.attributes[VertexArray.AttributeNames.POSITION] as\n      | VertexPositionArray2DH\n      | VertexAttributeArray3D\n      | VertexAttributeArray4D;\n  }\n\n  /** Get set normal */\n  set normal(value: VertexAttributeArray3D) {\n    this.attributes[VertexArray.AttributeNames.NORMAL] = value;\n  }\n  get normal() {\n    return this.attributes[VertexArray.AttributeNames.NORMAL] as VertexAttributeArray3D;\n  }\n\n  // /** Get set color */\n  set color(value: VertexAttributeArray<any>) {\n    this.attributes[VertexArray.AttributeNames.COLOR] = value;\n  }\n  get color() {\n    return this.attributes[VertexArray.AttributeNames.COLOR];\n  }\n\n  /** Get set uv */\n  set uv(value: VertexAttributeArray2D) {\n    this.attributes[VertexArray.AttributeNames.UV] = value;\n  }\n  get uv() {\n    return this.attributes[VertexArray.AttributeNames.UV];\n  }\n\n  abstract addVertex(v: VType | any): void;\n  abstract getBounds(): BoundingBox3D;\n  protected _uid: string = \"\";\n\n  getAttributeArray(name: string) {\n    return this.attributes[name];\n  }\n\n  ApplyMatrix(m: Mat3 | Mat4) {\n    this.position.ApplyMatrix(m);\n    if (this.normal) {\n      let m4 = m instanceof Mat4 ? m : Mat4.From2DMat3(m);\n      let mnorm = m4.getInverse()?.getTranspose();\n      if (!mnorm) {\n        throw new Error(`tried to apply singular matrix to normals...`);\n      }\n      this.normal.ApplyMatrix(mnorm);\n    }\n  }\n\n  GetTransformedBy(m:Mat3|Mat4){\n    let rval = this.clone();\n    rval.ApplyMatrix(m);\n    return rval;\n  }\n\n  get uid() {\n    return this._uid;\n  }\n\n  /**\n   * Returns the number of vertices\n   * @returns {number}\n   */\n  get nVerts():number{\n    return this.position.nVerts;\n  }\n\n  clone(): this {\n    let cfunc: any = this.constructor as any;\n    let clone = new cfunc();\n    for (let atr in this.attributes) {\n      clone.attributes[atr] = this.attributes[atr].clone();\n    }\n    if(this.indices) {\n      clone.indices = this.indices.clone();\n    }\n    return clone;\n  }\n\n  toJSON() {\n    var rval: { [name: string]: any } = {};\n    for (let k in this) {\n      // @ts-ignore\n      rval[k] = this[k];\n    }\n    return rval;\n  }\n}\n"],"mappings":"AAOA,SAA0BA,IAAI,QAAO,SAAS;AAAC,IAK1CC,eAAe;AAAA,WAAfA,eAAe;EAAfA,eAAe;EAAfA,eAAe;EAAfA,eAAe;EAAfA,eAAe;EAAfA,eAAe;AAAA,GAAfA,eAAe,KAAfA,eAAe;AAQpB,OAAO,MAAeC,WAAW,CAAgD;EAAA;IAAA,KAExEC,UAAU,GAAkD,CAAC,CAAC;IAAA,KAC9DC,OAAO;IAAA,KA4CJC,IAAI,GAAW,EAAE;EAAA;EA1C3B;EACA,IAAIC,QAAQ,CACVC,KAG0B,EAC1B;IACA,IAAI,CAACJ,UAAU,CAACD,WAAW,CAACM,cAAc,CAACC,QAAQ,CAAC,GAAGF,KAAK;EAC9D;EACA,IAAID,QAAQ,GAAG;IACb,OAAO,IAAI,CAACH,UAAU,CAACD,WAAW,CAACM,cAAc,CAACC,QAAQ,CAAC;EAI7D;;EAEA;EACA,IAAIC,MAAM,CAACH,KAA6B,EAAE;IACxC,IAAI,CAACJ,UAAU,CAACD,WAAW,CAACM,cAAc,CAACG,MAAM,CAAC,GAAGJ,KAAK;EAC5D;EACA,IAAIG,MAAM,GAAG;IACX,OAAO,IAAI,CAACP,UAAU,CAACD,WAAW,CAACM,cAAc,CAACG,MAAM,CAAC;EAC3D;;EAEA;EACA,IAAIC,KAAK,CAACL,KAAgC,EAAE;IAC1C,IAAI,CAACJ,UAAU,CAACD,WAAW,CAACM,cAAc,CAACK,KAAK,CAAC,GAAGN,KAAK;EAC3D;EACA,IAAIK,KAAK,GAAG;IACV,OAAO,IAAI,CAACT,UAAU,CAACD,WAAW,CAACM,cAAc,CAACK,KAAK,CAAC;EAC1D;;EAEA;EACA,IAAIC,EAAE,CAACP,KAA6B,EAAE;IACpC,IAAI,CAACJ,UAAU,CAACD,WAAW,CAACM,cAAc,CAACO,EAAE,CAAC,GAAGR,KAAK;EACxD;EACA,IAAIO,EAAE,GAAG;IACP,OAAO,IAAI,CAACX,UAAU,CAACD,WAAW,CAACM,cAAc,CAACO,EAAE,CAAC;EACvD;EAMAC,iBAAiB,CAACC,IAAY,EAAE;IAC9B,OAAO,IAAI,CAACd,UAAU,CAACc,IAAI,CAAC;EAC9B;EAEAC,WAAW,CAACC,CAAc,EAAE;IAC1B,IAAI,CAACb,QAAQ,CAACY,WAAW,CAACC,CAAC,CAAC;IAC5B,IAAI,IAAI,CAACT,MAAM,EAAE;MAAA;MACf,IAAIU,EAAE,GAAGD,CAAC,YAAYnB,IAAI,GAAGmB,CAAC,GAAGnB,IAAI,CAACqB,UAAU,CAACF,CAAC,CAAC;MACnD,IAAIG,KAAK,qBAAGF,EAAE,CAACG,UAAU,EAAE,mDAAf,eAAiBC,YAAY,EAAE;MAC3C,IAAI,CAACF,KAAK,EAAE;QACV,MAAM,IAAIG,KAAK,CAAE,8CAA6C,CAAC;MACjE;MACA,IAAI,CAACf,MAAM,CAACQ,WAAW,CAACI,KAAK,CAAC;IAChC;EACF;EAEAI,gBAAgB,CAACP,CAAW,EAAC;IAC3B,IAAIQ,IAAI,GAAG,IAAI,CAACC,KAAK,EAAE;IACvBD,IAAI,CAACT,WAAW,CAACC,CAAC,CAAC;IACnB,OAAOQ,IAAI;EACb;EAEA,IAAIE,GAAG,GAAG;IACR,OAAO,IAAI,CAACxB,IAAI;EAClB;;EAEA;AACF;AACA;AACA;EACE,IAAIyB,MAAM,GAAS;IACjB,OAAO,IAAI,CAACxB,QAAQ,CAACwB,MAAM;EAC7B;EAEAF,KAAK,GAAS;IACZ,IAAIG,KAAU,GAAG,IAAI,CAACC,WAAkB;IACxC,IAAIJ,KAAK,GAAG,IAAIG,KAAK,EAAE;IACvB,KAAK,IAAIE,GAAG,IAAI,IAAI,CAAC9B,UAAU,EAAE;MAC/ByB,KAAK,CAACzB,UAAU,CAAC8B,GAAG,CAAC,GAAG,IAAI,CAAC9B,UAAU,CAAC8B,GAAG,CAAC,CAACL,KAAK,EAAE;IACtD;IACA,IAAG,IAAI,CAACxB,OAAO,EAAE;MACfwB,KAAK,CAACxB,OAAO,GAAG,IAAI,CAACA,OAAO,CAACwB,KAAK,EAAE;IACtC;IACA,OAAOA,KAAK;EACd;EAEAM,MAAM,GAAG;IACP,IAAIP,IAA6B,GAAG,CAAC,CAAC;IACtC,KAAK,IAAIQ,CAAC,IAAI,IAAI,EAAE;MAClB;MACAR,IAAI,CAACQ,CAAC,CAAC,GAAG,IAAI,CAACA,CAAC,CAAC;IACnB;IACA,OAAOR,IAAI;EACb;AACF;AAvGsBzB,WAAW,CACxBM,cAAc,GAAGP,eAAe"},"metadata":{},"sourceType":"module"}