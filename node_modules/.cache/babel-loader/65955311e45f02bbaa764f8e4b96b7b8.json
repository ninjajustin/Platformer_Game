{"ast":null,"code":"/**\n * @file Main scene model\n * @description Scene model for your application\n */\n\nimport { A3DModelLoader, ACameraModel, Color, GetAppState, NodeTransform3D, Quaternion, V3, Vec2, Vec3 } from \"../../../anigraph\";\nimport { BaseSceneModel } from \"../../BaseClasses\";\nimport { ATexture } from \"src/anigraph/rendering/ATexture\";\nimport { APointLightModel } from \"../../../anigraph/scene/lights\";\nimport { AppConfigs } from \"../../AppConfigs\";\nimport { PlayerModel } from \"../Nodes/PlayerNode\";\nimport { GameTerrainModel } from \"../Nodes/GameTerrain/GameTerrainModel\";\nimport { BillboardParticleSystemModel } from \"../Nodes/BillboardParticleSystem\";\nimport { EMPTY_LEVEL } from \"../../Backend/DefaultLevels\";\nimport { ExampleLoadedCharacterModel } from \"../Nodes/Loaded/ExampleLoadedCharacterModel\";\nimport { AddStandardUniforms } from \"./HowToAddUniformToControlPanel\";\nimport { LoadedCharacterModel } from \"src/app/BaseClasses/LoadedCharacterModel\";\nimport { ABasicShaderModel } from \"src/anigraph/rendering/shadermodels/ABasicShaderModel\";\nlet appState = GetAppState();\nvar MyMaterialNames;\n(function (MyMaterialNames) {\n  MyMaterialNames[\"basicshader1\"] = \"basicshader1\";\n  MyMaterialNames[\"mymaterial2\"] = \"mymaterial2\";\n})(MyMaterialNames || (MyMaterialNames = {}));\nexport class MainSceneModel extends BaseSceneModel {\n  constructor() {\n    super(...arguments);\n    this.playerTexture = void 0;\n    this.bots = [];\n    this.gameTerrains = {};\n    this.lastTerrains = [];\n    this.currentLevel = EMPTY_LEVEL;\n    this.passedCheckpoints = 0;\n    this.lastT = 0;\n    this.playerMaterial = void 0;\n    this.billboardParticles = [];\n    this.loaded3DModel = void 0;\n    this._player = void 0;\n    this._mesh = void 0;\n  }\n  get player() {\n    return this._player;\n  }\n  set player(v) {\n    this._player = v;\n  }\n  get mesh() {\n    return this._mesh;\n  }\n  set mesh(v) {\n    this._mesh = v;\n  }\n  async loadModelFromFile(path, transform) {\n    /**\n     * Here we need to load the .ply file into an AObject3DModelWrapper instance\n     */\n    let meshObject = await A3DModelLoader.LoadFromPath(path);\n    meshObject.sourceTransform = transform !== null && transform !== void 0 ? transform : new NodeTransform3D();\n    return meshObject;\n  }\n  async PreloadAssets() {\n    await super.PreloadAssets();\n    await GameTerrainModel.LoadShader();\n    await PlayerModel.LoadShader();\n    // this.materials.setMaterialModel(\"textured\", await ABasicShaderModel.CreateModel(\"basic\"));\n    let basicshader1ShaderMaterialModel = await ABasicShaderModel.CreateModel(\"customexample1\");\n    await this.materials.setMaterialModel(\"basicshader1\", basicshader1ShaderMaterialModel);\n\n    /**\n     * If we want to use vertex colors in our shader, we need to set useVertexColors to true.\n     * This will turn vertex colors on by default for materials created with this model.\n     * Each time you create a material, you can turn off vertex colors for that material if you want.\n     */\n    basicshader1ShaderMaterialModel.usesVertexColors = true;\n\n    /**\n     * Once a shader model is set like this, we can access it with the material name we assigned it to like so:\n     */\n    this.playerMaterial = this.materials.CreateShaderMaterial(\"basicshader1\");\n  }\n  initCamera() {\n    this.cameraModel = ACameraModel.CreatePerspectiveFOV(90, 1, 0.01, 10);\n    this.cameraModel.setPose(NodeTransform3D.LookAt(V3(0.0, 0, 5), V3(0, 0, 0), V3(0, 1, 0)));\n  }\n\n  /**\n   * The view light is a light that is attached to the camera.\n   */\n  initViewLight() {\n    if (this.viewLight) return;\n\n    /**\n     * Create a point light\n     * You can have up to 16 point lights in the scene at once by default\n     */\n    this.viewLight = new APointLightModel(this.camera.pose, Color.FromString(\"#ffffff\"), 0.5, AppConfigs.ViewLightRange, 1);\n\n    /**\n     * Add it as a child of the camera model so that it will move with the camera\n     */\n    this.cameraModel.addChild(this.viewLight);\n  }\n  async initGameTerrain() {\n    if (this.lastTerrains == this.gameTerrains[this.currentLevel.name]) return;\n    for (let t of this.lastTerrains) {\n      t.position.y -= 500;\n    }\n    if (this.gameTerrains[this.currentLevel.name]) {\n      this.lastTerrains = this.gameTerrains[this.currentLevel.name];\n      for (let t of this.lastTerrains) {\n        t.position.y += 500;\n      }\n    } else {\n      const t = [];\n      for (let [x1, y1, w, h] of this.currentLevel.terrains) {\n        let terrain = await GameTerrainModel.Create(w, h);\n        terrain.position.x = x1 + w / 2;\n        terrain.position.y = y1 + h / 2;\n        t.push(terrain);\n        this.addChild(terrain);\n      }\n      this.gameTerrains[this.currentLevel.name] = t;\n      this.lastTerrains = t;\n    }\n  }\n  async initGameHero() {\n    if (!this.player) {\n      // this.playerTexture = await ATexture.LoadAsync(\"./images/tanktexburngreen.jpeg\")\n      // this.player = await LoadedCharacterModel.Create(this.playerTexture);\n      // this.addChild(this.player);\n      this.playerTexture = await ATexture.LoadAsync(\"./models/gltf/Cat_diffuse.jpg\");\n      const b = this.materials.CreateShaderMaterial(\"basicshader1\");\n      b.setTexture('diffuse', this.playerTexture);\n      let transform = NodeTransform3D.FromPositionZUpAndScale(V3([0, 0, 0]), Vec3.UnitZ().times(1), Vec3.UnitY().times(-1), 0.028);\n      const q = new Quaternion(1, -1, -1);\n      transform._setQuaternionRotation(q);\n      const glb = await this.loadModelFromFile(\"./models/gltf/cat.glb\", transform);\n      this.player = await LoadedCharacterModel.Create(glb, b);\n      this.addChild(this.player);\n    }\n    this.player.position = new Vec3(...this.currentLevel.player, 0);\n  }\n  async initModel(model, texture, scale, pos) {\n    let dir = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n    let transform = NodeTransform3D.FromPositionZUpAndScale(V3(pos), Vec3.UnitZ().times(1), Vec3.UnitY().times(-1), scale);\n    let direction = Quaternion.RotationY(Math.PI * dir);\n    let q = new Quaternion(1, 1, 1);\n    let sceneRotation = direction.times(q);\n    transform._setQuaternionRotation(Quaternion.FromQuaternion(sceneRotation));\n    //transform._setQuaternionRotation();\n    const glb = await this.loadModelFromFile(model, transform);\n    const b = this.materials.CreateShaderMaterial(MyMaterialNames.basicshader1);\n    const d = await ATexture.LoadAsync(texture);\n    b.setTexture('diffuse', d);\n    const a = new ExampleLoadedCharacterModel(glb, b);\n    AddStandardUniforms(a.material);\n    this.addChild(a);\n  }\n  async initScene() {\n    await this.initGameTerrain();\n    await this.initGameHero();\n    await this.initParticles();\n\n    //add models\n    //cactus\n    await this.initModel(\"./models/gltf/cactus.glb\", \"./models/gltf/Cactus_diffuse.jpg\", 0.01, [2, 1, 0]);\n    await this.initModel(\"./models/gltf/cactus.glb\", \"./models/gltf/Cactus_diffuse.jpg\", 0.01, [8, 1, 0]);\n    await this.initModel(\"./models/gltf/cactus.glb\", \"./models/gltf/Cactus_diffuse.jpg\", 0.01, [20, 1, 0]);\n    //await this.initModel(\"./models/gltf/cactus.glb\", \"./models/gltf/Cactus_diffuse.jpg\", 0.01, [24, 1, 0]);\n    await this.initModel(\"./models/gltf/cactus.glb\", \"./models/gltf/Cactus_diffuse.jpg\", 0.01, [32, 1, 0]);\n    await this.initModel(\"./models/gltf/cactus.glb\", \"./models/gltf/Cactus_diffuse.jpg\", 0.01, [39, 1, 0]);\n    await this.initModel(\"./models/gltf/cactus.glb\", \"./models/gltf/Cactus_diffuse.jpg\", 0.01, [45, 1, 0]);\n    await this.initModel(\"./models/gltf/cactus.glb\", \"./models/gltf/Cactus_diffuse.jpg\", 0.01, [53, 1, 0]);\n    await this.initModel(\"./models/gltf/cactus.glb\", \"./models/gltf/Cactus_diffuse.jpg\", 0.01, [61, 1, 0]);\n\n    //scorpion\n    await this.initModel(\"./models/gltf/scorpion.glb\", \"./models/gltf/Scorpion_diffuse1.jpg\", 0.1, [6, 1, 0]);\n    await this.initModel(\"./models/gltf/scorpion.glb\", \"./models/gltf/Scorpion_diffuse1.jpg\", 0.1, [18, 1, 0], 0);\n    await this.initModel(\"./models/gltf/scorpion.glb\", \"./models/gltf/Scorpion_diffuse1.jpg\", 0.1, [66, 1, 0], 0);\n\n    //snake\n    await this.initModel(\"./models/gltf/snake.glb\", \"./models/gltf/Snake_diffuse.jpg\", 0.02, [4, 1, 0]);\n    await this.initModel(\"./models/gltf/snake.glb\", \"./models/gltf/Snake_diffuse.jpg\", 0.02, [12, 1, 0]);\n    await this.initModel(\"./models/gltf/snake.glb\", \"./models/gltf/Snake_diffuse.jpg\", 0.02, [62, 1, 0]);\n    await this.initModel(\"./models/gltf/snake.glb\", \"./models/gltf/Snake_diffuse.jpg\", 0.02, [44, 1, 0]);\n\n    //camels\n    await this.initModel(\"./models/gltf/camel.glb\", \"./models/gltf/Camel_diffuse1.jpg\", 0.01, [1, 1, 0], 1);\n    await this.initModel(\"./models/gltf/camel.glb\", \"./models/gltf/Camel_diffuse1.jpg\", 0.01, [3, 1, 0]);\n    await this.initModel(\"./models/gltf/camel.glb\", \"./models/gltf/Camel_diffuse1.jpg\", 0.01, [65, 1, 0], 1);\n    await this.initModel(\"./models/gltf/camel.glb\", \"./models/gltf/Camel_diffuse1.jpg\", 0.01, [43, 1, 0]);\n    await this.initModel(\"./models/gltf/camel.glb\", \"./models/gltf/Camel_diffuse1.jpg\", 0.01, [64, 1, 0], 1);\n\n    //tumbleweed\n    await this.initModel(\"./models/gltf/tumbleweed.glb\", \"./models/gltf/Tumbleweed_diffuse.jpg\", 0.2, [11, 1, 0]);\n    await this.initModel(\"./models/gltf/tumbleweed.glb\", \"./models/gltf/Tumbleweed_diffuse.jpg\", 0.2, [60, 1, 0]);\n    await this.initModel(\"./models/gltf/tumbleweed.glb\", \"./models/gltf/Tumbleweed_diffuse.jpg\", 0.2, [42, 1, 0]);\n\n    //palm tree\n    await this.initModel(\"./models/gltf/palm_tree.glb\", \"./models/gltf/Palm_tree_diffuse.jpg\", 0.009, [10, 1, -15]);\n    await this.initModel(\"./models/gltf/palm_tree.glb\", \"./models/gltf/Palm_tree_diffuse.jpg\", 0.5, [0, -10, -30]);\n    await this.initModel(\"./models/gltf/palm_tree.glb\", \"./models/gltf/Palm_tree_diffuse.jpg\", 0.009, [.5, 1, 0]);\n    // await this.initModel(\"./models/gltf/palm_tree.glb\", \"./models/gltf/Palm_tree_diffuse.jpg\", 0.009, [.5, 1, 0]);\n    // await this.initModel(\"./models/gltf/palm_tree.glb\", \"./models/gltf/Palm_tree_diffuse.jpg\", 0.009, [.5, 1, 0]);\n    // await this.initModel(\"./models/gltf/palm_tree.glb\", \"./models/gltf/Palm_tree_diffuse.jpg\", 0.009, [.5, 1, 0]);\n\n    //await this.initModel(\"./models/gltf/skull.glb\", \"./models/gltf/skull_diffuse.jpg\", 0.01, [-1, 1, 0]);\n    //await this.initModel(\"./models/gltf/dragon.glb\", \"./models/gltf/Dragon_diffuse.jpg\", 0.02, [1.7, 1, 0]);\n    //await this.initModel(\"./models/gltf/turtle.glb\", \"./models/gltf/Turtle_diffuse.jpg\", 0.01, [1.3, 1, 0]);\n    //await this.initModel(\"./models/gltf/palm_tree.glb\", \"./models/gltf/Palm_tree_diffuse.jpg\", 0.003, [.5, 1, 0]);\n    this.passedCheckpoints = 0;\n\n    /**\n     * Now let's initialize the view light\n     */\n    this.initViewLight();\n  }\n  async initParticles() {\n    // BillboardParticleSystemModel.AddParticleSystemControls();\n    const targetLength = this.currentLevel.fires.length;\n    for (let i = this.billboardParticles.length; i < targetLength; i++) {\n      const bp = new BillboardParticleSystemModel(new NodeTransform3D(V3(0, -999, 0)));\n      this.billboardParticles.push(bp);\n    }\n    for (let i = 0, j = this.currentLevel.fires.length; i < j; i++) {\n      const bp = this.billboardParticles[i];\n      bp.setDisable();\n      bp.myTransform.position = V3(0, -999, 0);\n    }\n  }\n  async updateLevel(level) {\n    this.currentLevel = level;\n    await this.initScene();\n  }\n  playerDie() {\n    this.player.position = new Vec3(...(this.passedCheckpoints === 0 ? this.currentLevel.player : this.currentLevel.checkpoints[this.passedCheckpoints - 1][1]), 0);\n    this.player.velocity = new Vec3();\n    const q = new Quaternion(0, 0, 0);\n    this.player.transform._setQuaternionRotation(q);\n  }\n  timeUpdate(t) {\n    let paused = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    /**\n     * We can call timeUpdate on all of the model nodes in the scene here, which will trigger any updates that they\n     * individually define.\n     */\n    for (let c of this.getDescendantList()) {\n      c.timeUpdate(t);\n    }\n    if (!paused) {\n      this.player.update(t - this.lastT, this.gameTerrains[this.currentLevel.name] || []);\n      if (this.player.position.y < -10 || t <= 0.5) {\n        this.playerDie();\n      }\n      const [playerUpper, playerRight, playerLower, playerLeft] = this.player.getFourBounds();\n      for (let i = 0, j = this.currentLevel.fires.length; i < j; i++) {\n        const [x, y] = this.currentLevel.fires[i];\n        const p = this.billboardParticles[i];\n        if (x < playerLeft - 10 || x > playerRight + 10 || y < playerLower - 10 || y > playerUpper + 10) {\n          if (!p.disabled) {\n            var _p$parent;\n            p.setDisable();\n            p.myTransform.position = V3(0, -999, 0);\n            (_p$parent = p.parent) === null || _p$parent === void 0 ? void 0 : _p$parent.removeChild(p);\n          }\n          continue;\n        } else {\n          if (p.disabled) {\n            p.disabled = false;\n            p.myTransform.position = V3(x + .5, y, 0);\n            this.addChild(p);\n          }\n        }\n        if ((playerLower < y + .8 && playerLower > y + .2 || playerUpper > y + .2 && playerUpper < y + .8 || playerLower < y + .2 && playerUpper > y + .8) && (playerLeft < x + .8 && playerLeft > x + .2 || playerRight > x + .2 && playerRight < x + .8 || playerLeft < x + .2 && playerRight > x + .8)) {\n          this.playerDie();\n        }\n      }\n      for (let i = this.passedCheckpoints, j = this.currentLevel.checkpoints.length; i < j; i++) {\n        if (Math.abs(this.player.velocity.y) < 0.01 && this.player.position.x >= this.currentLevel.checkpoints[i][0]) {\n          this.passedCheckpoints = Math.max(i + 1, this.passedCheckpoints);\n        }\n      }\n      if (Math.abs(this.cameraModel.pose.position.x - this.player.position.x) >= 0.01 || Math.abs(this.cameraModel.pose.position.y - this.player.position.y) >= 0.01) {\n        const cameraPos = this.cameraModel.pose.position.clone();\n        const playerPos = this.player.position.clone();\n        const playerVel = this.player.velocity.clone();\n        // higher gravity will look like player falling down harder\n        const g = AppConfigs.Gravity > 10 ? (AppConfigs.Gravity - 10) / 10 : 0;\n        playerVel.y = playerVel.y < g * playerVel.y ? 0 : playerVel.y;\n        // rate of camera movement, with 1 being camera on player at all times\n        const rate = this.cameraModel.pose.position.y < this.player.position.y ? 0.04 : 0.05;\n        // 1.5 is how much screen moves with player\n        const velocityCamera = cameraPos.clone().plus(playerVel.clone().times(1.5));\n        const new_camera_pos = velocityCamera.clone().plus(playerPos.clone().minus(velocityCamera).times(rate));\n        new_camera_pos.z = 10;\n        const new_target_pos = new_camera_pos.clone();\n        new_target_pos.z = 0;\n        this.cameraModel.setPose(NodeTransform3D.LookAt(new_camera_pos, new_target_pos, new Vec3(0, 1, 0)));\n      }\n      this.cameraModel.signalCameraProjectionUpdate();\n    }\n    this.lastT = t;\n\n    // /**\n    //  * For interactions between models, we can trigger logic here. For example, if you want characters to walk on\n    //  * uneven terrain, you can make that happen by completing the functions used here:\n    //  */\n    // const self = this;\n    // function adjustHeight(character:Particle3D){\n    //     let height = self.terrain.getTerrainHeightAtPoint(character.position.xy);\n    //     if(character.position.z<height){character.position.z = height;}\n    // }\n    //\n    // /**\n    //  * Here we would apply our adjust height function to the player\n    //  */\n    // adjustHeight(this.player);\n    //\n    // /**\n    //  * Now lets update bots\n    //  */\n    // let orbitradius = 0.25;\n    // for(let ei=0;ei<this.bots.length;ei++){\n    //     let e = this.bots[ei];\n    //\n    //     /**\n    //      * Characters have velocity and mass properties in case you want to implement particle physics\n    //      * But for now we will just have them orbit each other.\n    //      */\n    //     e.position = new Vec3(Math.cos(t*(ei+1)), Math.sin(t*(ei+1)),0).times(orbitradius);\n    //\n    //     /**\n    //      * adjust their height\n    //      */\n    //     adjustHeight(e);\n    // }\n  }\n\n  getCoordinatesForCursorEvent(event) {\n    var _event$ndcCursor;\n    return (_event$ndcCursor = event.ndcCursor) !== null && _event$ndcCursor !== void 0 ? _event$ndcCursor : new Vec2();\n  }\n}","map":{"version":3,"names":["A3DModelLoader","ACameraModel","Color","GetAppState","NodeTransform3D","Quaternion","V3","Vec2","Vec3","BaseSceneModel","ATexture","APointLightModel","AppConfigs","PlayerModel","GameTerrainModel","BillboardParticleSystemModel","EMPTY_LEVEL","ExampleLoadedCharacterModel","AddStandardUniforms","LoadedCharacterModel","ABasicShaderModel","appState","MyMaterialNames","MainSceneModel","playerTexture","bots","gameTerrains","lastTerrains","currentLevel","passedCheckpoints","lastT","playerMaterial","billboardParticles","loaded3DModel","_player","_mesh","player","v","mesh","loadModelFromFile","path","transform","meshObject","LoadFromPath","sourceTransform","PreloadAssets","LoadShader","basicshader1ShaderMaterialModel","CreateModel","materials","setMaterialModel","usesVertexColors","CreateShaderMaterial","initCamera","cameraModel","CreatePerspectiveFOV","setPose","LookAt","initViewLight","viewLight","camera","pose","FromString","ViewLightRange","addChild","initGameTerrain","name","t","position","y","x1","y1","w","h","terrains","terrain","Create","x","push","initGameHero","LoadAsync","b","setTexture","FromPositionZUpAndScale","UnitZ","times","UnitY","q","_setQuaternionRotation","glb","initModel","model","texture","scale","pos","dir","direction","RotationY","Math","PI","sceneRotation","FromQuaternion","basicshader1","d","a","material","initScene","initParticles","targetLength","fires","length","i","bp","j","setDisable","myTransform","updateLevel","level","playerDie","checkpoints","velocity","timeUpdate","paused","c","getDescendantList","update","playerUpper","playerRight","playerLower","playerLeft","getFourBounds","p","disabled","parent","removeChild","abs","max","cameraPos","clone","playerPos","playerVel","g","Gravity","rate","velocityCamera","plus","new_camera_pos","minus","z","new_target_pos","signalCameraProjectionUpdate","getCoordinatesForCursorEvent","event","ndcCursor"],"sources":["/Users/home/Desktop/cs4620-final-project/src/app/main/Scene/MainSceneModel.ts"],"sourcesContent":["/**\n * @file Main scene model\n * @description Scene model for your application\n */\n\nimport {A3DModelLoader, ACameraModel, AInteractionEvent, ANodeModel, AObject3DModelWrapper, AObjectNode, AShaderMaterial, Color, GetAppState, NodeTransform3D, Quaternion, V3, Vec2, Vec3, VertexArray3D} from \"../../../anigraph\";\nimport {BaseSceneModel} from \"../../BaseClasses\";\nimport {ATexture} from \"src/anigraph/rendering/ATexture\";\nimport {APointLightModel} from \"../../../anigraph/scene/lights\";\nimport {AppConfigs} from \"../../AppConfigs\";\nimport {PlayerModel} from \"../Nodes/PlayerNode\";\nimport {BotModel} from \"../Nodes/CharacterNodes/BotModel\";\nimport {GameTerrainModel} from \"../Nodes/GameTerrain/GameTerrainModel\";\nimport {BillboardParticleSystemModel} from \"../Nodes/BillboardParticleSystem\";\nimport {LevelDefinition} from \"../../Backend/Level\";\nimport {EMPTY_LEVEL} from \"../../Backend/DefaultLevels\";\nimport playerBlock from \"../Editor/PlayerBlock\";\nimport { CharacterModel, CharacterModelInterface } from \"../../BaseClasses\";\nimport { ExampleLoadedCharacterModel } from \"../Nodes/Loaded/ExampleLoadedCharacterModel\";\nimport { AddStandardUniforms } from \"./HowToAddUniformToControlPanel\";\nimport { LoadedCharacterModel } from \"src/app/BaseClasses/LoadedCharacterModel\";\nimport { ABasicShaderModel } from \"src/anigraph/rendering/shadermodels/ABasicShaderModel\";\n\nlet appState = GetAppState();\n\nenum MyMaterialNames {\n  basicshader1 = \"basicshader1\",\n  mymaterial2 = \"mymaterial2\",\n}\n\nexport class MainSceneModel extends BaseSceneModel {\n\n  playerTexture!: ATexture;\n  /**\n   * An array of bots. Your\n   */\n  bots: BotModel[] = [];\n  gameTerrains: { [name: string]: GameTerrainModel[] } = {};\n  lastTerrains: GameTerrainModel[] = [];\n  currentLevel: LevelDefinition = EMPTY_LEVEL;\n  passedCheckpoints: number = 0;\n  private lastT: number = 0;\n  playerMaterial!:AShaderMaterial;\n  billboardParticles:BillboardParticleSystemModel[] = [];\n  loaded3DModel!: AObject3DModelWrapper;\n\n  /**\n   * Our custom player model, and a texture to use for our player\n   */\n  _player!: LoadedCharacterModel;\n\n  get player(): LoadedCharacterModel {\n    return this._player as LoadedCharacterModel;\n  }\n\n  set player(v: LoadedCharacterModel) {\n    this._player = v;\n  }\n\n  _mesh!: CharacterModelInterface;\n  get mesh(): CharacterModelInterface {\n    return this._mesh as LoadedCharacterModel;\n  }\n  set mesh(v: CharacterModelInterface) {\n    this._mesh = v;\n  }\n\n  async loadModelFromFile(path: string, transform?: NodeTransform3D) {\n    /**\n     * Here we need to load the .ply file into an AObject3DModelWrapper instance\n     */\n    let meshObject = await A3DModelLoader.LoadFromPath(path)\n    meshObject.sourceTransform = transform ?? new NodeTransform3D();\n    return meshObject;\n  }\n\n  async PreloadAssets() {\n    await super.PreloadAssets();\n    await GameTerrainModel.LoadShader();\n    await PlayerModel.LoadShader();\n    // this.materials.setMaterialModel(\"textured\", await ABasicShaderModel.CreateModel(\"basic\"));\n    let basicshader1ShaderMaterialModel = await ABasicShaderModel.CreateModel(\"customexample1\");\n    await this.materials.setMaterialModel(\"basicshader1\", basicshader1ShaderMaterialModel);\n\n    /**\n     * If we want to use vertex colors in our shader, we need to set useVertexColors to true.\n     * This will turn vertex colors on by default for materials created with this model.\n     * Each time you create a material, you can turn off vertex colors for that material if you want.\n     */\n    basicshader1ShaderMaterialModel.usesVertexColors=true;\n\n    /**\n     * Once a shader model is set like this, we can access it with the material name we assigned it to like so:\n     */\n    this.playerMaterial = this.materials.CreateShaderMaterial(\"basicshader1\");\n\n  }\n\n  initCamera() {\n    this.cameraModel = ACameraModel.CreatePerspectiveFOV(90, 1, 0.01, 10);\n    this.cameraModel.setPose(\n      NodeTransform3D.LookAt(\n        V3(0.0, 0, 5), V3(0, 0, 0),\n        V3(0, 1, 0)\n      )\n    )\n  }\n\n  /**\n   * The view light is a light that is attached to the camera.\n   */\n  initViewLight() {\n\n    if (this.viewLight) return;\n\n    /**\n     * Create a point light\n     * You can have up to 16 point lights in the scene at once by default\n     */\n    this.viewLight = new APointLightModel(\n      this.camera.pose,\n      Color.FromString(\"#ffffff\"),\n      0.5,\n      AppConfigs.ViewLightRange,\n      1\n    );\n\n    /**\n     * Add it as a child of the camera model so that it will move with the camera\n     */\n    this.cameraModel.addChild(this.viewLight);\n  }\n\n  async initGameTerrain() {\n    if (this.lastTerrains == this.gameTerrains[this.currentLevel.name])\n      return;\n    for (let t of this.lastTerrains) {\n      t.position.y -= 500;\n    }\n    if (this.gameTerrains[this.currentLevel.name]) {\n      this.lastTerrains = this.gameTerrains[this.currentLevel.name];\n      for (let t of this.lastTerrains) {\n        t.position.y += 500;\n      }\n    } else {\n      const t = [];\n      for (let [x1, y1, w, h] of this.currentLevel.terrains) {\n        let terrain = await GameTerrainModel.Create(w, h);\n        terrain.position.x = x1 + w / 2;\n        terrain.position.y = y1 + h / 2;\n        t.push(terrain);\n        this.addChild(terrain);\n      }\n      this.gameTerrains[this.currentLevel.name] = t;\n      this.lastTerrains = t;\n    }\n  }\n\n  async initGameHero() {\n    if (!this.player) {\n      // this.playerTexture = await ATexture.LoadAsync(\"./images/tanktexburngreen.jpeg\")\n      // this.player = await LoadedCharacterModel.Create(this.playerTexture);\n      // this.addChild(this.player);\n      this.playerTexture = await ATexture.LoadAsync(\"./models/gltf/Cat_diffuse.jpg\");\n      const b = this.materials.CreateShaderMaterial(\"basicshader1\");\n      b.setTexture('diffuse', this.playerTexture);\n      let transform = NodeTransform3D.FromPositionZUpAndScale(V3([0,0,0]), Vec3.UnitZ().times(1), Vec3.UnitY().times(-1), 0.028);\n      const q = new Quaternion(1, -1, -1)\n      transform._setQuaternionRotation(q)\n      const glb = await this.loadModelFromFile(\"./models/gltf/cat.glb\", transform);\n      this.player = await LoadedCharacterModel.Create(glb, b);\n      this.addChild(this.player);\n    }\n    this.player.position = new Vec3(...this.currentLevel.player, 0);\n\n\n\n\n\n  }\n\n  async initModel(model: string, texture: string, scale: number, pos: Array<number>, dir: number=0) {\n    let transform = NodeTransform3D.FromPositionZUpAndScale(V3(pos), Vec3.UnitZ().times(1), Vec3.UnitY().times(-1), scale);\n    let direction = Quaternion.RotationY(Math.PI * dir);\n    let q = new Quaternion(1, 1, 1)\n    let sceneRotation = direction.times(q);\n    transform._setQuaternionRotation(Quaternion.FromQuaternion(sceneRotation));\n    //transform._setQuaternionRotation();\n    const glb = await this.loadModelFromFile(model, transform);\n\n    const b = this.materials.CreateShaderMaterial(MyMaterialNames.basicshader1);\n    const d = await ATexture.LoadAsync(texture);\n\n    b.setTexture('diffuse', d)\n    const a = new ExampleLoadedCharacterModel(\n      glb,\n      b\n    );\n    AddStandardUniforms(a.material);\n    this.addChild(a);\n  }\n\n  async initScene() {\n    await this.initGameTerrain();\n    await this.initGameHero();\n    await this.initParticles();\n\n    //add models\n    //cactus\n    await this.initModel(\"./models/gltf/cactus.glb\", \"./models/gltf/Cactus_diffuse.jpg\", 0.01, [2, 1, 0]);\n    await this.initModel(\"./models/gltf/cactus.glb\", \"./models/gltf/Cactus_diffuse.jpg\", 0.01, [8, 1, 0]);\n    await this.initModel(\"./models/gltf/cactus.glb\", \"./models/gltf/Cactus_diffuse.jpg\", 0.01, [20, 1, 0]);\n    //await this.initModel(\"./models/gltf/cactus.glb\", \"./models/gltf/Cactus_diffuse.jpg\", 0.01, [24, 1, 0]);\n    await this.initModel(\"./models/gltf/cactus.glb\", \"./models/gltf/Cactus_diffuse.jpg\", 0.01, [32, 1, 0]);\n    await this.initModel(\"./models/gltf/cactus.glb\", \"./models/gltf/Cactus_diffuse.jpg\", 0.01, [39, 1, 0]);\n    await this.initModel(\"./models/gltf/cactus.glb\", \"./models/gltf/Cactus_diffuse.jpg\", 0.01, [45, 1, 0]);\n    await this.initModel(\"./models/gltf/cactus.glb\", \"./models/gltf/Cactus_diffuse.jpg\", 0.01, [53, 1, 0]);\n    await this.initModel(\"./models/gltf/cactus.glb\", \"./models/gltf/Cactus_diffuse.jpg\", 0.01, [61, 1, 0]);\n\n    //scorpion\n    await this.initModel(\"./models/gltf/scorpion.glb\", \"./models/gltf/Scorpion_diffuse1.jpg\", 0.1, [6, 1, 0]);\n    await this.initModel(\"./models/gltf/scorpion.glb\", \"./models/gltf/Scorpion_diffuse1.jpg\", 0.1, [18, 1, 0], 0);\n    await this.initModel(\"./models/gltf/scorpion.glb\", \"./models/gltf/Scorpion_diffuse1.jpg\", 0.1, [66, 1, 0], 0);\n\n    //snake\n    await this.initModel(\"./models/gltf/snake.glb\", \"./models/gltf/Snake_diffuse.jpg\", 0.02, [4, 1, 0]);\n    await this.initModel(\"./models/gltf/snake.glb\", \"./models/gltf/Snake_diffuse.jpg\", 0.02, [12, 1, 0]);\n    await this.initModel(\"./models/gltf/snake.glb\", \"./models/gltf/Snake_diffuse.jpg\", 0.02, [62, 1, 0]);\n    await this.initModel(\"./models/gltf/snake.glb\", \"./models/gltf/Snake_diffuse.jpg\", 0.02, [44, 1, 0]);\n\n    //camels\n    await this.initModel(\"./models/gltf/camel.glb\", \"./models/gltf/Camel_diffuse1.jpg\", 0.01, [1, 1, 0], 1);\n    await this.initModel(\"./models/gltf/camel.glb\", \"./models/gltf/Camel_diffuse1.jpg\", 0.01, [3, 1, 0]);\n    await this.initModel(\"./models/gltf/camel.glb\", \"./models/gltf/Camel_diffuse1.jpg\", 0.01, [65, 1, 0], 1);\n    await this.initModel(\"./models/gltf/camel.glb\", \"./models/gltf/Camel_diffuse1.jpg\", 0.01, [43, 1, 0]);\n    await this.initModel(\"./models/gltf/camel.glb\", \"./models/gltf/Camel_diffuse1.jpg\", 0.01, [64, 1, 0], 1);\n\n    //tumbleweed\n    await this.initModel(\"./models/gltf/tumbleweed.glb\", \"./models/gltf/Tumbleweed_diffuse.jpg\", 0.2, [11, 1, 0]);\n    await this.initModel(\"./models/gltf/tumbleweed.glb\", \"./models/gltf/Tumbleweed_diffuse.jpg\", 0.2, [60, 1, 0]);\n    await this.initModel(\"./models/gltf/tumbleweed.glb\", \"./models/gltf/Tumbleweed_diffuse.jpg\", 0.2, [42, 1, 0]);\n\n    //palm tree\n    await this.initModel(\"./models/gltf/palm_tree.glb\", \"./models/gltf/Palm_tree_diffuse.jpg\", 0.009, [10, 1, -15]);\n    await this.initModel(\"./models/gltf/palm_tree.glb\", \"./models/gltf/Palm_tree_diffuse.jpg\", 0.5, [0, -10, -30]);\n    await this.initModel(\"./models/gltf/palm_tree.glb\", \"./models/gltf/Palm_tree_diffuse.jpg\", 0.009, [.5, 1, 0]);\n    // await this.initModel(\"./models/gltf/palm_tree.glb\", \"./models/gltf/Palm_tree_diffuse.jpg\", 0.009, [.5, 1, 0]);\n    // await this.initModel(\"./models/gltf/palm_tree.glb\", \"./models/gltf/Palm_tree_diffuse.jpg\", 0.009, [.5, 1, 0]);\n    // await this.initModel(\"./models/gltf/palm_tree.glb\", \"./models/gltf/Palm_tree_diffuse.jpg\", 0.009, [.5, 1, 0]);\n\n\n    //await this.initModel(\"./models/gltf/skull.glb\", \"./models/gltf/skull_diffuse.jpg\", 0.01, [-1, 1, 0]);\n    //await this.initModel(\"./models/gltf/dragon.glb\", \"./models/gltf/Dragon_diffuse.jpg\", 0.02, [1.7, 1, 0]);\n    //await this.initModel(\"./models/gltf/turtle.glb\", \"./models/gltf/Turtle_diffuse.jpg\", 0.01, [1.3, 1, 0]);\n    //await this.initModel(\"./models/gltf/palm_tree.glb\", \"./models/gltf/Palm_tree_diffuse.jpg\", 0.003, [.5, 1, 0]);\n    this.passedCheckpoints = 0;\n\n    /**\n     * Now let's initialize the view light\n     */\n    this.initViewLight();\n  }\n\n    async initParticles() {\n        // BillboardParticleSystemModel.AddParticleSystemControls();\n      const targetLength = this.currentLevel.fires.length;\n      for (let i = this.billboardParticles.length; i < targetLength; i++) {\n        const bp = new BillboardParticleSystemModel(new NodeTransform3D(V3(0, -999, 0)));\n        this.billboardParticles.push(bp);\n      }\n      for (let i = 0, j = this.currentLevel.fires.length; i < j; i++) {\n        const bp = this.billboardParticles[i];\n        bp.setDisable();\n        bp.myTransform.position = V3(0, -999, 0);\n      }\n    }\n\n  async updateLevel(level: LevelDefinition) {\n    this.currentLevel = level;\n    await this.initScene();\n  }\n\n  playerDie() {\n    this.player.position = new Vec3(...(\n      this.passedCheckpoints === 0 ? this.currentLevel.player : this.currentLevel.checkpoints[this.passedCheckpoints - 1][1]\n    ), 0);\n    this.player.velocity = new Vec3();\n    const q = new Quaternion(0, 0, 0);\n    this.player.transform._setQuaternionRotation(q);\n  }\n\n    timeUpdate(t: number, paused: boolean = false, ...args:any[]) {\n      /**\n       * We can call timeUpdate on all of the model nodes in the scene here, which will trigger any updates that they\n       * individually define.\n       */\n      for (let c of this.getDescendantList()) {\n        c.timeUpdate(t);\n      }\n\n      if (!paused) {\n        this.player.update(t - this.lastT, this.gameTerrains[this.currentLevel.name] || []);\n\n        if (this.player.position.y < -10 || t <= 0.5) {\n          this.playerDie();\n        }\n\n        const [\n          playerUpper,\n          playerRight,\n          playerLower,\n          playerLeft\n        ] = this.player.getFourBounds();\n        for (let i = 0, j = this.currentLevel.fires.length; i < j; i++) {\n          const [x, y] = this.currentLevel.fires[i];\n          const p = this.billboardParticles[i];\n          if (x < playerLeft - 10 || x > playerRight + 10 || y < playerLower - 10 || y > playerUpper + 10) {\n            if (!p.disabled) {\n              p.setDisable();\n              p.myTransform.position = V3(0, -999, 0);\n              p.parent?.removeChild(p);\n            }\n            continue;\n          } else {\n            if (p.disabled) {\n              p.disabled = false;\n              p.myTransform.position = V3(x + .5, y, 0);\n              this.addChild(p);\n            }\n          }\n          if (((playerLower < y + .8 && playerLower > y + .2) ||\n            (playerUpper > y + .2 && playerUpper < y + .8) ||\n              (playerLower < y + .2 && playerUpper > y + .8)) &&\n            ((playerLeft < x + .8 && playerLeft > x + .2) ||\n              (playerRight > x + .2 && playerRight < x + .8) ||\n              (playerLeft < x + .2 && playerRight > x + .8))) {\n            this.playerDie();\n          }\n        }\n\n        for (let i = this.passedCheckpoints, j = this.currentLevel.checkpoints.length; i < j; i++) {\n          if (Math.abs(this.player.velocity.y) < 0.01 && this.player.position.x >= this.currentLevel.checkpoints[i][0]) {\n            this.passedCheckpoints = Math.max(i + 1, this.passedCheckpoints);\n          }\n        }\n\n        if (Math.abs(this.cameraModel.pose.position.x - this.player.position.x) >= 0.01 ||\n          Math.abs(this.cameraModel.pose.position.y - this.player.position.y) >= 0.01) {\n\n          const cameraPos = this.cameraModel.pose.position.clone()\n          const playerPos = this.player.position.clone();\n          const playerVel = this.player.velocity.clone();\n          // higher gravity will look like player falling down harder\n          const g = AppConfigs.Gravity > 10 ? (AppConfigs.Gravity - 10) / 10 : 0\n          playerVel.y = playerVel.y < g * playerVel.y ? 0 : playerVel.y\n          // rate of camera movement, with 1 being camera on player at all times\n          const rate = (this.cameraModel.pose.position.y < this.player.position.y ? 0.04 : 0.05);\n          // 1.5 is how much screen moves with player\n          const velocityCamera = cameraPos.clone().plus(playerVel.clone().times(1.5))\n          const new_camera_pos = velocityCamera.clone().plus(playerPos.clone().minus(velocityCamera).times(rate))\n          new_camera_pos.z = 10;\n\n          const new_target_pos = new_camera_pos.clone()\n          new_target_pos.z = 0;\n\n          this.cameraModel.setPose(\n            NodeTransform3D.LookAt(\n              new_camera_pos, new_target_pos,\n              new Vec3(0, 1, 0)\n            )\n          );\n        }\n        this.cameraModel.signalCameraProjectionUpdate();\n      }\n\n      this.lastT = t;\n\n\n        // /**\n        //  * For interactions between models, we can trigger logic here. For example, if you want characters to walk on\n        //  * uneven terrain, you can make that happen by completing the functions used here:\n        //  */\n        // const self = this;\n        // function adjustHeight(character:Particle3D){\n        //     let height = self.terrain.getTerrainHeightAtPoint(character.position.xy);\n        //     if(character.position.z<height){character.position.z = height;}\n        // }\n        //\n        // /**\n        //  * Here we would apply our adjust height function to the player\n        //  */\n        // adjustHeight(this.player);\n        //\n        // /**\n        //  * Now lets update bots\n        //  */\n        // let orbitradius = 0.25;\n        // for(let ei=0;ei<this.bots.length;ei++){\n        //     let e = this.bots[ei];\n        //\n        //     /**\n        //      * Characters have velocity and mass properties in case you want to implement particle physics\n        //      * But for now we will just have them orbit each other.\n        //      */\n        //     e.position = new Vec3(Math.cos(t*(ei+1)), Math.sin(t*(ei+1)),0).times(orbitradius);\n        //\n        //     /**\n        //      * adjust their height\n        //      */\n        //     adjustHeight(e);\n        // }\n    }\n\n    getCoordinatesForCursorEvent(event: AInteractionEvent){\n        return event.ndcCursor??new Vec2();\n    }\n}\n\n\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,SAAQA,cAAc,EAAEC,YAAY,EAAsFC,KAAK,EAAEC,WAAW,EAAEC,eAAe,EAAEC,UAAU,EAAEC,EAAE,EAAEC,IAAI,EAAEC,IAAI,QAAsB,mBAAmB;AAClO,SAAQC,cAAc,QAAO,mBAAmB;AAChD,SAAQC,QAAQ,QAAO,iCAAiC;AACxD,SAAQC,gBAAgB,QAAO,gCAAgC;AAC/D,SAAQC,UAAU,QAAO,kBAAkB;AAC3C,SAAQC,WAAW,QAAO,qBAAqB;AAE/C,SAAQC,gBAAgB,QAAO,uCAAuC;AACtE,SAAQC,4BAA4B,QAAO,kCAAkC;AAE7E,SAAQC,WAAW,QAAO,6BAA6B;AAGvD,SAASC,2BAA2B,QAAQ,6CAA6C;AACzF,SAASC,mBAAmB,QAAQ,iCAAiC;AACrE,SAASC,oBAAoB,QAAQ,0CAA0C;AAC/E,SAASC,iBAAiB,QAAQ,uDAAuD;AAEzF,IAAIC,QAAQ,GAAGlB,WAAW,EAAE;AAAC,IAExBmB,eAAe;AAAA,WAAfA,eAAe;EAAfA,eAAe;EAAfA,eAAe;AAAA,GAAfA,eAAe,KAAfA,eAAe;AAKpB,OAAO,MAAMC,cAAc,SAASd,cAAc,CAAC;EAAA;IAAA;IAAA,KAEjDe,aAAa;IAAA,KAIbC,IAAI,GAAe,EAAE;IAAA,KACrBC,YAAY,GAA2C,CAAC,CAAC;IAAA,KACzDC,YAAY,GAAuB,EAAE;IAAA,KACrCC,YAAY,GAAoBZ,WAAW;IAAA,KAC3Ca,iBAAiB,GAAW,CAAC;IAAA,KACrBC,KAAK,GAAW,CAAC;IAAA,KACzBC,cAAc;IAAA,KACdC,kBAAkB,GAAkC,EAAE;IAAA,KACtDC,aAAa;IAAA,KAKbC,OAAO;IAAA,KAUPC,KAAK;EAAA;EARL,IAAIC,MAAM,GAAyB;IACjC,OAAO,IAAI,CAACF,OAAO;EACrB;EAEA,IAAIE,MAAM,CAACC,CAAuB,EAAE;IAClC,IAAI,CAACH,OAAO,GAAGG,CAAC;EAClB;EAGA,IAAIC,IAAI,GAA4B;IAClC,OAAO,IAAI,CAACH,KAAK;EACnB;EACA,IAAIG,IAAI,CAACD,CAA0B,EAAE;IACnC,IAAI,CAACF,KAAK,GAAGE,CAAC;EAChB;EAEA,MAAME,iBAAiB,CAACC,IAAY,EAAEC,SAA2B,EAAE;IACjE;AACJ;AACA;IACI,IAAIC,UAAU,GAAG,MAAM1C,cAAc,CAAC2C,YAAY,CAACH,IAAI,CAAC;IACxDE,UAAU,CAACE,eAAe,GAAGH,SAAS,aAATA,SAAS,cAATA,SAAS,GAAI,IAAIrC,eAAe,EAAE;IAC/D,OAAOsC,UAAU;EACnB;EAEA,MAAMG,aAAa,GAAG;IACpB,MAAM,KAAK,CAACA,aAAa,EAAE;IAC3B,MAAM/B,gBAAgB,CAACgC,UAAU,EAAE;IACnC,MAAMjC,WAAW,CAACiC,UAAU,EAAE;IAC9B;IACA,IAAIC,+BAA+B,GAAG,MAAM3B,iBAAiB,CAAC4B,WAAW,CAAC,gBAAgB,CAAC;IAC3F,MAAM,IAAI,CAACC,SAAS,CAACC,gBAAgB,CAAC,cAAc,EAAEH,+BAA+B,CAAC;;IAEtF;AACJ;AACA;AACA;AACA;IACIA,+BAA+B,CAACI,gBAAgB,GAAC,IAAI;;IAErD;AACJ;AACA;IACI,IAAI,CAACpB,cAAc,GAAG,IAAI,CAACkB,SAAS,CAACG,oBAAoB,CAAC,cAAc,CAAC;EAE3E;EAEAC,UAAU,GAAG;IACX,IAAI,CAACC,WAAW,GAAGrD,YAAY,CAACsD,oBAAoB,CAAC,EAAE,EAAE,CAAC,EAAE,IAAI,EAAE,EAAE,CAAC;IACrE,IAAI,CAACD,WAAW,CAACE,OAAO,CACtBpD,eAAe,CAACqD,MAAM,CACpBnD,EAAE,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,EAAEA,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAC1BA,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CACZ,CACF;EACH;;EAEA;AACF;AACA;EACEoD,aAAa,GAAG;IAEd,IAAI,IAAI,CAACC,SAAS,EAAE;;IAEpB;AACJ;AACA;AACA;IACI,IAAI,CAACA,SAAS,GAAG,IAAIhD,gBAAgB,CACnC,IAAI,CAACiD,MAAM,CAACC,IAAI,EAChB3D,KAAK,CAAC4D,UAAU,CAAC,SAAS,CAAC,EAC3B,GAAG,EACHlD,UAAU,CAACmD,cAAc,EACzB,CAAC,CACF;;IAED;AACJ;AACA;IACI,IAAI,CAACT,WAAW,CAACU,QAAQ,CAAC,IAAI,CAACL,SAAS,CAAC;EAC3C;EAEA,MAAMM,eAAe,GAAG;IACtB,IAAI,IAAI,CAACtC,YAAY,IAAI,IAAI,CAACD,YAAY,CAAC,IAAI,CAACE,YAAY,CAACsC,IAAI,CAAC,EAChE;IACF,KAAK,IAAIC,CAAC,IAAI,IAAI,CAACxC,YAAY,EAAE;MAC/BwC,CAAC,CAACC,QAAQ,CAACC,CAAC,IAAI,GAAG;IACrB;IACA,IAAI,IAAI,CAAC3C,YAAY,CAAC,IAAI,CAACE,YAAY,CAACsC,IAAI,CAAC,EAAE;MAC7C,IAAI,CAACvC,YAAY,GAAG,IAAI,CAACD,YAAY,CAAC,IAAI,CAACE,YAAY,CAACsC,IAAI,CAAC;MAC7D,KAAK,IAAIC,CAAC,IAAI,IAAI,CAACxC,YAAY,EAAE;QAC/BwC,CAAC,CAACC,QAAQ,CAACC,CAAC,IAAI,GAAG;MACrB;IACF,CAAC,MAAM;MACL,MAAMF,CAAC,GAAG,EAAE;MACZ,KAAK,IAAI,CAACG,EAAE,EAAEC,EAAE,EAAEC,CAAC,EAAEC,CAAC,CAAC,IAAI,IAAI,CAAC7C,YAAY,CAAC8C,QAAQ,EAAE;QACrD,IAAIC,OAAO,GAAG,MAAM7D,gBAAgB,CAAC8D,MAAM,CAACJ,CAAC,EAAEC,CAAC,CAAC;QACjDE,OAAO,CAACP,QAAQ,CAACS,CAAC,GAAGP,EAAE,GAAGE,CAAC,GAAG,CAAC;QAC/BG,OAAO,CAACP,QAAQ,CAACC,CAAC,GAAGE,EAAE,GAAGE,CAAC,GAAG,CAAC;QAC/BN,CAAC,CAACW,IAAI,CAACH,OAAO,CAAC;QACf,IAAI,CAACX,QAAQ,CAACW,OAAO,CAAC;MACxB;MACA,IAAI,CAACjD,YAAY,CAAC,IAAI,CAACE,YAAY,CAACsC,IAAI,CAAC,GAAGC,CAAC;MAC7C,IAAI,CAACxC,YAAY,GAAGwC,CAAC;IACvB;EACF;EAEA,MAAMY,YAAY,GAAG;IACnB,IAAI,CAAC,IAAI,CAAC3C,MAAM,EAAE;MAChB;MACA;MACA;MACA,IAAI,CAACZ,aAAa,GAAG,MAAMd,QAAQ,CAACsE,SAAS,CAAC,+BAA+B,CAAC;MAC9E,MAAMC,CAAC,GAAG,IAAI,CAAChC,SAAS,CAACG,oBAAoB,CAAC,cAAc,CAAC;MAC7D6B,CAAC,CAACC,UAAU,CAAC,SAAS,EAAE,IAAI,CAAC1D,aAAa,CAAC;MAC3C,IAAIiB,SAAS,GAAGrC,eAAe,CAAC+E,uBAAuB,CAAC7E,EAAE,CAAC,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,CAAC,EAAEE,IAAI,CAAC4E,KAAK,EAAE,CAACC,KAAK,CAAC,CAAC,CAAC,EAAE7E,IAAI,CAAC8E,KAAK,EAAE,CAACD,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC;MAC1H,MAAME,CAAC,GAAG,IAAIlF,UAAU,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;MACnCoC,SAAS,CAAC+C,sBAAsB,CAACD,CAAC,CAAC;MACnC,MAAME,GAAG,GAAG,MAAM,IAAI,CAAClD,iBAAiB,CAAC,uBAAuB,EAAEE,SAAS,CAAC;MAC5E,IAAI,CAACL,MAAM,GAAG,MAAMjB,oBAAoB,CAACyD,MAAM,CAACa,GAAG,EAAER,CAAC,CAAC;MACvD,IAAI,CAACjB,QAAQ,CAAC,IAAI,CAAC5B,MAAM,CAAC;IAC5B;IACA,IAAI,CAACA,MAAM,CAACgC,QAAQ,GAAG,IAAI5D,IAAI,CAAC,GAAG,IAAI,CAACoB,YAAY,CAACQ,MAAM,EAAE,CAAC,CAAC;EAMjE;EAEA,MAAMsD,SAAS,CAACC,KAAa,EAAEC,OAAe,EAAEC,KAAa,EAAEC,GAAkB,EAAiB;IAAA,IAAfC,GAAW,uEAAC,CAAC;IAC9F,IAAItD,SAAS,GAAGrC,eAAe,CAAC+E,uBAAuB,CAAC7E,EAAE,CAACwF,GAAG,CAAC,EAAEtF,IAAI,CAAC4E,KAAK,EAAE,CAACC,KAAK,CAAC,CAAC,CAAC,EAAE7E,IAAI,CAAC8E,KAAK,EAAE,CAACD,KAAK,CAAC,CAAC,CAAC,CAAC,EAAEQ,KAAK,CAAC;IACtH,IAAIG,SAAS,GAAG3F,UAAU,CAAC4F,SAAS,CAACC,IAAI,CAACC,EAAE,GAAGJ,GAAG,CAAC;IACnD,IAAIR,CAAC,GAAG,IAAIlF,UAAU,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IAC/B,IAAI+F,aAAa,GAAGJ,SAAS,CAACX,KAAK,CAACE,CAAC,CAAC;IACtC9C,SAAS,CAAC+C,sBAAsB,CAACnF,UAAU,CAACgG,cAAc,CAACD,aAAa,CAAC,CAAC;IAC1E;IACA,MAAMX,GAAG,GAAG,MAAM,IAAI,CAAClD,iBAAiB,CAACoD,KAAK,EAAElD,SAAS,CAAC;IAE1D,MAAMwC,CAAC,GAAG,IAAI,CAAChC,SAAS,CAACG,oBAAoB,CAAC9B,eAAe,CAACgF,YAAY,CAAC;IAC3E,MAAMC,CAAC,GAAG,MAAM7F,QAAQ,CAACsE,SAAS,CAACY,OAAO,CAAC;IAE3CX,CAAC,CAACC,UAAU,CAAC,SAAS,EAAEqB,CAAC,CAAC;IAC1B,MAAMC,CAAC,GAAG,IAAIvF,2BAA2B,CACvCwE,GAAG,EACHR,CAAC,CACF;IACD/D,mBAAmB,CAACsF,CAAC,CAACC,QAAQ,CAAC;IAC/B,IAAI,CAACzC,QAAQ,CAACwC,CAAC,CAAC;EAClB;EAEA,MAAME,SAAS,GAAG;IAChB,MAAM,IAAI,CAACzC,eAAe,EAAE;IAC5B,MAAM,IAAI,CAACc,YAAY,EAAE;IACzB,MAAM,IAAI,CAAC4B,aAAa,EAAE;;IAE1B;IACA;IACA,MAAM,IAAI,CAACjB,SAAS,CAAC,0BAA0B,EAAE,kCAAkC,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IACrG,MAAM,IAAI,CAACA,SAAS,CAAC,0BAA0B,EAAE,kCAAkC,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IACrG,MAAM,IAAI,CAACA,SAAS,CAAC,0BAA0B,EAAE,kCAAkC,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IACtG;IACA,MAAM,IAAI,CAACA,SAAS,CAAC,0BAA0B,EAAE,kCAAkC,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IACtG,MAAM,IAAI,CAACA,SAAS,CAAC,0BAA0B,EAAE,kCAAkC,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IACtG,MAAM,IAAI,CAACA,SAAS,CAAC,0BAA0B,EAAE,kCAAkC,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IACtG,MAAM,IAAI,CAACA,SAAS,CAAC,0BAA0B,EAAE,kCAAkC,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IACtG,MAAM,IAAI,CAACA,SAAS,CAAC,0BAA0B,EAAE,kCAAkC,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;;IAEtG;IACA,MAAM,IAAI,CAACA,SAAS,CAAC,4BAA4B,EAAE,qCAAqC,EAAE,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IACzG,MAAM,IAAI,CAACA,SAAS,CAAC,4BAA4B,EAAE,qCAAqC,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;IAC7G,MAAM,IAAI,CAACA,SAAS,CAAC,4BAA4B,EAAE,qCAAqC,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;;IAE7G;IACA,MAAM,IAAI,CAACA,SAAS,CAAC,yBAAyB,EAAE,iCAAiC,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IACnG,MAAM,IAAI,CAACA,SAAS,CAAC,yBAAyB,EAAE,iCAAiC,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IACpG,MAAM,IAAI,CAACA,SAAS,CAAC,yBAAyB,EAAE,iCAAiC,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IACpG,MAAM,IAAI,CAACA,SAAS,CAAC,yBAAyB,EAAE,iCAAiC,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;;IAEpG;IACA,MAAM,IAAI,CAACA,SAAS,CAAC,yBAAyB,EAAE,kCAAkC,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;IACvG,MAAM,IAAI,CAACA,SAAS,CAAC,yBAAyB,EAAE,kCAAkC,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IACpG,MAAM,IAAI,CAACA,SAAS,CAAC,yBAAyB,EAAE,kCAAkC,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;IACxG,MAAM,IAAI,CAACA,SAAS,CAAC,yBAAyB,EAAE,kCAAkC,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IACrG,MAAM,IAAI,CAACA,SAAS,CAAC,yBAAyB,EAAE,kCAAkC,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;;IAExG;IACA,MAAM,IAAI,CAACA,SAAS,CAAC,8BAA8B,EAAE,sCAAsC,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAC7G,MAAM,IAAI,CAACA,SAAS,CAAC,8BAA8B,EAAE,sCAAsC,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAC7G,MAAM,IAAI,CAACA,SAAS,CAAC,8BAA8B,EAAE,sCAAsC,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;;IAE7G;IACA,MAAM,IAAI,CAACA,SAAS,CAAC,6BAA6B,EAAE,qCAAqC,EAAE,KAAK,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IAC/G,MAAM,IAAI,CAACA,SAAS,CAAC,6BAA6B,EAAE,qCAAqC,EAAE,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC;IAC9G,MAAM,IAAI,CAACA,SAAS,CAAC,6BAA6B,EAAE,qCAAqC,EAAE,KAAK,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAC7G;IACA;IACA;;IAGA;IACA;IACA;IACA;IACA,IAAI,CAAC7D,iBAAiB,GAAG,CAAC;;IAE1B;AACJ;AACA;IACI,IAAI,CAAC6B,aAAa,EAAE;EACtB;EAEE,MAAMiD,aAAa,GAAG;IAClB;IACF,MAAMC,YAAY,GAAG,IAAI,CAAChF,YAAY,CAACiF,KAAK,CAACC,MAAM;IACnD,KAAK,IAAIC,CAAC,GAAG,IAAI,CAAC/E,kBAAkB,CAAC8E,MAAM,EAAEC,CAAC,GAAGH,YAAY,EAAEG,CAAC,EAAE,EAAE;MAClE,MAAMC,EAAE,GAAG,IAAIjG,4BAA4B,CAAC,IAAIX,eAAe,CAACE,EAAE,CAAC,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC;MAChF,IAAI,CAAC0B,kBAAkB,CAAC8C,IAAI,CAACkC,EAAE,CAAC;IAClC;IACA,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEE,CAAC,GAAG,IAAI,CAACrF,YAAY,CAACiF,KAAK,CAACC,MAAM,EAAEC,CAAC,GAAGE,CAAC,EAAEF,CAAC,EAAE,EAAE;MAC9D,MAAMC,EAAE,GAAG,IAAI,CAAChF,kBAAkB,CAAC+E,CAAC,CAAC;MACrCC,EAAE,CAACE,UAAU,EAAE;MACfF,EAAE,CAACG,WAAW,CAAC/C,QAAQ,GAAG9D,EAAE,CAAC,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;IAC1C;EACF;EAEF,MAAM8G,WAAW,CAACC,KAAsB,EAAE;IACxC,IAAI,CAACzF,YAAY,GAAGyF,KAAK;IACzB,MAAM,IAAI,CAACX,SAAS,EAAE;EACxB;EAEAY,SAAS,GAAG;IACV,IAAI,CAAClF,MAAM,CAACgC,QAAQ,GAAG,IAAI5D,IAAI,CAAC,IAC9B,IAAI,CAACqB,iBAAiB,KAAK,CAAC,GAAG,IAAI,CAACD,YAAY,CAACQ,MAAM,GAAG,IAAI,CAACR,YAAY,CAAC2F,WAAW,CAAC,IAAI,CAAC1F,iBAAiB,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CACvH,EAAE,CAAC,CAAC;IACL,IAAI,CAACO,MAAM,CAACoF,QAAQ,GAAG,IAAIhH,IAAI,EAAE;IACjC,MAAM+E,CAAC,GAAG,IAAIlF,UAAU,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IACjC,IAAI,CAAC+B,MAAM,CAACK,SAAS,CAAC+C,sBAAsB,CAACD,CAAC,CAAC;EACjD;EAEEkC,UAAU,CAACtD,CAAS,EAA0C;IAAA,IAAxCuD,MAAe,uEAAG,KAAK;IAC3C;AACN;AACA;AACA;IACM,KAAK,IAAIC,CAAC,IAAI,IAAI,CAACC,iBAAiB,EAAE,EAAE;MACtCD,CAAC,CAACF,UAAU,CAACtD,CAAC,CAAC;IACjB;IAEA,IAAI,CAACuD,MAAM,EAAE;MACX,IAAI,CAACtF,MAAM,CAACyF,MAAM,CAAC1D,CAAC,GAAG,IAAI,CAACrC,KAAK,EAAE,IAAI,CAACJ,YAAY,CAAC,IAAI,CAACE,YAAY,CAACsC,IAAI,CAAC,IAAI,EAAE,CAAC;MAEnF,IAAI,IAAI,CAAC9B,MAAM,CAACgC,QAAQ,CAACC,CAAC,GAAG,CAAC,EAAE,IAAIF,CAAC,IAAI,GAAG,EAAE;QAC5C,IAAI,CAACmD,SAAS,EAAE;MAClB;MAEA,MAAM,CACJQ,WAAW,EACXC,WAAW,EACXC,WAAW,EACXC,UAAU,CACX,GAAG,IAAI,CAAC7F,MAAM,CAAC8F,aAAa,EAAE;MAC/B,KAAK,IAAInB,CAAC,GAAG,CAAC,EAAEE,CAAC,GAAG,IAAI,CAACrF,YAAY,CAACiF,KAAK,CAACC,MAAM,EAAEC,CAAC,GAAGE,CAAC,EAAEF,CAAC,EAAE,EAAE;QAC9D,MAAM,CAAClC,CAAC,EAAER,CAAC,CAAC,GAAG,IAAI,CAACzC,YAAY,CAACiF,KAAK,CAACE,CAAC,CAAC;QACzC,MAAMoB,CAAC,GAAG,IAAI,CAACnG,kBAAkB,CAAC+E,CAAC,CAAC;QACpC,IAAIlC,CAAC,GAAGoD,UAAU,GAAG,EAAE,IAAIpD,CAAC,GAAGkD,WAAW,GAAG,EAAE,IAAI1D,CAAC,GAAG2D,WAAW,GAAG,EAAE,IAAI3D,CAAC,GAAGyD,WAAW,GAAG,EAAE,EAAE;UAC/F,IAAI,CAACK,CAAC,CAACC,QAAQ,EAAE;YAAA;YACfD,CAAC,CAACjB,UAAU,EAAE;YACdiB,CAAC,CAAChB,WAAW,CAAC/C,QAAQ,GAAG9D,EAAE,CAAC,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;YACvC,aAAA6H,CAAC,CAACE,MAAM,8CAAR,UAAUC,WAAW,CAACH,CAAC,CAAC;UAC1B;UACA;QACF,CAAC,MAAM;UACL,IAAIA,CAAC,CAACC,QAAQ,EAAE;YACdD,CAAC,CAACC,QAAQ,GAAG,KAAK;YAClBD,CAAC,CAAChB,WAAW,CAAC/C,QAAQ,GAAG9D,EAAE,CAACuE,CAAC,GAAG,EAAE,EAAER,CAAC,EAAE,CAAC,CAAC;YACzC,IAAI,CAACL,QAAQ,CAACmE,CAAC,CAAC;UAClB;QACF;QACA,IAAI,CAAEH,WAAW,GAAG3D,CAAC,GAAG,EAAE,IAAI2D,WAAW,GAAG3D,CAAC,GAAG,EAAE,IAC/CyD,WAAW,GAAGzD,CAAC,GAAG,EAAE,IAAIyD,WAAW,GAAGzD,CAAC,GAAG,EAAG,IAC3C2D,WAAW,GAAG3D,CAAC,GAAG,EAAE,IAAIyD,WAAW,GAAGzD,CAAC,GAAG,EAAG,MAC9C4D,UAAU,GAAGpD,CAAC,GAAG,EAAE,IAAIoD,UAAU,GAAGpD,CAAC,GAAG,EAAE,IACzCkD,WAAW,GAAGlD,CAAC,GAAG,EAAE,IAAIkD,WAAW,GAAGlD,CAAC,GAAG,EAAG,IAC7CoD,UAAU,GAAGpD,CAAC,GAAG,EAAE,IAAIkD,WAAW,GAAGlD,CAAC,GAAG,EAAG,CAAC,EAAE;UAClD,IAAI,CAACyC,SAAS,EAAE;QAClB;MACF;MAEA,KAAK,IAAIP,CAAC,GAAG,IAAI,CAAClF,iBAAiB,EAAEoF,CAAC,GAAG,IAAI,CAACrF,YAAY,CAAC2F,WAAW,CAACT,MAAM,EAAEC,CAAC,GAAGE,CAAC,EAAEF,CAAC,EAAE,EAAE;QACzF,IAAIb,IAAI,CAACqC,GAAG,CAAC,IAAI,CAACnG,MAAM,CAACoF,QAAQ,CAACnD,CAAC,CAAC,GAAG,IAAI,IAAI,IAAI,CAACjC,MAAM,CAACgC,QAAQ,CAACS,CAAC,IAAI,IAAI,CAACjD,YAAY,CAAC2F,WAAW,CAACR,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;UAC5G,IAAI,CAAClF,iBAAiB,GAAGqE,IAAI,CAACsC,GAAG,CAACzB,CAAC,GAAG,CAAC,EAAE,IAAI,CAAClF,iBAAiB,CAAC;QAClE;MACF;MAEA,IAAIqE,IAAI,CAACqC,GAAG,CAAC,IAAI,CAACjF,WAAW,CAACO,IAAI,CAACO,QAAQ,CAACS,CAAC,GAAG,IAAI,CAACzC,MAAM,CAACgC,QAAQ,CAACS,CAAC,CAAC,IAAI,IAAI,IAC7EqB,IAAI,CAACqC,GAAG,CAAC,IAAI,CAACjF,WAAW,CAACO,IAAI,CAACO,QAAQ,CAACC,CAAC,GAAG,IAAI,CAACjC,MAAM,CAACgC,QAAQ,CAACC,CAAC,CAAC,IAAI,IAAI,EAAE;QAE7E,MAAMoE,SAAS,GAAG,IAAI,CAACnF,WAAW,CAACO,IAAI,CAACO,QAAQ,CAACsE,KAAK,EAAE;QACxD,MAAMC,SAAS,GAAG,IAAI,CAACvG,MAAM,CAACgC,QAAQ,CAACsE,KAAK,EAAE;QAC9C,MAAME,SAAS,GAAG,IAAI,CAACxG,MAAM,CAACoF,QAAQ,CAACkB,KAAK,EAAE;QAC9C;QACA,MAAMG,CAAC,GAAGjI,UAAU,CAACkI,OAAO,GAAG,EAAE,GAAG,CAAClI,UAAU,CAACkI,OAAO,GAAG,EAAE,IAAI,EAAE,GAAG,CAAC;QACtEF,SAAS,CAACvE,CAAC,GAAGuE,SAAS,CAACvE,CAAC,GAAGwE,CAAC,GAAGD,SAAS,CAACvE,CAAC,GAAG,CAAC,GAAGuE,SAAS,CAACvE,CAAC;QAC7D;QACA,MAAM0E,IAAI,GAAI,IAAI,CAACzF,WAAW,CAACO,IAAI,CAACO,QAAQ,CAACC,CAAC,GAAG,IAAI,CAACjC,MAAM,CAACgC,QAAQ,CAACC,CAAC,GAAG,IAAI,GAAG,IAAK;QACtF;QACA,MAAM2E,cAAc,GAAGP,SAAS,CAACC,KAAK,EAAE,CAACO,IAAI,CAACL,SAAS,CAACF,KAAK,EAAE,CAACrD,KAAK,CAAC,GAAG,CAAC,CAAC;QAC3E,MAAM6D,cAAc,GAAGF,cAAc,CAACN,KAAK,EAAE,CAACO,IAAI,CAACN,SAAS,CAACD,KAAK,EAAE,CAACS,KAAK,CAACH,cAAc,CAAC,CAAC3D,KAAK,CAAC0D,IAAI,CAAC,CAAC;QACvGG,cAAc,CAACE,CAAC,GAAG,EAAE;QAErB,MAAMC,cAAc,GAAGH,cAAc,CAACR,KAAK,EAAE;QAC7CW,cAAc,CAACD,CAAC,GAAG,CAAC;QAEpB,IAAI,CAAC9F,WAAW,CAACE,OAAO,CACtBpD,eAAe,CAACqD,MAAM,CACpByF,cAAc,EAAEG,cAAc,EAC9B,IAAI7I,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAClB,CACF;MACH;MACA,IAAI,CAAC8C,WAAW,CAACgG,4BAA4B,EAAE;IACjD;IAEA,IAAI,CAACxH,KAAK,GAAGqC,CAAC;;IAGZ;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACJ;;EAEAoF,4BAA4B,CAACC,KAAwB,EAAC;IAAA;IAClD,2BAAOA,KAAK,CAACC,SAAS,+DAAE,IAAIlJ,IAAI,EAAE;EACtC;AACJ"},"metadata":{},"sourceType":"module"}