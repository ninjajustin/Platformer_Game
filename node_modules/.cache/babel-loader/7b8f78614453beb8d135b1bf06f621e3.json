{"ast":null,"code":"/**\n * @file Main scene controller for your application\n * @description This is where you connect models to views.\n * This is done mainly by defining your model view spec and interaction modes.\n */\n\nimport { BaseSceneController } from \"../../BaseClasses\";\nimport { ATriangleMeshModel, ATriangleMeshView } from \"../../../anigraph/scene/nodes\";\nimport { ADebugInteractionMode } from \"../../../anigraph/scene/interactionmodes/ADebugInteractionMode\";\nimport { TerrainModel, TerrainView } from \"../Nodes/Terrain\";\nimport { APointLightModel, APointLightView } from \"../../../anigraph/scene/lights\";\nimport { PlayerModel, PlayerView } from \"../Nodes/PlayerNode\";\nimport { ExamplePlayerInteractionMode } from \"../InteractionModes/ExamplePlayerInteractionMode\";\nimport { BotModel } from \"../Nodes/CharacterNodes/BotModel\";\nimport { BotView } from \"../Nodes/CharacterNodes/BotView\";\nimport { ExampleThreeJSNodeModel, ExampleThreeJSNodeView } from \"../Nodes/ExampleNodes/ExampleThreeJSNode\";\nimport { ExampleParticleSystemModel } from \"../Nodes/ExampleNodes/ExampleParticleSystemNode/ExampleParticleSystemModel\";\nimport { ExampleParticleSystemView } from \"../Nodes/ExampleNodes/ExampleParticleSystemNode/ExampleParticleSystemView\";\nimport * as THREE from \"three\";\nimport { ExamplePointerLockInteractionMode } from \"../InteractionModes/ExamplePointerLockInteractionMode\";\nexport class MainSceneController extends BaseSceneController {\n  get model() {\n    return this._model;\n  }\n\n  /**\n   * This is where you specify the mapping from model classes to view classes.\n   */\n  initModelViewSpecs() {\n    this.addModelViewSpec(APointLightModel, APointLightView);\n    this.addModelViewSpec(ATriangleMeshModel, ATriangleMeshView);\n    this.addModelViewSpec(TerrainModel, TerrainView);\n    this.addModelViewSpec(PlayerModel, PlayerView);\n    this.addModelViewSpec(BotModel, BotView);\n    this.addModelViewSpec(ExampleThreeJSNodeModel, ExampleThreeJSNodeView);\n    this.addModelViewSpec(ExampleParticleSystemModel, ExampleParticleSystemView);\n  }\n  async initScene() {\n    /**\n     * Set up the skybox background\n     */\n    await super.initScene();\n    let path = './images/cube/MilkyWay/dark-s_';\n    let format = '.jpg';\n    const urls = [path + 'px' + format, path + 'nx' + format, path + 'py' + format, path + 'ny' + format, path + 'pz' + format, path + 'nz' + format];\n\n    /**\n     * If you want to change the skybox, you will need to provide the appropriate urls to the corresponding textures\n     * from a cube map\n     */\n    const reflectionCube = new THREE.CubeTextureLoader().load(urls);\n    reflectionCube.rotation = Math.PI * 0.25;\n    this.view.threejs.background = reflectionCube;\n  }\n  initInteractions() {\n    /**\n     * We will define the debug interaction mode here.\n     * The debug mode is offered mainly to provide camera controls for developing and debugging non-control-related\n     * features. It may also be useful as an example for you to look at if you like.\n     */\n    super.initInteractions();\n    let debugInteractionMode = new ADebugInteractionMode(this);\n    this.defineInteractionMode(\"Debug\", debugInteractionMode);\n\n    /**\n     * This code adds the ExamplePlayer interaction mode and sets it as the current active mode\n     */\n    let playerInteractionMode = new ExamplePlayerInteractionMode(this);\n    this.defineInteractionMode(\"ExamplePlayer\", playerInteractionMode);\n    let pointerLockInteractionMode = new ExamplePointerLockInteractionMode(this);\n    this.defineInteractionMode(\"ExamplePointerLock\", pointerLockInteractionMode);\n\n    /**\n     * For starters we will default to the debug mode.\n     */\n    this.setCurrentInteractionMode(\"Debug\");\n  }\n  onAnimationFrameCallback(context) {\n    // let's update the model\n    let time = this.time;\n    this.model.timeUpdate(time);\n\n    /**\n     * And the interaction mode... This is important for things like camera motion filtering.\n     */\n    this.interactionMode.timeUpdate(time);\n\n    // clear the rendering context\n    context.renderer.clear();\n    // this.renderer.clear(false, true);\n\n    // render the scene view\n    context.renderer.render(this.view.threejs, this._threeCamera);\n  }\n}","map":{"version":3,"names":["BaseSceneController","ATriangleMeshModel","ATriangleMeshView","ADebugInteractionMode","TerrainModel","TerrainView","APointLightModel","APointLightView","PlayerModel","PlayerView","ExamplePlayerInteractionMode","BotModel","BotView","ExampleThreeJSNodeModel","ExampleThreeJSNodeView","ExampleParticleSystemModel","ExampleParticleSystemView","THREE","ExamplePointerLockInteractionMode","MainSceneController","model","_model","initModelViewSpecs","addModelViewSpec","initScene","path","format","urls","reflectionCube","CubeTextureLoader","load","rotation","Math","PI","view","threejs","background","initInteractions","debugInteractionMode","defineInteractionMode","playerInteractionMode","pointerLockInteractionMode","setCurrentInteractionMode","onAnimationFrameCallback","context","time","timeUpdate","interactionMode","renderer","clear","render","_threeCamera"],"sources":["/Users/home/Desktop/cs4620-final-project/src/app/main/Scene/MainSceneController.ts"],"sourcesContent":["/**\n * @file Main scene controller for your application\n * @description This is where you connect models to views.\n * This is done mainly by defining your model view spec and interaction modes.\n */\n\n\nimport {BaseSceneController} from \"../../BaseClasses\";\nimport {\n    AGLContext,\n} from \"../../../anigraph\";\nimport {ATriangleMeshModel, ATriangleMeshView} from \"../../../anigraph/scene/nodes\";\nimport {ADebugInteractionMode} from \"../../../anigraph/scene/interactionmodes/ADebugInteractionMode\";\nimport {TerrainModel, TerrainView} from \"../Nodes/Terrain\";\n\nimport {APointLightModel, APointLightView} from \"../../../anigraph/scene/lights\";\nimport {PlayerModel, PlayerView} from \"../Nodes/PlayerNode\";\nimport {MainSceneModel} from \"./MainSceneModel\";\nimport {ExamplePlayerInteractionMode} from \"../InteractionModes/ExamplePlayerInteractionMode\";\nimport {BotModel} from \"../Nodes/CharacterNodes/BotModel\";\nimport {BotView} from \"../Nodes/CharacterNodes/BotView\";\nimport {ExampleThreeJSNodeModel, ExampleThreeJSNodeView} from \"../Nodes/ExampleNodes/ExampleThreeJSNode\";\nimport {ExampleParticleSystemModel} from \"../Nodes/ExampleNodes/ExampleParticleSystemNode/ExampleParticleSystemModel\";\nimport {ExampleParticleSystemView} from \"../Nodes/ExampleNodes/ExampleParticleSystemNode/ExampleParticleSystemView\";\nimport {AppConfigs} from \"../../AppConfigs\";\nimport * as THREE from \"three\";\nimport {ExamplePointerLockInteractionMode} from \"../InteractionModes/ExamplePointerLockInteractionMode\";\n\nexport class MainSceneController extends BaseSceneController{\n    get model():MainSceneModel{\n        return this._model as MainSceneModel;\n    }\n\n    /**\n     * This is where you specify the mapping from model classes to view classes.\n     */\n    initModelViewSpecs(): void {\n        this.addModelViewSpec(APointLightModel, APointLightView);\n        this.addModelViewSpec(ATriangleMeshModel, ATriangleMeshView);\n        this.addModelViewSpec(TerrainModel, TerrainView);\n        this.addModelViewSpec(PlayerModel, PlayerView);\n        this.addModelViewSpec(BotModel, BotView);\n        this.addModelViewSpec(ExampleThreeJSNodeModel, ExampleThreeJSNodeView);\n        this.addModelViewSpec(ExampleParticleSystemModel, ExampleParticleSystemView);\n    }\n\n    async initScene(): Promise<void> {\n        /**\n         * Set up the skybox background\n         */\n        await super.initScene();\n        let path = './images/cube/MilkyWay/dark-s_';\n        let format = '.jpg'\n        const urls = [\n            path + 'px' + format, path + 'nx' + format,\n            path + 'py' + format, path + 'ny' + format,\n            path + 'pz' + format, path + 'nz' + format\n        ];\n\n        /**\n         * If you want to change the skybox, you will need to provide the appropriate urls to the corresponding textures\n         * from a cube map\n         */\n        const reflectionCube = new THREE.CubeTextureLoader().load( urls );\n        reflectionCube.rotation = Math.PI*0.25;\n        this.view.threejs.background = reflectionCube;\n    }\n\n    initInteractions() {\n\n        /**\n         * We will define the debug interaction mode here.\n         * The debug mode is offered mainly to provide camera controls for developing and debugging non-control-related\n         * features. It may also be useful as an example for you to look at if you like.\n         */\n        super.initInteractions();\n        let debugInteractionMode = new ADebugInteractionMode(this);\n        this.defineInteractionMode(\"Debug\", debugInteractionMode);\n\n\n        /**\n         * This code adds the ExamplePlayer interaction mode and sets it as the current active mode\n         */\n        let playerInteractionMode = new ExamplePlayerInteractionMode(this);\n        this.defineInteractionMode(\"ExamplePlayer\", playerInteractionMode);\n\n\n        let pointerLockInteractionMode = new ExamplePointerLockInteractionMode(this);\n        this.defineInteractionMode(\"ExamplePointerLock\", pointerLockInteractionMode);\n\n        /**\n         * For starters we will default to the debug mode.\n         */\n        this.setCurrentInteractionMode(\"Debug\")\n\n    }\n\n    onAnimationFrameCallback(context:AGLContext) {\n        // let's update the model\n        let time = this.time;\n        this.model.timeUpdate(time);\n\n        /**\n         * And the interaction mode... This is important for things like camera motion filtering.\n         */\n        this.interactionMode.timeUpdate(time)\n\n        // clear the rendering context\n        context.renderer.clear();\n        // this.renderer.clear(false, true);\n\n        // render the scene view\n        context.renderer.render(this.view.threejs, this._threeCamera);\n    }\n\n}\n\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}