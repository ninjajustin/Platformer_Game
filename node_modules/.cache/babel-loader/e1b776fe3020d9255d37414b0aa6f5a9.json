{"ast":null,"code":"import { PixelDataFloat4D } from \"./pixeldata\";\nimport { ADataTexture } from \"./ADataTexture\";\nexport class ADataTextureFloat4D extends ADataTexture {\n  static CreateSolid(width, height, fill) {\n    let imdata = new Float32Array(width * height * 4);\n    if (Array.isArray(fill)) {\n      for (let p = 0; p < width * height; p++) {\n        imdata.set(fill, p * 4);\n      }\n    } else if (fill !== undefined) {\n      imdata.fill(fill);\n    }\n    let newDTex = new ADataTextureFloat4D(PixelDataFloat4D.CreateBlock(width, height, imdata));\n    return newDTex;\n  }\n  setPixelNN(x, y, value) {\n    super.setPixelNN(x, y, value);\n  }\n  static Create(width, height, dataArray) {\n    dataArray = dataArray ? dataArray : new Float32Array(width * height * 4);\n    let newDTex = new ADataTextureFloat4D(PixelDataFloat4D.CreateBlock(width, height, dataArray));\n    return newDTex;\n  }\n  init(data) {\n    this.setPixelData(data);\n  }\n}","map":{"version":3,"names":["PixelDataFloat4D","ADataTexture","ADataTextureFloat4D","CreateSolid","width","height","fill","imdata","Float32Array","Array","isArray","p","set","undefined","newDTex","CreateBlock","setPixelNN","x","y","value","Create","dataArray","init","data","setPixelData"],"sources":["/Users/home/Desktop/cs4620-final-project/src/anigraph/rendering/image/ADataTextureFloat4D.ts"],"sourcesContent":["import {PixelDataFloat4D} from \"./pixeldata\";\nimport {ADataTexture} from \"./ADataTexture\";\n\nexport class ADataTextureFloat4D extends ADataTexture<PixelDataFloat4D>{\n\n    static CreateSolid(width:number, height:number, fill?:number|number[]){\n        let imdata = new Float32Array(width*height*4);\n        if(Array.isArray(fill)){\n            for(let p=0;p<width*height;p++){\n                imdata.set(fill, p*4)\n            }\n        }else if(fill !== undefined){\n            imdata.fill(fill);\n        }\n        let newDTex = new ADataTextureFloat4D(PixelDataFloat4D.CreateBlock(width, height, imdata));\n        return newDTex;\n    }\n\n    setPixelNN(x: number, y: number, value: number) {\n        super.setPixelNN(x, y, value);\n    }\n\n    static Create(width:number, height:number, dataArray?:Float32Array, ...args:any[]){\n        dataArray = dataArray?dataArray:new Float32Array(width*height*4);\n        let newDTex = new ADataTextureFloat4D(PixelDataFloat4D.CreateBlock(width, height, dataArray));\n        return newDTex;\n    }\n\n    init(data:PixelDataFloat4D, ...args:any[]){\n        this.setPixelData(data);\n    }\n\n}\n"],"mappings":"AAAA,SAAQA,gBAAgB,QAAO,aAAa;AAC5C,SAAQC,YAAY,QAAO,gBAAgB;AAE3C,OAAO,MAAMC,mBAAmB,SAASD,YAAY,CAAkB;EAEnE,OAAOE,WAAW,CAACC,KAAY,EAAEC,MAAa,EAAEC,IAAqB,EAAC;IAClE,IAAIC,MAAM,GAAG,IAAIC,YAAY,CAACJ,KAAK,GAACC,MAAM,GAAC,CAAC,CAAC;IAC7C,IAAGI,KAAK,CAACC,OAAO,CAACJ,IAAI,CAAC,EAAC;MACnB,KAAI,IAAIK,CAAC,GAAC,CAAC,EAACA,CAAC,GAACP,KAAK,GAACC,MAAM,EAACM,CAAC,EAAE,EAAC;QAC3BJ,MAAM,CAACK,GAAG,CAACN,IAAI,EAAEK,CAAC,GAAC,CAAC,CAAC;MACzB;IACJ,CAAC,MAAK,IAAGL,IAAI,KAAKO,SAAS,EAAC;MACxBN,MAAM,CAACD,IAAI,CAACA,IAAI,CAAC;IACrB;IACA,IAAIQ,OAAO,GAAG,IAAIZ,mBAAmB,CAACF,gBAAgB,CAACe,WAAW,CAACX,KAAK,EAAEC,MAAM,EAAEE,MAAM,CAAC,CAAC;IAC1F,OAAOO,OAAO;EAClB;EAEAE,UAAU,CAACC,CAAS,EAAEC,CAAS,EAAEC,KAAa,EAAE;IAC5C,KAAK,CAACH,UAAU,CAACC,CAAC,EAAEC,CAAC,EAAEC,KAAK,CAAC;EACjC;EAEA,OAAOC,MAAM,CAAChB,KAAY,EAAEC,MAAa,EAAEgB,SAAuB,EAAgB;IAC9EA,SAAS,GAAGA,SAAS,GAACA,SAAS,GAAC,IAAIb,YAAY,CAACJ,KAAK,GAACC,MAAM,GAAC,CAAC,CAAC;IAChE,IAAIS,OAAO,GAAG,IAAIZ,mBAAmB,CAACF,gBAAgB,CAACe,WAAW,CAACX,KAAK,EAAEC,MAAM,EAAEgB,SAAS,CAAC,CAAC;IAC7F,OAAOP,OAAO;EAClB;EAEAQ,IAAI,CAACC,IAAqB,EAAgB;IACtC,IAAI,CAACC,YAAY,CAACD,IAAI,CAAC;EAC3B;AAEJ"},"metadata":{},"sourceType":"module"}