{"ast":null,"code":"import * as THREE from \"three\";\nimport { ShaderManager } from \"../ShaderManager\";\n// @ts-ignore\nTHREE.UniformsLib.line = {\n  worldUnits: {\n    value: 1\n  },\n  linewidth: {\n    value: 1\n  },\n  resolution: {\n    value: new THREE.Vector2(1, 1)\n  },\n  dashOffset: {\n    value: 0\n  },\n  dashScale: {\n    value: 1\n  },\n  dashSize: {\n    value: 1\n  },\n  gapSize: {\n    value: 1\n  } // todo FIX - maybe change to totalSize\n};\n\nShaderManager.LoadShader('line', 'line/line.vert.glsl', 'line/line.frag.glsl').then(programSounrce => {\n  // ShaderManager.GetShaderSource('line').sourcesLoadedPromise.then();\n  programSounrce.sourcesLoadedPromise.then(loadedProgrameSource => {\n    THREE.ShaderLib['line'] = {\n      uniforms: THREE.UniformsUtils.merge([THREE.UniformsLib.common, THREE.UniformsLib.fog,\n      // @ts-ignore\n      THREE.UniformsLib.line]),\n      vertexShader: programSounrce.vertexSource,\n      fragmentShader: programSounrce.fragSource\n    };\n  });\n});\nlet ShaderLibLineDict = {\n  uniforms: THREE.UniformsUtils.merge([THREE.UniformsLib.common, THREE.UniformsLib.fog, {\n    worldUnits: {\n      value: 1\n    },\n    linewidth: {\n      value: 1\n    },\n    resolution: {\n      value: new THREE.Vector2(1, 1)\n    },\n    dashOffset: {\n      value: 0\n    },\n    dashScale: {\n      value: 1\n    },\n    dashSize: {\n      value: 1\n    },\n    gapSize: {\n      value: 1\n    } // todo FIX - maybe change to totalSize\n  }])\n};\n\nexport class AThreeJSLineMaterial extends THREE.ShaderMaterial {\n  get color() {\n    return this.uniforms.diffuse.value;\n  }\n  set color(value) {\n    this.uniforms.diffuse.value = value;\n  }\n  constructor(parameters) {\n    // @ts-ignore\n    super({\n      type: 'LineMaterial',\n      uniforms: THREE.UniformsUtils.clone(ShaderLibLineDict.uniforms),\n      clipping: true,\n      // required for clipping support,\n      vertexColors: true,\n      ...parameters\n    });\n    this.isLineMaterial = true;\n    const self = this;\n    function initUniform(name, value, type) {\n      if (self.uniforms[name] === undefined) {\n        let uval = {\n          value: value\n        };\n        if (type !== undefined) {\n          uval['type'] = type;\n        }\n        // @ts-ignore\n        self.uniforms[name] = uval;\n      }\n    }\n    initUniform('diffuse', new THREE.Color(0, 1, 0));\n    initUniform('opacity', 1);\n    initUniform('linewidth', AThreeJSLineMaterial.DEFAULT_LINE_WIDTH);\n    // initUniform('dashScale', AThreeJSLineMaterial.DEFAULT_LINE_WIDTH);\n\n    Object.defineProperties(this, {\n      // color: {\n      //     enumerable: true,\n      //     get: function () {\n      //         return this.uniforms.diffuse.value;\n      //     },\n      //     set: function (value) {\n      //         this.uniforms.diffuse.value = value;\n      //     }\n      // },\n      worldUnits: {\n        enumerable: true,\n        get: function () {\n          return 'WORLD_UNITS' in this.defines;\n        },\n        set: function (value) {\n          if (value === true) {\n            this.defines.WORLD_UNITS = '';\n          } else {\n            delete this.defines.WORLD_UNITS;\n          }\n        }\n      },\n      linewidth: {\n        enumerable: true,\n        get: function () {\n          return this.uniforms.linewidth.value;\n        },\n        set: function (value) {\n          this.uniforms.linewidth.value = value;\n        }\n      },\n      dashed: {\n        enumerable: true,\n        get: function () {\n          return Boolean('USE_DASH' in this.defines);\n        },\n        set(value) {\n          if (Boolean(value) !== Boolean('USE_DASH' in this.defines)) {\n            this.needsUpdate = true;\n          }\n          if (value === true) {\n            this.defines.USE_DASH = '';\n          } else {\n            delete this.defines.USE_DASH;\n          }\n        }\n      },\n      dashScale: {\n        enumerable: true,\n        get: function () {\n          return this.uniforms.dashScale.value;\n        },\n        set: function (value) {\n          this.uniforms.dashScale.value = value;\n        }\n      },\n      dashSize: {\n        enumerable: true,\n        get: function () {\n          return this.uniforms.dashSize.value;\n        },\n        set: function (value) {\n          this.uniforms.dashSize.value = value;\n        }\n      },\n      dashOffset: {\n        enumerable: true,\n        get: function () {\n          return this.uniforms.dashOffset.value;\n        },\n        set: function (value) {\n          this.uniforms.dashOffset.value = value;\n        }\n      },\n      gapSize: {\n        enumerable: true,\n        get: function () {\n          return this.uniforms.gapSize.value;\n        },\n        set: function (value) {\n          this.uniforms.gapSize.value = value;\n        }\n      },\n      opacity: {\n        enumerable: true,\n        get: function () {\n          return this.uniforms.opacity.value;\n        },\n        set: function (value) {\n          this.uniforms.opacity.value = value;\n        }\n      },\n      resolution: {\n        enumerable: true,\n        get: function () {\n          return this.uniforms.resolution.value;\n        },\n        set: function (value) {\n          this.uniforms.resolution.value.copy(value);\n        }\n      },\n      alphaToCoverage: {\n        enumerable: true,\n        get: function () {\n          return Boolean('USE_ALPHA_TO_COVERAGE' in this.defines);\n        },\n        set: function (value) {\n          if (Boolean(value) !== Boolean('USE_ALPHA_TO_COVERAGE' in this.defines)) {\n            this.needsUpdate = true;\n          }\n          if (value === true) {\n            this.defines.USE_ALPHA_TO_COVERAGE = '';\n            this.extensions.derivatives = true;\n          } else {\n            delete this.defines.USE_ALPHA_TO_COVERAGE;\n            this.extensions.derivatives = false;\n          }\n        }\n      }\n    });\n    this.setValues(parameters);\n  }\n}\nAThreeJSLineMaterial.DEFAULT_LINE_WIDTH = 0.01;","map":{"version":3,"names":["THREE","ShaderManager","UniformsLib","line","worldUnits","value","linewidth","resolution","Vector2","dashOffset","dashScale","dashSize","gapSize","LoadShader","then","programSounrce","sourcesLoadedPromise","loadedProgrameSource","ShaderLib","uniforms","UniformsUtils","merge","common","fog","vertexShader","vertexSource","fragmentShader","fragSource","ShaderLibLineDict","AThreeJSLineMaterial","ShaderMaterial","color","diffuse","constructor","parameters","type","clone","clipping","vertexColors","isLineMaterial","self","initUniform","name","undefined","uval","Color","DEFAULT_LINE_WIDTH","Object","defineProperties","enumerable","get","defines","set","WORLD_UNITS","dashed","Boolean","needsUpdate","USE_DASH","opacity","copy","alphaToCoverage","USE_ALPHA_TO_COVERAGE","extensions","derivatives","setValues"],"sources":["/Users/home/Desktop/College/Fall 2022/CS_4620/cs4620-final-project/src/anigraph/rendering/material/threeMaterials/AThreeJSLineMaterial.ts"],"sourcesContent":["import * as THREE from \"three\";\nimport {ShaderMaterialParameters} from \"three/src/materials/ShaderMaterial\";\nimport {AShaderProgramSource, ShaderManager} from \"../ShaderManager\";\nimport {MaterialParameters, Vector2} from \"three/src/Three\";\n\n// import {\n//     ShaderLib,\n//     ShaderMaterial,\n//     UniformsLib,\n//     UniformsUtils,\n//     Vector2\n// } from 'three';\n\n\nexport interface LineMaterialParameters extends MaterialParameters {\n    alphaToCoverage?: boolean | undefined;\n    color?: number | undefined;\n    dashed?: boolean | undefined;\n    dashScale?: number | undefined;\n    dashSize?: number | undefined;\n    dashOffset?: number | undefined;\n    gapSize?: number | undefined;\n    linewidth?: number | undefined;\n    resolution?: Vector2 | undefined;\n    wireframe?: boolean | undefined;\n    worldUnits?: boolean | undefined;\n}\n\n// @ts-ignore\nTHREE.UniformsLib.line = {\n    worldUnits: { value: 1 },\n    linewidth: { value: 1 },\n    resolution: { value: new THREE.Vector2( 1, 1 ) },\n    dashOffset: { value: 0 },\n    dashScale: { value: 1 },\n    dashSize: { value: 1 },\n    gapSize: { value: 1 } // todo FIX - maybe change to totalSize\n\n};\n\nShaderManager.LoadShader('line', 'line/line.vert.glsl', 'line/line.frag.glsl').then((programSounrce:AShaderProgramSource)=>{\n    // ShaderManager.GetShaderSource('line').sourcesLoadedPromise.then();\n    programSounrce.sourcesLoadedPromise.then((loadedProgrameSource)=> {\n        THREE.ShaderLib['line'] = {\n            uniforms: THREE.UniformsUtils.merge([\n                THREE.UniformsLib.common,\n                THREE.UniformsLib.fog,\n                // @ts-ignore\n                THREE.UniformsLib.line\n            ]),\n\n            vertexShader: programSounrce.vertexSource,\n            fragmentShader: programSounrce.fragSource\n        };\n    });\n});\n\n\nlet ShaderLibLineDict = {\n    uniforms: THREE.UniformsUtils.merge([\n        THREE.UniformsLib.common,\n        THREE.UniformsLib.fog,\n        {\n            worldUnits: {value: 1},\n            linewidth: {value: 1},\n            resolution: {value: new THREE.Vector2(1, 1)},\n            dashOffset: {value: 0},\n            dashScale: {value: 1},\n            dashSize: {value: 1},\n            gapSize: {value: 1} // todo FIX - maybe change to totalSize\n        }\n    ])\n}\n\n\nexport class AThreeJSLineMaterial extends THREE.ShaderMaterial {\n    isLineMaterial:boolean=true;\n    static DEFAULT_LINE_WIDTH=0.01;\n\n    get color(){\n        return this.uniforms.diffuse.value;\n    }\n\n    set color(value:THREE.Color){\n        this.uniforms.diffuse.value = value;\n    }\n\n    constructor(parameters:ShaderMaterialParameters) {\n        // @ts-ignore\n        super({type: 'LineMaterial',\n            uniforms: THREE.UniformsUtils.clone(ShaderLibLineDict.uniforms),\n            clipping: true, // required for clipping support,\n            vertexColors: true,\n                ...parameters\n        });\n\n        const self = this;\n        function initUniform(name:string, value:any, type?:string){\n            if(self.uniforms[name] === undefined) {\n                let uval: { [name: string]: any } = {value: value};\n                if (type !== undefined) {\n                    uval['type'] = type;\n                }\n                // @ts-ignore\n                self.uniforms[name] = uval;\n            }\n        }\n\n        initUniform('diffuse', new THREE.Color(0,1,0));\n        initUniform('opacity', 1);\n        initUniform('linewidth', AThreeJSLineMaterial.DEFAULT_LINE_WIDTH);\n        // initUniform('dashScale', AThreeJSLineMaterial.DEFAULT_LINE_WIDTH);\n\n\n        Object.defineProperties(this, {\n            // color: {\n            //     enumerable: true,\n            //     get: function () {\n            //         return this.uniforms.diffuse.value;\n            //     },\n            //     set: function (value) {\n            //         this.uniforms.diffuse.value = value;\n            //     }\n            // },\n            worldUnits: {\n                enumerable: true,\n                get: function () {\n                    return 'WORLD_UNITS' in this.defines;\n                },\n                set: function (value) {\n                    if (value === true) {\n                        this.defines.WORLD_UNITS = '';\n                    } else {\n                        delete this.defines.WORLD_UNITS;\n                    }\n                }\n            },\n            linewidth: {\n                enumerable: true,\n                get: function () {\n                    return this.uniforms.linewidth.value;\n                },\n                set: function (value) {\n                    this.uniforms.linewidth.value = value;\n                }\n            },\n            dashed: {\n                enumerable: true,\n                get: function () {\n                    return Boolean('USE_DASH' in this.defines);\n                },\n                set(value) {\n                    if (Boolean(value) !== Boolean('USE_DASH' in this.defines)) {\n                        this.needsUpdate = true;\n                    }\n                    if (value === true) {\n                        this.defines.USE_DASH = '';\n                    } else {\n                        delete this.defines.USE_DASH;\n                    }\n                }\n            },\n            dashScale: {\n                enumerable: true,\n                get: function () {\n                    return this.uniforms.dashScale.value;\n                },\n                set: function (value) {\n                    this.uniforms.dashScale.value = value;\n                }\n            },\n            dashSize: {\n                enumerable: true,\n                get: function () {\n                    return this.uniforms.dashSize.value;\n                },\n                set: function (value) {\n                    this.uniforms.dashSize.value = value;\n                }\n            },\n            dashOffset: {\n                enumerable: true,\n                get: function () {\n                    return this.uniforms.dashOffset.value;\n                },\n                set: function (value) {\n                    this.uniforms.dashOffset.value = value;\n                }\n            },\n            gapSize: {\n                enumerable: true,\n                get: function () {\n                    return this.uniforms.gapSize.value;\n                },\n                set: function (value) {\n                    this.uniforms.gapSize.value = value;\n                }\n            },\n            opacity: {\n                enumerable: true,\n                get: function () {\n                    return this.uniforms.opacity.value;\n                },\n                set: function (value) {\n                    this.uniforms.opacity.value = value;\n                }\n            },\n            resolution: {\n                enumerable: true,\n                get: function () {\n                    return this.uniforms.resolution.value;\n                },\n                set: function (value) {\n                    this.uniforms.resolution.value.copy(value);\n                }\n            },\n            alphaToCoverage: {\n                enumerable: true,\n                get: function () {\n                    return Boolean('USE_ALPHA_TO_COVERAGE' in this.defines);\n                },\n                set: function (value) {\n                    if (Boolean(value) !== Boolean('USE_ALPHA_TO_COVERAGE' in this.defines)) {\n                        this.needsUpdate = true;\n                    }\n                    if (value === true) {\n                        this.defines.USE_ALPHA_TO_COVERAGE = '';\n                        this.extensions.derivatives = true;\n                    } else {\n                        delete this.defines.USE_ALPHA_TO_COVERAGE;\n                        this.extensions.derivatives = false;\n                    }\n                }\n            }\n        });\n        this.setValues(parameters);\n    }\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}