{"ast":null,"code":"/**\n * @file Manages the configuration settings for the widget.\n * @author Abe Davis\n * @description AppState is the global state for your app. You can initialize app state here, including controls you\n * want to make available from the control panel.\n */\nimport { AAppState, CheckAppState, SetAppState } from \"../../anigraph\";\nexport function GetAppState() {\n  let appState = CheckAppState();\n  if (appState === undefined) {\n    appState = new AAppState();\n    SetAppState(appState);\n  }\n  return appState;\n}\n_c = GetAppState;\nlet appState = GetAppState();\n\n// appState.addSliderControl(AAppState.AppStateDefaultKeys.AmbientLight, 0.1, 0.0, 1.0, 0.001);\n\nexport function AddSliderUniform(mat, name, initialValue, min, max, step) {\n  let shouldBeUnique = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;\n  let appState = GetAppState();\n\n  /**\n   * If there isn't already a slider for our variable, let's create one in the control panel.\n   */\n  if (appState.getState(name) === undefined) {\n    appState.addSliderControl(name, initialValue !== null && initialValue !== void 0 ? initialValue : 1.0, min, max, step);\n  } else if (shouldBeUnique) {\n    throw new Error(`Tried to add uniform ${name} multiple times!!!`);\n  }\n\n  /**\n   * Let's initialize the uniform on the material\n   */\n  mat.setUniform(name, appState.getState(name));\n\n  /**\n   * And now let's have the material listen for changes to the app state controlled by our slider.\n   */\n  mat.subscribe(appState.addStateValueListener(name, () => {\n    mat.setUniform(name, appState.getState(name));\n  }), `${name}_update`);\n}\n_c2 = AddSliderUniform;\nvar _c, _c2;\n$RefreshReg$(_c, \"GetAppState\");\n$RefreshReg$(_c2, \"AddSliderUniform\");","map":{"version":3,"names":["AAppState","CheckAppState","SetAppState","GetAppState","appState","undefined","AddSliderUniform","mat","name","initialValue","min","max","step","shouldBeUnique","getState","addSliderControl","Error","setUniform","subscribe","addStateValueListener"],"sources":["/Users/home/Desktop/cs4620-final-project/src/app/main/MainAppState.ts"],"sourcesContent":["/**\n * @file Manages the configuration settings for the widget.\n * @author Abe Davis\n * @description AppState is the global state for your app. You can initialize app state here, including controls you\n * want to make available from the control panel.\n */\nimport {AAppState, AShaderMaterial, CheckAppState, SetAppState} from \"../../anigraph\";\n\nexport function GetAppState(){\n    let appState = CheckAppState();\n    if(appState===undefined){\n        appState = new AAppState();\n        SetAppState(appState);\n    }\n    return appState;\n}\nlet appState = GetAppState();\n\n\n// appState.addSliderControl(AAppState.AppStateDefaultKeys.AmbientLight, 0.1, 0.0, 1.0, 0.001);\n\nexport function AddSliderUniform(mat:AShaderMaterial, name:string, initialValue?:number, min?:number, max?:number, step?:number, shouldBeUnique=false){\n    let appState = GetAppState();\n\n    /**\n     * If there isn't already a slider for our variable, let's create one in the control panel.\n     */\n    if(appState.getState(name)===undefined){\n        appState.addSliderControl(name, initialValue??1.0, min, max, step);\n    }else if(shouldBeUnique){\n        throw new Error(`Tried to add uniform ${name} multiple times!!!`);\n    }\n\n    /**\n     * Let's initialize the uniform on the material\n     */\n    mat.setUniform(name, appState.getState(name));\n\n    /**\n     * And now let's have the material listen for changes to the app state controlled by our slider.\n     */\n    mat.subscribe(\n        appState.addStateValueListener(name, ()=>{\n            mat.setUniform(name, appState.getState(name));\n        }),\n        `${name}_update`\n    );\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,SAAQA,SAAS,EAAmBC,aAAa,EAAEC,WAAW,QAAO,gBAAgB;AAErF,OAAO,SAASC,WAAW,GAAE;EACzB,IAAIC,QAAQ,GAAGH,aAAa,EAAE;EAC9B,IAAGG,QAAQ,KAAGC,SAAS,EAAC;IACpBD,QAAQ,GAAG,IAAIJ,SAAS,EAAE;IAC1BE,WAAW,CAACE,QAAQ,CAAC;EACzB;EACA,OAAOA,QAAQ;AACnB;AAAC,KAPeD,WAAW;AAQ3B,IAAIC,QAAQ,GAAGD,WAAW,EAAE;;AAG5B;;AAEA,OAAO,SAASG,gBAAgB,CAACC,GAAmB,EAAEC,IAAW,EAAEC,YAAoB,EAAEC,GAAW,EAAEC,GAAW,EAAEC,IAAY,EAAuB;EAAA,IAArBC,cAAc,uEAAC,KAAK;EACjJ,IAAIT,QAAQ,GAAGD,WAAW,EAAE;;EAE5B;AACJ;AACA;EACI,IAAGC,QAAQ,CAACU,QAAQ,CAACN,IAAI,CAAC,KAAGH,SAAS,EAAC;IACnCD,QAAQ,CAACW,gBAAgB,CAACP,IAAI,EAAEC,YAAY,aAAZA,YAAY,cAAZA,YAAY,GAAE,GAAG,EAAEC,GAAG,EAAEC,GAAG,EAAEC,IAAI,CAAC;EACtE,CAAC,MAAK,IAAGC,cAAc,EAAC;IACpB,MAAM,IAAIG,KAAK,CAAE,wBAAuBR,IAAK,oBAAmB,CAAC;EACrE;;EAEA;AACJ;AACA;EACID,GAAG,CAACU,UAAU,CAACT,IAAI,EAAEJ,QAAQ,CAACU,QAAQ,CAACN,IAAI,CAAC,CAAC;;EAE7C;AACJ;AACA;EACID,GAAG,CAACW,SAAS,CACTd,QAAQ,CAACe,qBAAqB,CAACX,IAAI,EAAE,MAAI;IACrCD,GAAG,CAACU,UAAU,CAACT,IAAI,EAAEJ,QAAQ,CAACU,QAAQ,CAACN,IAAI,CAAC,CAAC;EACjD,CAAC,CAAC,EACD,GAAEA,IAAK,SAAQ,CACnB;AACL;AAAC,MA1BeF,gBAAgB;AAAA;AAAA;AAAA"},"metadata":{},"sourceType":"module"}