{"ast":null,"code":"var _jsxFileName = \"/Users/home/Desktop/cs4620-final-project/src/app/main/Editor/Editor.tsx\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useState } from \"react\";\nimport \"./Editor.css\";\nimport { Container, Nav, Navbar, NavDropdown } from \"react-bootstrap\";\nimport Canvas from \"./Canvas\";\nimport DEFAULT_LEVELS from \"../../Backend/DefaultLevels\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Editor = p => {\n  _s();\n  const [currentName, setCurrentName] = useState(p.levels[0].name);\n  const [viewSeed, setViewSeed] = useState(Math.random());\n  const ind = p.levels.findIndex(v => v.name === currentName);\n  const updateLevel = level => {\n    const levels = p.levels.slice();\n    levels[ind] = level;\n    p.updateLevels(levels);\n  };\n  const select = useCallback(ind => {\n    setCurrentName(p.levels[ind].name);\n    setViewSeed(Math.random());\n  }, [p.levels]);\n  const nameRequest = (promptStr, def) => {\n    let newname = prompt(promptStr, def);\n    newname = newname.trim();\n    if (newname === \"\") {\n      alert(\"New name cannot be empty.\");\n      return nameRequest(promptStr, def);\n    }\n    for (let level of p.levels) {\n      if (level.name === newname) {\n        alert(\"A level with the same name already exists.\");\n        return nameRequest(promptStr, def);\n      }\n    }\n    return newname;\n  };\n  const create = useCallback(evt => {\n    let newname = nameRequest(\"Please name for the new level.\", \"\");\n    const levels = p.levels.slice();\n    levels.push({\n      terrains: [],\n      name: newname,\n      version: 1,\n      player: [0, 0]\n    });\n    p.updateLevels(levels);\n    setCurrentName(newname);\n    setViewSeed(Math.random());\n    evt.preventDefault();\n  }, [p.levels]);\n  const rename = useCallback(evt => {\n    let newname = nameRequest(\"Please enter a new name.\", currentName);\n    const levels = p.levels.slice();\n    levels[ind] = {\n      ...levels[ind],\n      name: newname\n    };\n    p.updateLevels(levels);\n    setCurrentName(newname);\n    evt.preventDefault();\n  }, [currentName, ind]);\n  const remove = useCallback(evt => {\n    const levels = p.levels.slice();\n    levels.splice(ind, 1);\n    p.updateLevels(levels);\n    setCurrentName(levels[0].name);\n    setViewSeed(Math.random());\n    evt.preventDefault();\n  }, [ind]);\n  const reset = evt => {\n    if (confirm(\"Are you sure you want to reset all levels?\")) {\n      if (!confirm(\"Confirming once more. This operation cannot be undone.\\nClick \\\"Cancel\\\" to confirm.\")) {\n        if (confirm(\"FINAL CONFIRMATION. \\nYou are about to reset all levels to factory settings. This operation CANNOT BE UNDONE. Click \\\"Yes\\\" or \\\"OK\\\" to confirm.\")) {\n          p.updateLevels(DEFAULT_LEVELS);\n          setCurrentName(DEFAULT_LEVELS[0].name);\n          setViewSeed(Math.random());\n        }\n      }\n    }\n    evt.preventDefault();\n  };\n  const exportLevels = () => {\n    console.group(\"Exported JSON\");\n    console.log(JSON.stringify(p.levels));\n    console.groupEnd();\n    alert(\"Levels JSON has been printed to console.\");\n  };\n  const [playerMove, setPlayerMove] = useState(false);\n  const movePlayer = () => {\n    setPlayerMove(s => !s);\n  };\n  const [checkpointTip, setCheckpointTip] = useState(false);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"editor\",\n    children: [/*#__PURE__*/_jsxDEV(Canvas, {\n      informCheckpointPlayer: () => setCheckpointTip(true),\n      leaveCheckpointPlayer: () => setCheckpointTip(false),\n      leaveMovePlayer: () => setPlayerMove(false),\n      movePlayer: playerMove,\n      level: p.levels[ind],\n      updateLevel: updateLevel,\n      viewSeed: viewSeed\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Navbar, {\n      bg: \"dark\",\n      variant: \"dark\",\n      children: /*#__PURE__*/_jsxDEV(Container, {\n        children: [/*#__PURE__*/_jsxDEV(Navbar.Brand, {\n          children: currentName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Nav, {\n          children: [/*#__PURE__*/_jsxDEV(Nav.Link, {\n            onClick: evt => {\n              evt.preventDefault();\n              p.exit();\n            },\n            href: \"#\",\n            children: \"Exit Editor Mode\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(NavDropdown, {\n            title: \"Levels\",\n            children: [/*#__PURE__*/_jsxDEV(_Fragment, {\n              children: p.levels.map((level, ind) => /*#__PURE__*/_jsxDEV(NavDropdown.Item, {\n                onClick: evt => {\n                  select(ind);\n                  evt.preventDefault();\n                },\n                href: \"#\",\n                children: level.name\n              }, ind, false, {\n                fileName: _jsxFileName,\n                lineNumber: 120,\n                columnNumber: 19\n              }, this))\n            }, void 0, false), /*#__PURE__*/_jsxDEV(NavDropdown.Divider, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(NavDropdown.Item, {\n              onClick: create,\n              href: \"#\",\n              children: \"Create new level\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 127,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(NavDropdown.Item, {\n              onClick: reset,\n              href: \"#\",\n              children: \"Reset levels to factory setting\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(NavDropdown.Item, {\n              onClick: exportLevels,\n              href: \"#\",\n              children: \"Export JSON of all levels\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(NavDropdown, {\n            title: \"Edit\",\n            children: [/*#__PURE__*/_jsxDEV(NavDropdown.Item, {\n              onClick: rename,\n              href: \"#\",\n              children: \"Rename this level\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 132,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(NavDropdown.Item, {\n              onClick: remove,\n              href: \"#\",\n              disabled: p.levels.length < 2,\n              children: \"Remove this level\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(NavDropdown.Item, {\n              onClick: movePlayer,\n              disabled: checkpointTip,\n              href: \"#\",\n              children: !playerMove ? \"Move player\" : \"Cancel moving player\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 135,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), !playerMove && !checkpointTip && /*#__PURE__*/_jsxDEV(Navbar, {\n      bg: \"primary\",\n      variant: \"dark\",\n      children: /*#__PURE__*/_jsxDEV(Container, {\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            color: \"white\"\n          },\n          children: [\"Double-click terrain to remove. Hold Ctrl and drag to create new terrain.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 54\n          }, this), \"Double-click empty space to add a checkpoint. Double-click a checkpoint to remove it.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 41\n    }, this), checkpointTip && /*#__PURE__*/_jsxDEV(Navbar, {\n      bg: \"light\",\n      variant: \"light\",\n      children: /*#__PURE__*/_jsxDEV(Container, {\n        children: \"You have now defined the checkpoint mark. Double-click where the player would revive.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 25\n    }, this), playerMove && /*#__PURE__*/_jsxDEV(Navbar, {\n      bg: \"light\",\n      variant: \"light\",\n      children: /*#__PURE__*/_jsxDEV(Container, {\n        children: \"Double-click the bottom-left corner of where you would like the player to go.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 22\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n};\n_s(Editor, \"TJIvHuTZSR8rQHK/5Vyemik0Nzw=\");\n_c = Editor;\nexport default Editor;\nvar _c;\n$RefreshReg$(_c, \"Editor\");","map":{"version":3,"names":["React","useCallback","useState","Container","Nav","Navbar","NavDropdown","Canvas","DEFAULT_LEVELS","Editor","p","currentName","setCurrentName","levels","name","viewSeed","setViewSeed","Math","random","ind","findIndex","v","updateLevel","level","slice","updateLevels","select","nameRequest","promptStr","def","newname","prompt","trim","alert","create","evt","push","terrains","version","player","preventDefault","rename","remove","splice","reset","confirm","exportLevels","console","group","log","JSON","stringify","groupEnd","playerMove","setPlayerMove","movePlayer","s","checkpointTip","setCheckpointTip","exit","map","length","color"],"sources":["/Users/home/Desktop/cs4620-final-project/src/app/main/Editor/Editor.tsx"],"sourcesContent":["import React, {useCallback, useState} from \"react\";\r\nimport \"./Editor.css\";\r\nimport {Container, Nav, Navbar, NavDropdown} from \"react-bootstrap\";\r\nimport {LevelDefinition} from \"../../Backend/Level\";\r\nimport Canvas from \"./Canvas\";\r\nimport DEFAULT_LEVELS from \"../../Backend/DefaultLevels\";\r\n\r\nexport type EditorProps = {\r\n  levels: LevelDefinition[];\r\n  updateLevels: (levels: LevelDefinition[]) => void;\r\n  exit: () => void;\r\n};\r\n\r\nconst Editor: React.ComponentType<EditorProps> = (p) => {\r\n  const [currentName, setCurrentName] = useState<string>(p.levels[0].name);\r\n  const [viewSeed, setViewSeed] = useState<number>(Math.random());\r\n\r\n  const ind = p.levels.findIndex((v) => v.name === currentName);\r\n\r\n  const updateLevel = (level: LevelDefinition) => {\r\n    const levels = p.levels.slice();\r\n    levels[ind] = level;\r\n    p.updateLevels(levels);\r\n  };\r\n\r\n  const select = useCallback((ind: number) => {\r\n    setCurrentName(p.levels[ind].name);\r\n    setViewSeed(Math.random());\r\n  }, [p.levels]);\r\n\r\n  const nameRequest = (promptStr: string, def: string) => {\r\n    let newname = prompt(promptStr, def);\r\n    newname = newname.trim();\r\n    if (newname === \"\") {\r\n      alert(\"New name cannot be empty.\");\r\n      return nameRequest(promptStr, def);\r\n    }\r\n    for (let level of p.levels) {\r\n      if (level.name === newname) {\r\n        alert(\"A level with the same name already exists.\");\r\n        return nameRequest(promptStr, def);\r\n      }\r\n    }\r\n    return newname;\r\n  };\r\n\r\n  const create = useCallback((evt) => {\r\n    let newname = nameRequest(\"Please name for the new level.\", \"\");\r\n    const levels = p.levels.slice();\r\n    levels.push({terrains: [], name: newname, version: 1, player: [0, 0]});\r\n    p.updateLevels(levels);\r\n    setCurrentName(newname);\r\n    setViewSeed(Math.random());\r\n    evt.preventDefault();\r\n  }, [p.levels]);\r\n\r\n  const rename = useCallback((evt) => {\r\n    let newname = nameRequest(\"Please enter a new name.\", currentName);\r\n    const levels = p.levels.slice();\r\n    levels[ind] = {...levels[ind], name: newname};\r\n    p.updateLevels(levels);\r\n    setCurrentName(newname);\r\n    evt.preventDefault();\r\n  }, [currentName, ind]);\r\n\r\n  const remove = useCallback((evt) => {\r\n    const levels = p.levels.slice();\r\n    levels.splice(ind, 1);\r\n    p.updateLevels(levels);\r\n    setCurrentName(levels[0].name);\r\n    setViewSeed(Math.random());\r\n    evt.preventDefault();\r\n  }, [ind]);\r\n\r\n  const reset = (evt) => {\r\n    if (confirm(\"Are you sure you want to reset all levels?\")) {\r\n      if (!confirm(\"Confirming once more. This operation cannot be undone.\\nClick \\\"Cancel\\\" to confirm.\")) {\r\n        if (confirm(\"FINAL CONFIRMATION. \\nYou are about to reset all levels to factory settings. This operation CANNOT BE UNDONE. Click \\\"Yes\\\" or \\\"OK\\\" to confirm.\")) {\r\n          p.updateLevels(DEFAULT_LEVELS);\r\n          setCurrentName(DEFAULT_LEVELS[0].name);\r\n          setViewSeed(Math.random());\r\n        }\r\n      }\r\n    }\r\n    evt.preventDefault();\r\n  };\r\n\r\n  const exportLevels = () => {\r\n    console.group(\"Exported JSON\");\r\n    console.log(JSON.stringify(p.levels));\r\n    console.groupEnd();\r\n    alert(\"Levels JSON has been printed to console.\");\r\n  };\r\n\r\n  const [playerMove, setPlayerMove] = useState<boolean>(false);\r\n\r\n  const movePlayer = () => {\r\n    setPlayerMove(s => !s);\r\n  }\r\n\r\n  const [checkpointTip, setCheckpointTip] = useState<boolean>(false);\r\n\r\n  return (\r\n    <div className={\"editor\"}>\r\n      <Canvas informCheckpointPlayer={() => setCheckpointTip(true)}\r\n              leaveCheckpointPlayer={() => setCheckpointTip(false)}\r\n              leaveMovePlayer={() => setPlayerMove(false)} movePlayer={playerMove} level={p.levels[ind]}\r\n              updateLevel={updateLevel} viewSeed={viewSeed}/>\r\n      <Navbar bg=\"dark\" variant=\"dark\">\r\n        <Container>\r\n          <Navbar.Brand>{currentName}</Navbar.Brand>\r\n          <Nav>\r\n            <Nav.Link onClick={(evt) => {\r\n              evt.preventDefault();\r\n              p.exit();\r\n            }} href=\"#\">Exit Editor Mode</Nav.Link>\r\n            <NavDropdown title={\"Levels\"}>\r\n              <>\r\n                {p.levels.map((level, ind) => (\r\n                  <NavDropdown.Item onClick={(evt) => {\r\n                    select(ind);\r\n                    evt.preventDefault();\r\n                  }} href={\"#\"} key={ind}>{level.name}</NavDropdown.Item>\r\n                ))}\r\n              </>\r\n              <NavDropdown.Divider/>\r\n              <NavDropdown.Item onClick={create} href={\"#\"}>Create new level</NavDropdown.Item>\r\n              <NavDropdown.Item onClick={reset} href={\"#\"}>Reset levels to factory setting</NavDropdown.Item>\r\n              <NavDropdown.Item onClick={exportLevels} href={\"#\"}>Export JSON of all levels</NavDropdown.Item>\r\n            </NavDropdown>\r\n            <NavDropdown title={\"Edit\"}>\r\n              <NavDropdown.Item onClick={rename} href={\"#\"}>Rename this level</NavDropdown.Item>\r\n              <NavDropdown.Item onClick={remove} href={\"#\"} disabled={p.levels.length < 2}>Remove this\r\n                level</NavDropdown.Item>\r\n              <NavDropdown.Item onClick={movePlayer}\r\n                                disabled={checkpointTip}\r\n                                href={\"#\"}>{!playerMove ? \"Move player\" : \"Cancel moving player\"}</NavDropdown.Item>\r\n            </NavDropdown>\r\n          </Nav>\r\n        </Container>\r\n      </Navbar>\r\n      {!playerMove && !checkpointTip && <Navbar bg=\"primary\" variant=\"dark\">\r\n        <Container>\r\n          <span style={{color: \"white\"}}>\r\n            Double-click terrain to remove.\r\n            Hold Ctrl and drag to create new terrain.<br/>\r\n            Double-click empty space to add a checkpoint.\r\n            Double-click a checkpoint to remove it.\r\n          </span>\r\n        </Container>\r\n      </Navbar>}\r\n      {checkpointTip && <Navbar bg=\"light\" variant=\"light\">\r\n        <Container>\r\n          You have now defined the checkpoint mark.\r\n          Double-click where the player would revive.\r\n        </Container>\r\n      </Navbar>}\r\n      {playerMove && <Navbar bg=\"light\" variant=\"light\">\r\n        <Container>\r\n          Double-click the bottom-left corner of where you would like the player to go.\r\n        </Container>\r\n      </Navbar>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Editor;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}