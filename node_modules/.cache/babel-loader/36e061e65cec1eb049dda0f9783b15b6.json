{"ast":null,"code":"//##################//--node transform possible parent class--\\\\##################\n// <editor-fold desc=\"node transform possibel parent class\">\n\nclass NodeTransform {\n  constructor() {\n    this.position = void 0;\n    this.anchor = void 0;\n    this.scale = void 0;\n    this.rotation = void 0;\n  }\n}\nexport { NodeTransform };\n\n//</editor-fold>\n//##################\\\\--node transform possible parent class--//##################","map":{"version":3,"names":["NodeTransform","position","anchor","scale","rotation"],"sources":["/Users/home/Desktop/cs4620-final-project/src/anigraph/math/nodetransforms/NodeTransform.ts"],"sourcesContent":["//##################//--node transform possible parent class--\\\\##################\n// <editor-fold desc=\"node transform possibel parent class\">\nimport {Mat4, Matrix, Quaternion, Vec3, VectorBase} from \"../linalg\";\nimport { TransformationInterface} from \"../TrasnformationInterface\";\nimport * as THREE from \"three\";\n\nabstract class NodeTransform<VType extends VectorBase, MType extends Matrix>\n  implements TransformationInterface\n{\n  position!: VType;\n  anchor!: VType;\n  scale!: VType | number;\n  rotation!: any;\n\n  abstract getMatrix(): MType;\n  abstract getMat4(): Mat4;\n\n  abstract assignTo(threejsMat: THREE.Matrix4):void;\n\n  abstract setWithMatrix(m: MType, position?: VType, rotation?: any): void;\n  abstract NodeTransform3D(mat: Mat4): any;\n  abstract NodeTransform2D(): any;\n\n  abstract getPosition(): Vec3;\n  abstract _getQuaternionRotation(): Quaternion;\n  abstract _setQuaternionRotation(q: Quaternion):void;\n  abstract setPosition(position: Vec3):void;\n}\nexport { NodeTransform };\n\n//</editor-fold>\n//##################\\\\--node transform possible parent class--//##################\n"],"mappings":"AAAA;AACA;;AAKA,MAAeA,aAAa,CAE5B;EAAA;IAAA,KACEC,QAAQ;IAAA,KACRC,MAAM;IAAA,KACNC,KAAK;IAAA,KACLC,QAAQ;EAAA;AAeV;AACA,SAASJ,aAAa;;AAEtB;AACA"},"metadata":{},"sourceType":"module"}