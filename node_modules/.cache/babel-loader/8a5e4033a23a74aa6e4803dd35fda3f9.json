{"ast":null,"code":"import * as e from \"react\";\nexport function createContext(t, n) {\n  const o = /*#__PURE__*/e.createContext(n);\n  function r(t) {\n    const {\n        children: n,\n        ...r\n      } = t,\n      c = e.useMemo(() => r, Object.values(r)); /*#__PURE__*/\n    return e.createElement(o.Provider, {\n      value: c\n    }, n);\n  }\n  return r.displayName = t + \"Provider\", [r, function (r) {\n    const c = e.useContext(o);\n    if (c) return c;\n    if (void 0 !== n) return n;\n    throw new Error(`\\`${r}\\` must be used within \\`${t}\\``);\n  }];\n}\nexport function createContextScope(n) {\n  let o = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  let r = [];\n  const c = () => {\n    const t = r.map(t => /*#__PURE__*/e.createContext(t));\n    return function (o) {\n      const r = (null == o ? void 0 : o[n]) || t;\n      return e.useMemo(() => ({\n        [`__scope${n}`]: {\n          ...o,\n          [n]: r\n        }\n      }), [o, r]);\n    };\n  };\n  return c.scopeName = n, [function (t, o) {\n    const c = /*#__PURE__*/e.createContext(o),\n      u = r.length;\n    function s(t) {\n      const {\n          scope: o,\n          children: r,\n          ...s\n        } = t,\n        i = (null == o ? void 0 : o[n][u]) || c,\n        a = e.useMemo(() => s, Object.values(s)); /*#__PURE__*/\n      return e.createElement(i.Provider, {\n        value: a\n      }, r);\n    }\n    return r = [...r, o], s.displayName = t + \"Provider\", [s, function (r, s) {\n      const i = (null == s ? void 0 : s[n][u]) || c,\n        a = e.useContext(i);\n      if (a) return a;\n      if (void 0 !== o) return o;\n      throw new Error(`\\`${r}\\` must be used within \\`${t}\\``);\n    }];\n  }, t(c, ...o)];\n}\nfunction t() {\n  for (var _len = arguments.length, t = new Array(_len), _key = 0; _key < _len; _key++) {\n    t[_key] = arguments[_key];\n  }\n  const n = t[0];\n  if (1 === t.length) return n;\n  const o = () => {\n    const o = t.map(e => ({\n      useScope: e(),\n      scopeName: e.scopeName\n    }));\n    return function (t) {\n      const r = o.reduce((e, _ref) => {\n        let {\n          useScope: n,\n          scopeName: o\n        } = _ref;\n        return {\n          ...e,\n          ...n(t)[`__scope${o}`]\n        };\n      }, {});\n      return e.useMemo(() => ({\n        [`__scope${n.scopeName}`]: r\n      }), [r]);\n    };\n  };\n  return o.scopeName = n.scopeName, o;\n}","map":null,"metadata":{},"sourceType":"module"}