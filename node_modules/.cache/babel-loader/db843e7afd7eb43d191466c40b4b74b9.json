{"ast":null,"code":"var _dec, _class;\nimport { ASerializable } from \"../../base\";\nimport { AGraphicElementBase } from \"../graphicobject\";\nimport * as THREE from \"three\";\nimport { Color } from \"../../math\";\nimport { AThreeJSMeshGraphicBase } from \"./AThreeJSMeshGraphic\";\nexport let APlaneGraphic = (_dec = ASerializable(\"APlaneGraphic\"), _dec(_class = class APlaneGraphic extends AThreeJSMeshGraphicBase {\n  get geometry() {\n    return this._geometry;\n  }\n  setMaterial(material) {\n    this._material = AGraphicElementBase._GetMaterialFromParam(material);\n    if (this._element) {\n      this.threejs.material = this._material;\n    }\n  }\n\n  /**\n   * call with, e.g.,\n   * ```\n   * APlaneGraphic.Create({width: 2, height: 5}, material);\n   * ```\n   * @param geometryParams\n   * @param material\n   * @param args\n   * @constructor\n   */\n  static Create(geometryParams, material) {\n    let planeGraphic = new APlaneGraphic();\n    if (geometryParams) {\n      var _geometryParams$width, _geometryParams$heigh, _geometryParams$width2, _geometryParams$heigh2;\n      planeGraphic._geometry = new THREE.PlaneBufferGeometry((_geometryParams$width = geometryParams.width) !== null && _geometryParams$width !== void 0 ? _geometryParams$width : 1, (_geometryParams$heigh = geometryParams.height) !== null && _geometryParams$heigh !== void 0 ? _geometryParams$heigh : 1, (_geometryParams$width2 = geometryParams.widthSegments) !== null && _geometryParams$width2 !== void 0 ? _geometryParams$width2 : 1, (_geometryParams$heigh2 = geometryParams.heightSegments) !== null && _geometryParams$heigh2 !== void 0 ? _geometryParams$heigh2 : 1);\n    } else {\n      planeGraphic._geometry = new THREE.PlaneBufferGeometry();\n    }\n    planeGraphic._material = AGraphicElementBase._GetMaterialFromParam(material !== null && material !== void 0 ? material : Color.FromString(\"#30ee30\"));\n    planeGraphic.init();\n    return planeGraphic;\n  }\n}) || _class);","map":{"version":3,"names":["ASerializable","AGraphicElementBase","THREE","Color","AThreeJSMeshGraphicBase","APlaneGraphic","geometry","_geometry","setMaterial","material","_material","_GetMaterialFromParam","_element","threejs","Create","geometryParams","planeGraphic","PlaneBufferGeometry","width","height","widthSegments","heightSegments","FromString","init"],"sources":["/Users/home/Desktop/cs4620-final-project/src/anigraph/rendering/graphicelements/APlaneGraphic.ts"],"sourcesContent":["import {ASerializable} from \"../../base\";\nimport {AGraphicElementBase} from \"../graphicobject\";\nimport * as THREE from \"three\";\nimport {Color} from \"../../math\";\nimport {AMaterial} from \"../material\";\nimport {AThreeJSMeshGraphicBase} from \"./AThreeJSMeshGraphic\";\n\n\n\nexport interface PlaneGeometryParameters {\n    width?:number|undefined;\n    height?:number|undefined;\n    widthSegments?:number|undefined;\n    heightSegments?:number|undefined;\n}\n\n\n@ASerializable(\"APlaneGraphic\")\nexport class APlaneGraphic extends AThreeJSMeshGraphicBase {\n    get geometry(): THREE.PlaneBufferGeometry {\n        return this._geometry as THREE.PlaneBufferGeometry;\n    }\n\n    setMaterial(material:Color|THREE.Color|THREE.Material|THREE.Material[]|AMaterial){\n        this._material = AGraphicElementBase._GetMaterialFromParam(material);\n        if(this._element){\n            this.threejs.material=this._material;\n        }\n    }\n\n    /**\n     * call with, e.g.,\n     * ```\n     * APlaneGraphic.Create({width: 2, height: 5}, material);\n     * ```\n     * @param geometryParams\n     * @param material\n     * @param args\n     * @constructor\n     */\n    static Create(\n        geometryParams?:PlaneGeometryParameters,\n        material?:Color|THREE.Color|THREE.Material|THREE.Material[]|AMaterial,\n        ...args:any[]\n    ){\n        let planeGraphic = new APlaneGraphic();\n        if(geometryParams){\n            planeGraphic._geometry = new THREE.PlaneBufferGeometry(\n                geometryParams.width ?? 1,\n                geometryParams.height ?? 1,\n                geometryParams.widthSegments ?? 1,\n                geometryParams.heightSegments ?? 1);\n        }else{\n            planeGraphic._geometry = new THREE.PlaneBufferGeometry();\n        }\n        planeGraphic._material = AGraphicElementBase._GetMaterialFromParam(material??Color.FromString(\"#30ee30\"));\n        planeGraphic.init();\n        return planeGraphic;\n    }\n}\n"],"mappings":";AAAA,SAAQA,aAAa,QAAO,YAAY;AACxC,SAAQC,mBAAmB,QAAO,kBAAkB;AACpD,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,SAAQC,KAAK,QAAO,YAAY;AAEhC,SAAQC,uBAAuB,QAAO,uBAAuB;AAY7D,WACaC,aAAa,WADzBL,aAAa,CAAC,eAAe,CAAC,gBAA/B,MACaK,aAAa,SAASD,uBAAuB,CAAC;EACvD,IAAIE,QAAQ,GAA8B;IACtC,OAAO,IAAI,CAACC,SAAS;EACzB;EAEAC,WAAW,CAACC,QAAoE,EAAC;IAC7E,IAAI,CAACC,SAAS,GAAGT,mBAAmB,CAACU,qBAAqB,CAACF,QAAQ,CAAC;IACpE,IAAG,IAAI,CAACG,QAAQ,EAAC;MACb,IAAI,CAACC,OAAO,CAACJ,QAAQ,GAAC,IAAI,CAACC,SAAS;IACxC;EACJ;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,OAAOI,MAAM,CACTC,cAAuC,EACvCN,QAAqE,EAExE;IACG,IAAIO,YAAY,GAAG,IAAIX,aAAa,EAAE;IACtC,IAAGU,cAAc,EAAC;MAAA;MACdC,YAAY,CAACT,SAAS,GAAG,IAAIL,KAAK,CAACe,mBAAmB,0BAClDF,cAAc,CAACG,KAAK,yEAAI,CAAC,2BACzBH,cAAc,CAACI,MAAM,yEAAI,CAAC,4BAC1BJ,cAAc,CAACK,aAAa,2EAAI,CAAC,4BACjCL,cAAc,CAACM,cAAc,2EAAI,CAAC,CAAC;IAC3C,CAAC,MAAI;MACDL,YAAY,CAACT,SAAS,GAAG,IAAIL,KAAK,CAACe,mBAAmB,EAAE;IAC5D;IACAD,YAAY,CAACN,SAAS,GAAGT,mBAAmB,CAACU,qBAAqB,CAACF,QAAQ,aAARA,QAAQ,cAARA,QAAQ,GAAEN,KAAK,CAACmB,UAAU,CAAC,SAAS,CAAC,CAAC;IACzGN,YAAY,CAACO,IAAI,EAAE;IACnB,OAAOP,YAAY;EACvB;AACJ,CAAC"},"metadata":{},"sourceType":"module"}