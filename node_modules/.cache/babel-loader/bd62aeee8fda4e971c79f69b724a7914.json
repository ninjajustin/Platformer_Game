{"ast":null,"code":"import { BaseSceneController } from \"../../../../BaseClasses\";\nimport { APointLightModel, APointLightView, Quaternion } from \"../../../../../anigraph\";\nimport { ATriangleMeshModel, ATriangleMeshView } from \"../../../../../anigraph/scene/nodes\";\nimport { BotModel, BotView, ExampleParticleSystemModel, ExampleParticleSystemView, ExampleThreeJSNodeModel, ExampleThreeJSNodeView, PlayerModel, PlayerView, TerrainModel, TerrainView } from \"../../../Nodes\";\nimport * as THREE from \"three\";\nimport { ADebugInteractionMode } from \"../../../../../anigraph/scene/interactionmodes\";\nimport { ExamplePlayerInteractionMode } from \"../../../InteractionModes\";\nimport { ExamplePointerLockInteractionMode } from \"../../../InteractionModes/ExamplePointerLockInteractionMode\";\nimport { ExampleLoadedCharacterModel, ExampleLoadedModel, ExampleLoadedView } from \"../../../Nodes/Loaded\";\nimport { BillboardParticleSystemModel, BillboardParticleSystemView } from \"../../../Nodes/BillboardParticleSystem\";\nexport class Example1SceneController extends BaseSceneController {\n  get model() {\n    return this._model;\n  }\n\n  /**\n   * This is where you specify the mapping from model classes to view classes.\n   */\n  initModelViewSpecs() {\n    this.addModelViewSpec(APointLightModel, APointLightView);\n    this.addModelViewSpec(ATriangleMeshModel, ATriangleMeshView);\n    this.addModelViewSpec(TerrainModel, TerrainView);\n    this.addModelViewSpec(PlayerModel, PlayerView);\n    this.addModelViewSpec(BotModel, BotView);\n    this.addModelViewSpec(ExampleThreeJSNodeModel, ExampleThreeJSNodeView);\n    this.addModelViewSpec(ExampleParticleSystemModel, ExampleParticleSystemView);\n\n    // Note that we can use the same view for two different models!\n    this.addModelViewSpec(ExampleLoadedCharacterModel, ExampleLoadedView);\n    this.addModelViewSpec(ExampleLoadedModel, ExampleLoadedView);\n    this.addModelViewSpec(BillboardParticleSystemModel, BillboardParticleSystemView);\n  }\n  async initScene() {\n    /**\n     * Set up the skybox background\n     */\n    await super.initScene();\n    //let path = './images/cube/MilkyWay/dark-s_';\n    let path = './images/cube/Desert/desert2_';\n    let format = '.jpg';\n    const urls = [path + 'px' + format, path + 'nx' + format, path + 'py' + format, path + 'ny' + format, path + 'pz' + format, path + 'nz' + format];\n\n    /**\n     * If you want to change the skybox, you will need to provide the appropriate urls to the corresponding textures\n     * from a cube map\n     */\n    const reflectionCube = new THREE.CubeTextureLoader().load(urls);\n    let sceneRotation = Quaternion.RotationX(Math.PI * 0.5);\n    this.view.threejs.rotation.setFromQuaternion(sceneRotation);\n    //reflectionCube.rotation = Math.PI*0.25;\n    this.view.threejs.background = reflectionCube;\n  }\n  initInteractions() {\n    /**\n     * We will define the debug interaction mode here.\n     * The debug mode is offered mainly to provide camera controls for developing and debugging non-control-related\n     * features. It may also be useful as an example for you to look at if you like.\n     */\n    super.initInteractions();\n    let debugInteractionMode = new ADebugInteractionMode(this);\n    this.defineInteractionMode(\"Debug\", debugInteractionMode);\n\n    /**\n     * This code adds the ExamplePlayer interaction mode and sets it as the current active mode\n     */\n    let playerInteractionMode = new ExamplePlayerInteractionMode(this);\n    this.defineInteractionMode(\"ExamplePlayer\", playerInteractionMode);\n    let pointerLockInteractionMode = new ExamplePointerLockInteractionMode(this);\n    this.defineInteractionMode(\"ExamplePointerLock\", pointerLockInteractionMode);\n\n    /**\n     * For starters we will default to the debug mode.\n     */\n    this.setCurrentInteractionMode(\"Debug\");\n  }\n  onAnimationFrameCallback(context) {\n    // let's update the model\n    let time = this.time;\n    this.model.timeUpdate(time);\n\n    /**\n     * And the interaction mode... This is important for things like camera motion filtering.\n     */\n    this.interactionMode.timeUpdate(time);\n\n    // clear the rendering context\n    context.renderer.clear();\n    // this.renderer.clear(false, true);\n\n    // render the scene view\n    context.renderer.render(this.view.threejs, this._threeCamera);\n  }\n}","map":{"version":3,"names":["BaseSceneController","APointLightModel","APointLightView","Quaternion","ATriangleMeshModel","ATriangleMeshView","BotModel","BotView","ExampleParticleSystemModel","ExampleParticleSystemView","ExampleThreeJSNodeModel","ExampleThreeJSNodeView","PlayerModel","PlayerView","TerrainModel","TerrainView","THREE","ADebugInteractionMode","ExamplePlayerInteractionMode","ExamplePointerLockInteractionMode","ExampleLoadedCharacterModel","ExampleLoadedModel","ExampleLoadedView","BillboardParticleSystemModel","BillboardParticleSystemView","Example1SceneController","model","_model","initModelViewSpecs","addModelViewSpec","initScene","path","format","urls","reflectionCube","CubeTextureLoader","load","sceneRotation","RotationX","Math","PI","view","threejs","rotation","setFromQuaternion","background","initInteractions","debugInteractionMode","defineInteractionMode","playerInteractionMode","pointerLockInteractionMode","setCurrentInteractionMode","onAnimationFrameCallback","context","time","timeUpdate","interactionMode","renderer","clear","render","_threeCamera"],"sources":["/Users/home/Desktop/cs4620-final-project/src/app/main/Scene/ExampleScenes/Example1/Example1SceneController.ts"],"sourcesContent":["import {BaseSceneController} from \"../../../../BaseClasses\";\nimport {MainSceneModel} from \"../../MainSceneModel\";\nimport {AGLContext, APointLightModel, APointLightView, Quaternion} from \"../../../../../anigraph\";\nimport {ATriangleMeshModel, ATriangleMeshView} from \"../../../../../anigraph/scene/nodes\";\nimport {\n    BotModel,\n    BotView, ExampleParticleSystemModel, ExampleParticleSystemView,\n    ExampleThreeJSNodeModel, ExampleThreeJSNodeView,\n    PlayerModel,\n    PlayerView,\n    TerrainModel,\n    TerrainView\n} from \"../../../Nodes\";\nimport * as THREE from \"three\";\nimport {ADebugInteractionMode} from \"../../../../../anigraph/scene/interactionmodes\";\nimport {ExamplePlayerInteractionMode} from \"../../../InteractionModes\";\nimport {ExamplePointerLockInteractionMode} from \"../../../InteractionModes/ExamplePointerLockInteractionMode\";\nimport {ExampleLoadedCharacterModel, ExampleLoadedModel, ExampleLoadedView} from \"../../../Nodes/Loaded\";\nimport {\n    BillboardParticleSystemModel,\n    BillboardParticleSystemView\n} from \"../../../Nodes/BillboardParticleSystem\";\n\nexport class Example1SceneController extends BaseSceneController{\n    get model():MainSceneModel{\n        return this._model as MainSceneModel;\n    }\n\n    /**\n     * This is where you specify the mapping from model classes to view classes.\n     */\n    initModelViewSpecs(): void {\n        this.addModelViewSpec(APointLightModel, APointLightView);\n        this.addModelViewSpec(ATriangleMeshModel, ATriangleMeshView);\n        this.addModelViewSpec(TerrainModel, TerrainView);\n        this.addModelViewSpec(PlayerModel, PlayerView);\n        this.addModelViewSpec(BotModel, BotView);\n        this.addModelViewSpec(ExampleThreeJSNodeModel, ExampleThreeJSNodeView);\n        this.addModelViewSpec(ExampleParticleSystemModel, ExampleParticleSystemView);\n\n        // Note that we can use the same view for two different models!\n        this.addModelViewSpec(ExampleLoadedCharacterModel, ExampleLoadedView);\n        this.addModelViewSpec(ExampleLoadedModel, ExampleLoadedView);\n\n        this.addModelViewSpec(BillboardParticleSystemModel, BillboardParticleSystemView);\n\n\n    }\n\n    async initScene(): Promise<void> {\n        /**\n         * Set up the skybox background\n         */\n        await super.initScene();\n        //let path = './images/cube/MilkyWay/dark-s_';\n        let path = './images/cube/Desert/desert2_';\n        let format = '.jpg'\n        const urls = [\n            path + 'px' + format, path + 'nx' + format,\n            path + 'py' + format, path + 'ny' + format,\n            path + 'pz' + format, path + 'nz' + format\n        ];\n\n        /**\n         * If you want to change the skybox, you will need to provide the appropriate urls to the corresponding textures\n         * from a cube map\n         */\n        const reflectionCube = new THREE.CubeTextureLoader().load( urls );\n        let sceneRotation = Quaternion.RotationX(Math.PI*0.5);\n        this.view.threejs.rotation.setFromQuaternion(sceneRotation);\n        //reflectionCube.rotation = Math.PI*0.25;\n        this.view.threejs.background = reflectionCube;\n    }\n\n    initInteractions() {\n\n        /**\n         * We will define the debug interaction mode here.\n         * The debug mode is offered mainly to provide camera controls for developing and debugging non-control-related\n         * features. It may also be useful as an example for you to look at if you like.\n         */\n        super.initInteractions();\n        let debugInteractionMode = new ADebugInteractionMode(this);\n        this.defineInteractionMode(\"Debug\", debugInteractionMode);\n\n\n        /**\n         * This code adds the ExamplePlayer interaction mode and sets it as the current active mode\n         */\n        let playerInteractionMode = new ExamplePlayerInteractionMode(this);\n        this.defineInteractionMode(\"ExamplePlayer\", playerInteractionMode);\n\n\n        let pointerLockInteractionMode = new ExamplePointerLockInteractionMode(this);\n        this.defineInteractionMode(\"ExamplePointerLock\", pointerLockInteractionMode);\n\n        /**\n         * For starters we will default to the debug mode.\n         */\n        this.setCurrentInteractionMode(\"Debug\")\n\n    }\n\n    onAnimationFrameCallback(context:AGLContext) {\n        // let's update the model\n        let time = this.time;\n        this.model.timeUpdate(time);\n\n        /**\n         * And the interaction mode... This is important for things like camera motion filtering.\n         */\n        this.interactionMode.timeUpdate(time)\n\n        // clear the rendering context\n        context.renderer.clear();\n        // this.renderer.clear(false, true);\n\n        // render the scene view\n        context.renderer.render(this.view.threejs, this._threeCamera);\n    }\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}